<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on GeekJoe</title>
    <link>/post/</link>
    <description>Recent content in Posts on GeekJoe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>[Home](/) &amp;#183; Theme [Simpleness](https://github.com/RainerChiang/simpleness) Powered by [Hugo](https://gohugo.io/)</copyright>
    <lastBuildDate>Tue, 31 Mar 2020 14:16:36 +0800</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode</title>
      <link>/post/leetcode/</link>
      <pubDate>Tue, 31 Mar 2020 14:16:36 +0800</pubDate>
      
      <guid>/post/leetcode/</guid>
      <description>&lt;h2 id=&#34;leetcode-191-number-of-1-bits&#34;&gt;Leetcode 191. Number of 1 Bits&lt;/h2&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a function that takes an unsigned integer and returns the number of &lt;code&gt;1&lt;/code&gt; bits it has (also known as the &lt;code&gt;Hamming weight&lt;/code&gt;). For example, the 32-bit integer &lt;code&gt;11&lt;/code&gt; has binary representation &lt;code&gt;00000000000000000000000000001011&lt;/code&gt;, so the function should return 3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h4 id=&#34;solutions&#34;&gt;Solutions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Hamming Weight&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; hammingWeight(&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; n) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(n)
        {
            c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//逐次获取最低非0 bit位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; c;
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Bit Mask&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hammingWeight&lt;/span&gt;(self, n):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type n: int
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :rtype: int
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        res&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        mask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;mask:  &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;amp;：按位与&lt;/span&gt;
                res&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            mask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mask&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# n=n&amp;gt;&amp;gt;1    #n移位或者mask移位&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;leetcode-386-lexicographical-numbers&#34;&gt;Leetcode 386. Lexicographical Numbers&lt;/h2&gt;
&lt;h3 id=&#34;description-1&#34;&gt;Description&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an integer &lt;code&gt;n&lt;/code&gt;, return &lt;code&gt;1-n&lt;/code&gt; in lexicographical order. For example, given 13, return: &lt;code&gt;[1,10,11,12,13,2,3,4,5,6,7,8,9]&lt;/code&gt;. Please optimize your algorithm to use less time and space. The input size may be as large as &lt;code&gt;5,000,000&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lexicalOrder(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) {
        vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; res;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        {
            res.push_back(cur);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(cur&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n)   &lt;span style=&#34;color:#75715e&#34;&gt;//首先判断能否直接再后面加0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                cur&lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(cur&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;(cur&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n)  &lt;span style=&#34;color:#75715e&#34;&gt;//正常情况下+1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                cur&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;((cur&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;//处理*9_的情况，例如192(n=192)的下一个应该是(1__开头结束)2开头，而不是20
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                {
                    cur&lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
                }
                cur&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(cur&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//这一轮个位结束，从上一位+1继续开始
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            } 
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;hints&#34;&gt;Hints&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;字典排序(数字)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先判断能否直接再后面加0即乘10&lt;/li&gt;
&lt;li&gt;正常情况下直接+1&lt;/li&gt;
&lt;li&gt;还有这一轮个位结束，回到上一位+1重新开始&lt;/li&gt;
&lt;li&gt;处理* 9 *的特殊情况，这种情况下需要从上一个不是9的位置开始也就是循环除以10&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;leetcode-387-first-unique-character-in-a-string&#34;&gt;Leetcode 387. First Unique Character in a String&lt;/h2&gt;
&lt;h3 id=&#34;description-2&#34;&gt;Description&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a string, find the first non-repeating character in it and return it&amp;rsquo;s index. If it doesn&amp;rsquo;t exist, return -1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;s = &amp;quot;leetcode&amp;quot;
return 0.

s = &amp;quot;loveleetcode&amp;quot;,
return 2.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may assume the string contain only lowercase letters.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>How to be a Postgraduate student(MIT)</title>
      <link>/post/how-to-be-a-postgraduate-studentmit/</link>
      <pubDate>Sat, 18 May 2019 11:08:40 +0000</pubDate>
      
      <guid>/post/how-to-be-a-postgraduate-studentmit/</guid>
      <description>&lt;h1 id=&#34;how-to-be-a-postgraduate-studentmit&#34;&gt;How to be a Postgraduate student(MIT)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Reproduce&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文的主旨是解释如何做研究。我们提供的这些建议，对于研究本身（阅读、写作和程序设计）、理解研究过程以及开始研究（方法论、选题、选导师和情感因素），都是极具价值的。&lt;/p&gt;
&lt;p&gt;这是什么？并没有什么神丹妙药可以保证在研究中取得成功，本文只是列举了一些可能会对研究有所帮助的非正式意见。&lt;/p&gt;
&lt;p&gt;目标读者是谁？本文主要是为新入学的研究生而写。&lt;/p&gt;
&lt;p&gt;如何使用？要精读完本文，太长了一些，最好是采用浏览的方式。很多人觉得下面的方法很有效：先快速通读一遍，然后选取其中与自己当前研究项目有关的部分仔细研究。&lt;/p&gt;
&lt;p&gt;本文被粗略地分为两部分。第一部分涉及研究者所需具备的各种技能：如阅读，写作和程序设计等等。第二部分讨论研究过程本身：即研究究竟是怎么回事，如何做研究，如何选题和选导师，如何考虑研究中的情感因素。很多读者反映，从长远看，第二部分比第一部分更有价值，也更让人感兴趣。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文的主要内容包括：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一、掌握一些阅读的诀窍。&lt;/p&gt;
&lt;p&gt;二、如何成为研究领域的一员：与相关人员保持联系，他们可以使你保持对研究前沿的跟踪，知道应该读什么材料。&lt;/p&gt;
&lt;p&gt;三、学习相关领域的知识：对几个领域都有基本的理解，对于一个或者两个领域要精通。&lt;/p&gt;
&lt;p&gt;四、如何做研究笔记。&lt;/p&gt;
&lt;p&gt;五、如何写期刊论文和毕业论文。如何为草稿写评审意见，如何利用别人的评审意见。如何发表论文。&lt;/p&gt;
&lt;p&gt;六、如何做研究报告及演讲。&lt;/p&gt;
&lt;p&gt;七、掌握和自己相关领域的程序设计。&lt;/p&gt;
&lt;p&gt;八、有关研究生涯最重要的问题，如何选导师。不同的导师具有不同的风格，导师是你必须了解如何利用的资源。&lt;/p&gt;
&lt;p&gt;九、关于毕业论文。毕业论文将占据研究生生涯的大部分时间，本部分涉及如何选题，以及如何避免浪费时间。&lt;/p&gt;
&lt;p&gt;十、研究方法论。&lt;/p&gt;
&lt;p&gt;十一、或许是最重要的一节：涉及研究过程中的情感因素，包括如何面对失败，如何设定目标，如何避免不安全感，保持自信，享受快乐。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrating to Python 3 with pleasure</title>
      <link>/post/migrating-to-python-3-with-pleasure/</link>
      <pubDate>Sat, 04 May 2019 09:30:29 +0000</pubDate>
      
      <guid>/post/migrating-to-python-3-with-pleasure/</guid>
      <description>&lt;h1 id=&#34;migrating-to-python-3-with-pleasure&#34;&gt;Migrating to Python 3 with pleasure&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Migrating to Python 3 with pleasure&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Pytorch Style Guide</title>
      <link>/post/pytorch-style-guide/</link>
      <pubDate>Wed, 01 May 2019 09:03:11 +0000</pubDate>
      
      <guid>/post/pytorch-style-guide/</guid>
      <description>&lt;h1 id=&#34;pytorch-style-guide&#34;&gt;Pytorch Style Guide&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;This is not an official style guide for PyTorch. This document summarizes best practices from more than a year of experience with deep learning using the PyTorch framework. Note that the learnings we share come mostly from a research and startup perspective.&lt;/p&gt;
&lt;p&gt;This is an open project and other collaborators are highly welcomed to edit and improve the document.&lt;/p&gt;
&lt;p&gt;You will find three main parts of this doc. First, a quick recap of best practices in Python, followed by some tips and recommendations using PyTorch. Finally, we share some insights and experiences using other frameworks which helped us generally improve our workflow.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Google Python Style Guide</title>
      <link>/post/google-python-style-guide/</link>
      <pubDate>Tue, 30 Apr 2019 20:37:51 +0000</pubDate>
      
      <guid>/post/google-python-style-guide/</guid>
      <description>&lt;h1 id=&#34;google-python-style-guide&#34;&gt;Google Python Style Guide&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>2019猪年快乐</title>
      <link>/post/2019%E7%8C%AA%E5%B9%B4%E5%BF%AB%E4%B9%90/</link>
      <pubDate>Mon, 04 Feb 2019 21:31:12 +0000</pubDate>
      
      <guid>/post/2019%E7%8C%AA%E5%B9%B4%E5%BF%AB%E4%B9%90/</guid>
      <description>&lt;h1 id=&#34;center2019大家年大吉center&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;2019㊗️大家🐷年大吉！&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>Show Me The Code</title>
      <link>/post/show-me-the-code/</link>
      <pubDate>Tue, 29 Jan 2019 20:37:25 +0000</pubDate>
      
      <guid>/post/show-me-the-code/</guid>
      <description>&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 练习册，每天一个小程序&lt;/p&gt;
&lt;p&gt;From&lt;a href=&#34;https://github.com/Yixiaohan/show-me-the-code&#34;&gt;&lt;strong&gt;show me the code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>LeetCode Analysis</title>
      <link>/post/leetcode-analysis/</link>
      <pubDate>Mon, 30 Jul 2018 16:09:21 +0000</pubDate>
      
      <guid>/post/leetcode-analysis/</guid>
      <description>LeetCode Analysis    LeetCode ID Name Status Difficulty Language     191 Number of 1 Bits Solved E C/C++   386 Lexicographical Numbers Solved M C/C++   387 First Unique Character in a String Solved E C/C++   461 Hamming Distance Solved E C/C++   535 Encode and Decode TinyURL Solved M C/C++   595 Big Countries Solved E C/C++   617 Merge Two Binary Trees Solved E C/C++   627 Swap Salary Solved E MySQL   654 Maximum Binary Tree Solved M C/C++   657 Judge Route Circle Solved E C/C++   709 To Lower Case Solved E C/C++   771 Jewels and Stones Solved E C/C++   804 Unique Morse Code Words Solved E C/C++   807 Max Increase to Keep City Skyline Solved M C/C++   832 Flipping an Image Solved E C/C++   852 Peak Index in a Mountain Array Solved E C/C++   876 Middle of the Linked List Solved E C/C++    </description>
    </item>
    
  </channel>
</rss>
