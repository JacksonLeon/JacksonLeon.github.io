<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python Note]]></title>
    <url>%2F2019%2F01%2F25%2FPython-Note%2F</url>
    <content type="text"><![CDATA[PythonAuthor: JacksonLeon Description Python个人笔记 持续更新 简介 之所以，我们把Python，蟒蛇，作为此计算机语言的名字，是有其历史典故的： Python语言的创始人，吉多·范罗苏姆（Guido van Rossum）在1989年圣诞节期间，在阿姆斯特丹，为了打发圣诞节的无趣，决心开发一个新的脚本解释程序，而在给自己新创造的计算机语言起名字的时候，由于其是，自于七十年代风靡全球的英国六人喜剧团体，巨蟒剧团（Monty Python）的忠实粉丝，所以，就把此计算机语言的名字叫做：Python。 Python是一种脚本语言、解释性语言「无需编译源码，可直接运行」、交互性语言、面向对象的语言。 代码缩进决定了Python代码的逻辑关系，而不仅仅是为了好看 安装Mac下安装非常简单，一条命令：brew install python3，只不过有时候需要更新Homebrew，比较耗费时间。 如果你没有Homebrew，使用/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;安装完成后，再安装Python。 基础字符串与基本规则 字符串 单引号与双引号作用相同、三引号‘’&#39;/“&quot;”用来指定多行字符串。 更多用法： 123456789101112131415# 这是一个字符串对象name = 'Swaroop'if name.startswith('Swa'): print('Yes, the string starts with "Swa"')if 'a' in name: print('Yes, it contains the string "a"')if name.find('war') != -1: print('Yes, it contains the string "war"')delimiter = '_*_'mylist = ['Brazil', 'Russia', 'India', 'China']print(delimiter.join(mylist)) 输出： 12345$ python ds_str_methods.pyYes, the string starts with &quot;Swa&quot;Yes, it contains the string &quot;a&quot;Yes, it contains the string &quot;war&quot;Brazil_*_Russia_*_India_*_China 格式化：format() 例如： 1234567891011121314151617181920age = 20name = 'Swaroop'print('&#123;0&#125; was &#123;1&#125; years old when he wrote this book'.format(name, age))print('Why is &#123;0&#125; playing with that python?'.format(name))# 输出：Swaroop was 20 years old when he wrote this bookWhy is Swaroop playing with that python?# 对于浮点数 '0.333' 保留小数点(.)后三位print('&#123;0:.3f&#125;'.format(1.0/3))# 使用下划线填充文本，并保持文字处于中间位置# 使用 (^) 定义 '___hello___'字符串长度为 11print('&#123;0:_^11&#125;'.format('hello'))# 基于关键词输出 'Swaroop wrote A Byte of Python' print('&#123;name&#125; wrote &#123;book&#125;'.format(name='Swaroop', book='A Byte of Python'))# 输出：0.333___hello___Swaroop wrote A Byte of Python print() 由于我们正在讨论格式问题，就要注意 print 总是会以一个不可见的“新一行”字符（\n）结尾，因此重复调用 print将会在相互独立的一行中分别打印。为防止打印过程中出现这一换行符，你可以通过 end指定其应以空白结尾： 12print('a', end='')print('b', end='') 输出结果如下： 1ab 或者你通过 end 指定以空格结尾： 123print('a', end=' ')print('b', end=' ')print('c') 输出结果如下： 1a b c 转义字符：\ 以及：在一个字符串中，一个放置在末尾的反斜杠表示字符串将在下一行继续，但不会添加新的一行。 如果你需要指定一些未经过特殊处理的字符串，比如转义序列，那么你需要在字符串前增加 r 或 R 来指定一个原始（Raw）字符串。 在处理正则表达式时应全程使用原始字符串。否则，将会有大量 Backwhacking 需要处理。举例说明的话，反向引用可以通过 &#39;\\1&#39; 或 r&#39;\1&#39; 来实现。 命名规则 变量是标识符的一个例子。标识符（Identifiers） 是为 某些东西 提供的给定名称。在你命名标识符时，你需要遵守以下规则： 第一个字符必须是字母表中的字母（大写 ASCII 字符或小写 ASCII 字符或 Unicode 字符）或下划线（_）。 标识符的其它部分可以由字符（大写 ASCII 字符或小写 ASCII 字符或 Unicode 字符）、下划线（_）、数字（0~9）组成。 标识符名称区分大小写。例如，myname 和 myName 并不等同。要注意到前者是小写字母 n 而后者是大写字母 N。 有效 的标识符名称可以是 i 或 name_2_3 ，无效 的标识符名称可能是 2things，this is spaced out，my-name 和 &gt;a1b2_c3。 缩进 使用四个空格来缩进。这是来自 Python 语言官方的建议。好的编辑器会自动为你完成这一工作。请确保你在缩进中使用数量一致的空格，否则你的程序将不会运行，或引发不期望的行为。 运算符与表达式 运算符 +（加） 两个对象相加。 3+5 则输出 8。&#39;a&#39; + &#39;b&#39; 则输出 &#39;ab&#39;。 -（减） 从一个数中减去另一个数，如果第一个操作数不存在，则假定为零。 -5.2 将输出一个负数，50 - 24 输出 26。 *（乘） 给出两个数的乘积，或返回字符串重复指定次数后的结果。 2 * 3 输出 6。&#39;la&#39; * 3 输出 &#39;lalala&#39;。 ** （乘方） 返回 x 的 y 次方。 3 ** 4 输出 81 （即 3 * 3 * 3 * 3）。 / （除） x 除以 y 13 / 3 输出 4.333333333333333。 // （整除） x 除以 y 并对结果向下取整至最接近的整数。 13 // 3 输出 4。 -13 // 3 输出 -5。 % （取模） 返回除法运算后的余数。 13 % 3 输出 1。-25.5 % 2.25 输出 1.5。 &lt;&lt; （左移） 将数字的位向左移动指定的位数。（每个数字在内存中以二进制数表示，即 0 和1） 2 &lt;&lt; 2 输出 8。 2 用二进制数表示为 10。 向左移 2 位会得到 1000 这一结果，表示十进制中的 8。 &gt;&gt; （右移） 将数字的位向右移动指定的位数。 11 &gt;&gt; 1 输出 5。 11 在二进制中表示为 1011，右移一位后输出 101 这一结果，表示十进制中的 5。 &amp; （按位与） 对数字进行按位与操作。 5 &amp; 3 输出 1。 | （按位或） 对数字进行按位或操作。 5 | 3 输出 7。 ^（按位异或） 对数字进行按位异或操作。 5 ^ 3 输出 6。 ~ （按位取反） x 的按位取反结果为 -(x+1)。 ~5 输出 -6。有关本例的更多细节可以参阅：http://stackoverflow.com/a/11810203 。 &lt; （小于） 返回 x 是否小于 y。所有的比较运算符返回的结果均为 True 或 False。请注意这些名称之中的大写字母。 5 &lt; 3 输出 False，3 &lt; 6 输出 True。 比较可以任意组成组成链接：3 &lt; 5 &lt; 7 返回 True。 &gt; （大于） 返回 x 是否大于 y。 5 &gt; 3 返回 True。如果两个操作数均为数字，它们首先将会被转换至一种共同的类型。否则，它将总是返回 False。 &lt;= （小于等于） 返回 x 是否小于或等于 y。 x = 3; y = 6; x&lt;=y 返回 True。 &gt;= （大于等于） 返回 x 是否大于或等于 y。 x = 4; y = 3; x&gt;=3 返回 True。 == （等于） 比较两个对象是否相等。 x = 2; y = 2; x == y 返回 True。 x = &#39;str&#39;; y = &#39;stR&#39;; x == y 返回 False。 x = &#39;str&#39;; y = &#39;str&#39;; x == y 返回 True。 != （不等于） 比较两个对象是否不相等。 x = 2; y = 3; x != y 返回 True。 not （布尔“非”） 如果 x 是 True，则返回 False。如果 x 是 False，则返回 True。 x = True; not x 返回 False。 and （布尔“与”） 如果 x 是 False，则 x and y 返回 False，否则返回 y 的计算值。 当 x 是 False 时，x = False; y = True; x and y 将返回 False。在这一情境中，Python 将不会计算 y，因为它已经了解 and 表达式的左侧是 False，这意味着整个表达式都将是 False 而不会是别的值。这种情况被称作短路计算（Short-circuit Evaluation）。 or（布尔“或”） 如果 x 是 True，则返回 True，否则它将返回 y 的计算值。 x = Ture; y = False; x or y 将返回 Ture。在这里短路计算同样适用。 运算顺序 下面是从 Python 参考手册 中引用而来。你最好使用圆括号操作符来对运算符与操作数进行分组，以更加明确地指定优先级。这也能使得程序更加可读。你可以阅读改变运算顺序来了解更多的细节。 lambda：Lambda 表达式 if - else ：条件表达式 or：布尔“或” and：布尔“与” not x：布尔“非” in, not in, is, is not, &lt;, &lt;=, &gt;, &gt;=, !=, ==：比较，包括成员资格测试（Membership Tests）和身份测试（Identity Tests）。 |：按位或 ^：按位异或 &amp;：按位与 &lt;&lt;, &gt;&gt;：移动 +, -：加与减 *, /, //, %：乘、除、整除、取余 +x, -x, ~x：正、负、按位取反 **：求幂 x[index], x[index:index], x(arguments...), x.attribute：下标、切片、调用、属性引用 (expressions...), [expressions...], {key: value...}, {expressions...}：表示绑定或元组、表示列表、表示字典、表示集合 控制语句 if语句 12345678910111213141516171819number = 23guess = int(input('Enter an integer : '))if guess == number: # 新块从这里开始 print('Congratulations, you guessed it.') print('(but you do not win any prizes!)') # 新块在这里结束elif guess &lt; number: # 另一代码块 print('No, it is a little higher than that') # 你可以在此做任何你希望在该代码块内进行的事情else: print('No, it is a little lower than that') # 你必须通过猜测一个大于（&gt;）设置数的数字来到达这里。print('Done')# 这最后一句语句将在# if 语句执行完毕后执行。 for 1234for i in range(1, 5): print(i)else: print('The for loop is over') while 1234567891011121314151617181920212223242526272829number = 23running = Truewhile running: guess = int(input('Enter an integer : ')) if guess == number: print('Congratulations, you guessed it.') # 这将导致 while 循环中止 running = False elif guess &lt; number: print('No, it is a little higher than that.') else: print('No, it is a little lower than that.')else: print('The while loop is over.') # 在这里你可以做你想做的任何事print('Done')# 输出Enter an integer : 50No, it is a little lower than that.Enter an integer : 22No, it is a little higher than that.Enter an integer : 23Congratulations, you guessed it.The while loop is over.Done break break 语句用以中断（Break）循环语句，也就是中止循环语句的执行，即使循环条件没有变更为 False，或队列中的项目尚未完全迭代依旧如此。 有一点需要尤其注意，如果你 中断 了一个 for 或 while 循环，任何相应循环中的 else 块都将不会被执行。 continue continue 语句用以告诉 Python 跳过当前循环块中的剩余语句，并继续该循环的下一次迭代，同样能用于 for 循环。 函数1234567def say_hello(): # 该块属于这一函数 print('hello world')# 函数结束say_hello() # 调用函数say_hello() # 再次调用函数 参数 在定义函数时给定的名称称作“形参”（Parameters），在调用函数时你所提供给函数的值称作“实参”（Arguments）。 局部变量 当你在一个函数的定义中声明变量时，它们不会以任何方式与身处函数之外但具有相同名称的变量产生关系，也就是说，这些变量名只存在于函数这一局部（Local）。这被称为变量的作用域（Scope）。所有变量的作用域是它们被定义的块，从定义它们的名字的定义点开始。 全局声明 global 语句用以声明 x 是一个全局变量——因此，当我们在函数中为 x 进行赋值时，这一改动将影响到我们在主代码块中使用的 x 的值。 你可以在同一句 global 语句中指定不止一个的全局变量，例如 global x, y, z。 模块 模块的 __name__ 每个模块都有一个名称，而模块中的语句可以找到它们所处的模块的名称。这对于确定模块是独立运行的还是被导入进来运行的这一特定目的来说大为有用。正如先前所提到的，当模块第一次被导入时，它所包含的代码将被执行。我们可以通过这一特性来使模块以不同的方式运行，这取决于它是为自己所用还是从其它从的模块中导入而来。这可以通过使用模块的 __name__ 属性来实现。 1234if __name__ == '__main__': print('This program is being run by itself')else: print('I am being imported from another module') 输出： 1234567$ python module_using_name.pyThis program is being run by itself$ python&gt;&gt;&gt; import module_using_nameI am being imported from another module&gt;&gt;&gt; Python之蝉 Python 的一大指导原则是“明了胜过晦涩”。你可以通过在 Python 中运行 import this 来了解更多内容。 12345678910111213141516171819202122&gt;&gt;&gt; import thisThe Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren&apos;t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you&apos;re Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it&apos;s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let&apos;s do more of those! 数据结构 list 12345678910111213141516171819202122# This is my shopping listshoplist = ['apple', 'mango', 'carrot', 'banana']print('I have', len(shoplist), 'items to purchase.')print('These items are:', end=' ')for item in shoplist: print(item, end=' ')print('\nI also have to buy rice.')shoplist.append('rice')print('My shopping list is now', shoplist)print('I will sort my list now')shoplist.sort()print('Sorted shopping list is', shoplist)print('The first item I will buy is', shoplist[0])olditem = shoplist[0]del shoplist[0]print('I bought the', olditem)print('My shopping list is now', shoplist) 输出： 12345678910$ python ds_using_list.pyI have 4 items to purchase.These items are: apple mango carrot bananaI also have to buy rice.My shopping list is now [&apos;apple&apos;, &apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;, &apos;rice&apos;]I will sort my list nowSorted shopping list is [&apos;apple&apos;, &apos;banana&apos;, &apos;carrot&apos;, &apos;mango&apos;, &apos;rice&apos;]The first item I will buy is appleI bought the appleMy shopping list is now [&apos;banana&apos;, &apos;carrot&apos;, &apos;mango&apos;, &apos;rice&apos;] 元组 元组（Tuple）用于将多个对象保存到一起。你可以将它们近似地看作列表，但是元组不能提供列表类能够提供给你的广泛的功能。元组的一大特征类似于字符串，它们是不可变的，也就是说，你不能编辑或更改元组。 元组通常用于保证某一语句或某一用户定义的函数可以安全地采用一组数值，意即元组内的数值不会改变。 1234567891011121314# 我会推荐你总是使用括号# 来指明元组的开始与结束# 尽管括号是一个可选选项。# 明了胜过晦涩，显式优于隐式。zoo = ('python', 'elephant', 'penguin')print('Number of animals in the zoo is', len(zoo))new_zoo = 'monkey', 'camel', zooprint('Number of cages in the new zoo is', len(new_zoo))print('All animals in new zoo are', new_zoo)print('Animals brought from old zoo are', new_zoo[2])print('Last animal brought from old zoo is', new_zoo[2][2])print('Number of animals in the new zoo is', len(new_zoo)-1+len(new_zoo[2])) 输出： 1234567$ python ds_using_tuple.pyNumber of animals in the zoo is 3Number of cages in the new zoo is 3All animals in new zoo are (&apos;monkey&apos;, &apos;camel&apos;, (&apos;python&apos;, &apos;elephant&apos;, &apos;penguin&apos;))Animals brought from old zoo are (&apos;python&apos;, &apos;elephant&apos;, &apos;penguin&apos;)Last animal brought from old zoo is penguinNumber of animals in the new zoo is 5 字典 键值必须是唯一，你只能使用不可变的对象（如字符串）作为字典的键值，但是你可以使用可变或不可变的对象作为字典中的值。基本上这段话也可以翻译为你只能使用简单对象作为键值。 123456789101112131415161718192021222324# “ab”是地址（Address）簿（Book）的缩写ab = &#123; 'Swaroop': 'swaroop@swaroopch.com', 'Larry': 'larry@wall.org', 'Matsumoto': 'matz@ruby-lang.org', 'Spammer': 'spammer@hotmail.com'&#125;print("Swaroop's address is", ab['Swaroop'])# 删除一对键值—值配对del ab['Spammer']print('\nThere are &#123;&#125; contacts in the address-book\n'.format(len(ab)))for name, address in ab.items(): print('Contact &#123;&#125; at &#123;&#125;'.format(name, address))# 添加一对键值—值配对ab['Guido'] = 'guido@python.org'if 'Guido' in ab: print("\nGuido's address is", ab['Guido']) 输出： 12345678910$ python ds_using_dict.pySwaroop&apos;s address is swaroop@swaroopch.comThere are 3 contacts in the address-bookContact Swaroop at swaroop@swaroopch.comContact Matsumoto at matz@ruby-lang.orgContact Larry at larry@wall.orgGuido&apos;s address is guido@python.org 序列操作 123456789101112131415161718192021222324shoplist = ['apple', 'mango', 'carrot', 'banana']name = 'swaroop'# Indexing or 'Subscription' operation ## 索引或“下标（Subscription）”操作符 #print('Item 0 is', shoplist[0])print('Item 1 is', shoplist[1])print('Item 2 is', shoplist[2])print('Item 3 is', shoplist[3])print('Item -1 is', shoplist[-1])print('Item -2 is', shoplist[-2])print('Character 0 is', name[0])# Slicing on a list #print('Item 1 to 3 is', shoplist[1:3])print('Item 2 to end is', shoplist[2:])print('Item 1 to -1 is', shoplist[1:-1])print('Item start to end is', shoplist[:])# 从某一字符串中切片 #print('characters 1 to 3 is', name[1:3])print('characters 2 to end is', name[2:])print('characters 1 to -1 is', name[1:-1])print('characters start to end is', name[:]) 输出： 123456789101112131415Item 0 is appleItem 1 is mangoItem 2 is carrotItem 3 is bananaItem -1 is bananaItem -2 is carrotCharacter 0 is sItem 1 to 3 is [&apos;mango&apos;, &apos;carrot&apos;]Item 2 to end is [&apos;carrot&apos;, &apos;banana&apos;]Item 1 to -1 is [&apos;mango&apos;, &apos;carrot&apos;]Item start to end is [&apos;apple&apos;, &apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]characters 1 to 3 is wacharacters 2 to end is aroopcharacters 1 to -1 is waroocharacters start to end is swaroop 集合 集合（Set）是简单对象的无序集合（Collection）。当集合中的项目存在与否比起次序或其出现次数更加重要时，我们就会使用集合。说明集合里的元素是不重复的。 通过使用集合，你可以测试某些对象的资格或情况，检查它们是否是其它集合的子集，找到两个集合的交集，等等。 引用——涉及到深拷贝浅拷贝的问题 1234567891011121314151617181920212223print('Simple Assignment')shoplist = ['apple', 'mango', 'carrot', 'banana']# mylist 只是指向同一对象的另一种名称mylist = shoplist# 我购买了第一项项目，所以我将其从列表中删除del shoplist[0]print('shoplist is', shoplist)print('mylist is', mylist)# 注意到 shoplist 和 mylist 二者都# 打印出了其中都没有 apple 的同样的列表，以此我们确认# 它们指向的是同一个对象print('Copy by making a full slice')# 通过生成一份完整的切片制作一份列表的副本mylist = shoplist[:]# 删除第一个项目del mylist[0]print('shoplist is', shoplist)print('mylist is', mylist)# 注意到现在两份列表已出现不同 输出： 1234567$ python ds_reference.pySimple Assignmentshoplist is [&apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]mylist is [&apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]Copy by making a full sliceshoplist is [&apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]mylist is [&apos;carrot&apos;, &apos;banana&apos;] 要记住列表的赋值语句不会创建一份副本。你必须使用切片操作来生成一份序列的副本。 面向对象编程类与对象是面向对象编程的两个主要方面。一个类（Class）能够创建一种新的类型（Type），其中对象（Object）就是类的实例（Instance）。可以这样来类比：你可以拥有类型 int 的变量，也就是说存储整数的变量是 int 类的实例（对象）。 对象可以使用属于它的普通变量来存储数据。这种从属于对象或类的变量叫作字段（Field）。对象还可以使用属于类的函数来实现某些功能，这种函数叫作类的方法（Method）。这两个术语很重要，它有助于我们区分函数与变量，哪些是独立的，哪些又是属于类或对象的。总之，字段与方法通称类的属性（Attribute）。 字段有两种类型——它们属于某一类的各个实例或对象，或是从属于某一类本身。它们被分别称作实例变量（Instance Variables）与类变量（Class Variables）。 通过 class 关键字可以创建一个类。这个类的字段与方法可以在缩进代码块中予以列出。 self 类方法与普通函数只有一种特定的区别——前者必须多加一个参数在参数列表开头，这个名字必须添加到参数列表的开头，但是你不用在你调用这个功能时为这个参数赋值，Python 会为它提供。这种特定的变量引用的是对象本身，按照惯例，它被赋予 self 这一名称。 Python 中的 self 相当于 C++ 中的 this 指针以及 Java 与 C# 中的 this 引用。 __init__ __init__ 方法会在类的对象被实例化（Instantiated）时立即运行。这一方法可以对任何你想进行操作的目标对象进行初始化（Initialization）操作。这里你要注意在 init 前后加上的双下划线。 类变量与对象变量 每个对象都通过 self.__class__ 属性来引用它的类。 类方法与对象方法与变量是对应的，通过对应的变量引用。我们使用装饰器（Decorator）将 how_many 方法标记为类方法。 所有类成员（包括数据成员）都是公开的，并且 Python 中所有的方法都是虚拟的（Virtual）。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# coding=UTF-8class Robot: """表示有一个带有名字的机器人。""" # 一个类变量，用来计数机器人的数量 population = 0 def __init__(self, name): """初始化数据""" self.name = name print("(Initializing &#123;&#125;)".format(self.name)) # 当有人被创建时，机器人 # 将会增加人口数量 Robot.population += 1 def die(self): """我挂了。""" print("&#123;&#125; is being destroyed!".format(self.name)) Robot.population -= 1 if Robot.population == 0: print("&#123;&#125; was the last one.".format(self.name)) else: print("There are still &#123;:d&#125; robots working.".format( Robot.population)) def say_hi(self): """来自机器人的诚挚问候 没问题，你做得到。""" print("Greetings, my masters call me &#123;&#125;.".format(self.name)) @classmethod def how_many(cls): """打印出当前的人口数量""" print("We have &#123;:d&#125; robots.".format(cls.population))droid1 = Robot("R2-D2")droid1.say_hi()Robot.how_many()droid2 = Robot("C-3PO")droid2.say_hi()Robot.how_many()print("\nRobots can do some work here.\n")print("Robots have finished their work. So let's destroy them.")droid1.die()droid2.die()Robot.how_many() 输出： 12345678910111213141516$ python oop_objvar.py(Initializing R2-D2)Greetings, my masters call me R2-D2.We have 1 robots.(Initializing C-3PO)Greetings, my masters call me C-3PO.We have 2 robots.Robots can do some work here.Robots have finished their work. So let&apos;s destroy them.R2-D2 is being destroyed!There are still 1 robots working.C-3PO is being destroyed!C-3PO was the last one.We have 0 robots. 继承 面向对象编程的一大优点是对代码的重用（Reuse），重用的一种实现方法就是通过继承（Inheritance）机制。继承最好是想象成在类之间实现类型与子类型（Type and Subtype）关系的工具。 SchoolMember 类会被称作基类（Base Class）或是超类（Superclass）。Teacher 和 Student 类会被称作派生类（Derived Classes）或是子类（Subclass）。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# coding=UTF-8class SchoolMember: '''代表任何学校里的成员。''' def __init__(self, name, age): self.name = name self.age = age print('(Initialized SchoolMember: &#123;&#125;)'.format(self.name)) def tell(self): '''告诉我有关我的细节。''' print('Name:"&#123;&#125;" Age:"&#123;&#125;"'.format(self.name, self.age), end=" ")class Teacher(SchoolMember): '''代表一位老师。''' def __init__(self, name, age, salary): SchoolMember.__init__(self, name, age) self.salary = salary print('(Initialized Teacher: &#123;&#125;)'.format(self.name)) def tell(self): SchoolMember.tell(self) print('Salary: "&#123;:d&#125;"'.format(self.salary))class Student(SchoolMember): '''代表一位学生。''' def __init__(self, name, age, marks): SchoolMember.__init__(self, name, age) self.marks = marks print('(Initialized Student: &#123;&#125;)'.format(self.name)) def tell(self): SchoolMember.tell(self) print('Marks: "&#123;:d&#125;"'.format(self.marks))t = Teacher('Mrs. Shrividya', 40, 30000)s = Student('Swaroop', 25, 75)# 打印一行空白行print()members = [t, s]for member in members: # 对全体师生工作 member.tell() 输出： 12345678$ python oop_subclass.py(Initialized SchoolMember: Mrs. Shrividya)(Initialized Teacher: Mrs. Shrividya)(Initialized SchoolMember: Swaroop)(Initialized Student: Swaroop)Name:&quot;Mrs. Shrividya&quot; Age:&quot;40&quot; Salary: &quot;30000&quot;Name:&quot;Swaroop&quot; Age:&quot;25&quot; Marks: &quot;75&quot; Q&amp;A Purpose of #!/usr/bin/python3 Answer: #!/usr/bin/python3 is a shebang line. A shebang line defines where the interpreter is located. In this case, the python3 interpreter is located in /usr/bin/python3. A shebang line could also be a bash, ruby, perl or any other scripting languages’ interpreter, for example: #!/bin/bash. Without the shebang line, the operating system does not know it’s a python script, even if you set the execution flag on the script and run it like ./script.py. To make the script run by default in python3, either invoke it as python3 script.py or set the shebang line. You can use #!/usr/bin/env python3 for portability across different systems in case they have the language interpreter installed in different locations.]]></content>
      <categories>
        <category>Note</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Settings of iTerm2 on Mac]]></title>
    <url>%2F2019%2F01%2F24%2FSettings-of-iTerm2-on-Mac%2F</url>
    <content type="text"><![CDATA[Mac终端iTerm 2配置Author: 以乐之名 「from 简书」 Description 完成配置后的iTerm 2具备功能： 语法高亮 命令Tab补全 自动提示 Git相关功能 安装 下载iTerm2 解压后安装iTerm2并打开 设为Mac默认终端 123chsh -s /bin/zsh# 如果想修改回默认dash，同样使用chsh命令即可：chsh -s /bin/bash 配置美化 配色方案 123git clone https://github.com/altercation/solarizedcd solarized/iterm2-colors-solarized/open . 在打开的finder窗口中，双击Solarized Dark.itermcolors和Solarized Light.itermcolors即可安装明暗两种配色，再次进入iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets中根据个人喜好选择这两种配色中的一种即可： oh-my-zsh github：https://github.com/robbyrussell/oh-my-zsh 官方提供 curl 和 wget 两种安装方式 curl 安装： sh -c `“$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;` wget安装： sh -c `“$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)”` iTerm 2主题 用vim编辑~/.zshrc，将zsh主题修改为“agnoster”，ZSH_THEME=&quot;agnoster&quot;，之后使用command+Q或source ~/.zshrc，是配置文件生效。 路径前缀的XX@XX太长，缩短：编辑~/.oh-my-zsh/themes/agnoster.zsh-theme主体文件，将里面的build_prompt下的prompt_context字段在前面加#注释掉即可 安装PowerLine powerline官网：http://powerline.readthedocs…. 安装powerline的方式依然简单，也只需要一条命令： 1pip install powerline-status --user 没有安装pip的同学可能会碰到zsh: command not found: pip，使用命令安装pip即可： 1sudo easy_install pip 安装后再次执行安装powerline的命令即可。 安装PowerFonts 安装字体库需要首先将项目git clone至本地，然后执行源码中的install.sh。 123456# git clonegit clone https://github.com/powerline/fonts.git --depth=1# cd to foldercd fonts# run install shell./install.sh 安装好字体库之后，我们来设置iTerm2的字体，具体的操作是iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text，在Font区域选中Change Font，然后找到Meslo LG字体。有L、M、S可选，看个人喜好： 自动提示与命令补全 1234cd ~/.oh-my-zsh/custom/pluginsgit clone git://github.com/zsh-users/zsh-autosuggestionsvim ~/.zshrc# 加上plugins=(zsh-autosuggestions) PS：当你重新打开终端时可能看不到变化，可能你的字体颜色太淡了，我们把其改亮一些： 12345cd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions`vim zsh-autosuggestions.zsh# 修改内容ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=10'source zsh-autosuggestions.zsh 语法高亮效果 这是oh my zsh的一个插件，安装方式与theme大同小异： 123cd ~/.oh-my-zsh/custom/plugins/git clone https://github.com/zsh-users/zsh-syntax-highlighting.gitvi ~/.zshrc 这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上： 请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。 然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh并保存文件。 执行命令使刚才的修改生效：source ~/.zshrc。]]></content>
      <categories>
        <category>Macintosh</category>
        <category>Application</category>
      </categories>
      <tags>
        <tag>Macintosh</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Homebrew for Mac]]></title>
    <url>%2F2019%2F01%2F23%2FHomebrew-for-Mac%2F</url>
    <content type="text"><![CDATA[Homebrew for MacAuthor: JacksonLeon Description Homebrew简介，安装与使用 简介本文严重抄袭此文章 Homebrew 官方网站 Homebrew是一个包管理器，用于安装Apple没有预装但你需要的UNIX工具。（比如著名的wget）。 Homebrew会将软件包安装到独立目录(/usr/local/Cellar)，并将其文件软链接至/usr/local。 Homebrew不会将文件安装到它本身目录之外，所以您可将Homebrew安装到任意位置。 Homebrew使macOS更完整。使用gem来安装gems、用brew来安装那些依赖包。 wget是一个从网络上自动下载文件的自由工具，支持通过 HTTP、HTTPS、FTP 三个最常见的 TCP/IP协议下载，并可以使用HTTP代理。&quot;wget&quot; 这个名称来源于 “World Wide Web” 与 “get” 的结合。 安装 安装XCode或者Command Line Tools for Xcode。Xcode可以从AppStore里下载安装，Command Line Tools for Xcode需要在终端中输入以下代码运行安装： 1xcode-select --install 安装Homebrew。将以下命令粘贴至终端 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 脚本会在执行前暂停，并说明将它将做什么。 安装完成以后，需要运行brew doctor命令检测下是否有什么冲突的地方（如没有卸载MacPorts等等） Homebrew安装成功后，会自动创建目录/usr/local/Cellar来存放Homebrew安装的程序。 移除Homebrew。将以下命令粘贴至终端 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot; 基本使用1234567891011121314151617181920212223242526272829303132// 搜索包brew search mysql// 安装包brew install mysql// 查看包信息，比如目前的版本，依赖，安装后注意事项等brew info mysql// 卸载包brew uninstall wget// 显示已安装的包brew list// 查看brew的帮助brew –help// 更新， 这会更新 Homebrew 自己brew update// 检查过时（是否有新版本），这会列出所有安装的包里，哪些可以升级brew outdatedbrew outdated mysql// 升级所有可以升级的软件们brew upgradebrew upgrade mysql// 清理不需要的版本极其安装包缓存brew cleanupbrew cleanup mysql 扩展：Homebrew Cask你已经感受到了使用Homebrew安装命令行程序的便利。那么接下来，我们将通过Homebrew Cask优雅、简单、快速的安装和管理OS X图形界面程序，比如Google Chrome和Dropbox。 安装1brew install caskroom/cask/brew-cask 使用基本用法与brew相同，只不过在brew后面加了一个cask单词。 12345// 安装软件brew cask install google-chrome// 卸载软件brew cask uninstall google-chrome 其他JDK 8 can be downloaded from Oracle’s JDK Page. 1234567// 安装Bazelbrew install bazel// 查看Bazel版本bazel version// 提示需要安装java JDK 移除JAVA JDK 1234sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.pluginsudo rm -fr /Library/PreferencesPanes/JavaControlPanel.prefPanesudo rm -fr ~/Library/Application\ Support/Javasudo rm -rf /Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk]]></content>
      <categories>
        <category>Macintosh</category>
        <category>Application</category>
      </categories>
      <tags>
        <tag>Macintosh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows Note]]></title>
    <url>%2F2019%2F01%2F21%2FWindows-note%2F</url>
    <content type="text"><![CDATA[Windows NoteAuthor: JacksonLeon Description 此文用来记录平时使用Windows遇到的问题与心得. 本文长期更新. 重装电脑 UWP 网易云音乐 OneNote QuickLook Applications Coding VS Code Intellij IDEA Git Notepad++ Java Python3 Office Fun Tim WeChat PotPlayer Chrome Tools 7-zip SSR v2rayN Notion Picgo IDM 迅雷 Pandownload Rainmeter Typora Others Hexo Blog]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[V2Ray Tutorial]]></title>
    <url>%2F2018%2F12%2F24%2FV2Ray-Tutorial%2F</url>
    <content type="text"><![CDATA[V2Ray TutorialAuthor: JacksonLeon Description v2ray是一个代理平台，能够配置多种协议，有很多的玩法、用法（动态端口、mKCP、Mux等等）。更多的内容请查看V2Ray官网。 平台支持V2Ray 在以下平台中可用： Windows 7 及之后版本（x86 / amd64）； Mac OS X 10.10 Yosemite 及之后版本（amd64）； Linux 2.6.23 及之后版本（x86 / amd64 / arm / arm64 / mips64 / mips）； 包括但不限于 Debian 7 / 8、Ubuntu 12.04 / 14.04 及后续版本、CentOS 6 / 7、Arch Linux； FreeBSD (x86 / amd64)； OpenBSD (x86 / amd64)； Dragonfly BSD (amd64)； Windows平台V2RayN 是 PC 平台一个对新手比较友好的 V2Ray GUI 客户端。 下载V2Ray Github Release Github 分流 Homebrew Arch Linux Snapcraft 压缩包均为 zip 格式，找到对应平台的压缩包，下载解压。 下载V2RayN Github Release 解压，将解压出来的 v2rayN.exe 和 zh-Hans 文件夹全部复制到之前下载并解压出来的 v2ray-windows-xx 文件夹目录中。 傻瓜式配置应用双击1234567891011121314151617181920212223242526272829303132![](https://ws1.sinaimg.cn/large/006gHug0ly1fxi2g58k7zj30rk0ir797.jpg)点击订阅-订阅设置，在url栏填写订阅地址，并选择确定。![](https://ws1.sinaimg.cn/large/006gHug0ly1fxi2l0q028j30g90flwee.jpg)### 注意事项- 如果发生**应用占用CPU过高**，建议更换本地监听端口，在参数设置-基础设置中进行更改。更改后建议重启服务或者重启设备；- 连不上就换一个服务器试一试；- 客户端允许最多50个同时使用，月流量50G，仅供科学上网使用- **v2ray要求系统时间准确,如果连接不上,请检查系统的时间是否准确**；- 服务器模式 - 全局：全部流量走国外服务器 - PAC：跳过大陆IP，其他走国外服务器 - 直连：不走国外服务器![](https://ws1.sinaimg.cn/large/006gHug0ly1fxl9li1dqlj309w02l3ye.jpg)### Enjoy it!![](https://ws1.sinaimg.cn/large/006gHug0ly1fxjhye6sonj30nl0ehglt.jpg)## Mac平台- [GitHub](https://github.com/Cenmrev/V2RayX/releases)下载- 我是通过Homebrew-Cask直接安装 brew cask install v2rayx ` 配置(我这里导入链接突然不起作用) 将自己的节点信息输入进去并保存,切换服务器,Load Core即可使用. Linux平台配置较为复杂以及使用率较低，就不再赘述。]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>V2Ray</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker Tutorial]]></title>
    <url>%2F2018%2F12%2F22%2FDocker-Tutorial%2F</url>
    <content type="text"><![CDATA[Docker TutorialAuthor: JacksonLeon Description 此文用来记录平时使用Git遇到的问题与心得. 本文长期更新. 安装Docker注册Docker ID下载文件 查看是否安装成功 123456$ docker version# or$ docker info# 运行hello-world# 本地没有image文件会先从library拉取$ docker container run hello-world 123456789101112131415161718192021# resultHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the "hello-world" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/ 使用技巧image Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。 image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。 12345678# 列出本机的所有 image 文件。$ docker image ls# 删除 image 文件$ docker image rm [imageName]# 从libaray拉取image$ docker image pull library/hello-world# 或者$ docker image pull hello-world 容器 image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。 12345678910# 列出本机正在运行的容器$ docker container ls# 列出本机所有容器，包括终止运行的容器$ docker container ls --all# 删除容器$ docker container rm [containerID]# 安装运行 Ubuntu 的 image$ docker container run -it ubuntu bash# 终止容器,强行立即终止$ docker container kill [containID] 其他1234# 启动已经生成、已经停止运行的容器文件。# docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。$ docker container start [containerID]$ docker container stop [containerID] 12# 查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。$ docker container logs [containerID] 12# 进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。$ docker container exec -it [containerID] /bin/bash 12# 从正在运行的 Docker 容器里面，将文件拷贝到本机。$ docker container cp [containID]:[/path/to/file] .]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Macintosh Note]]></title>
    <url>%2F2018%2F12%2F21%2FMacintosh-Note%2F</url>
    <content type="text"><![CDATA[Macintosh NoteAuthor: JacksonLeon Description 此文用来记录平时使用Mac遇到的问题与心得. 本文长期更新. 系统快捷键123456789# 查看当前文件路径option+command+c = alt+win+c# 截图## 保存截图文件command+shift+3 #全屏command+shift+4 #自由## 不保存截图文件control+command+shift+3 #全屏control+command+shift+4 #自由 必备软件 Google Chrome QQ VS Code iTerm 2 TickTick V2RayX LastPass Typora IntelliJ IDEA WeChat XMind Zen The Unarchiver Tuxera NTFS for Mac Sequel Pro iStat Menus CleanMyMac X iTerm 2安装配置详细设置请看这篇文章 安装Homebrew ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)” 首先下载 iTerm 2 安装oh-my-zsh curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh 安装Powerline 使用agnoster主题 下载agnoster主题 到下载的工程里面运行install文件,主题将安装到~/.oh-my-zsh/themes目录下 设置该主题 进入~/.zshrc打开.zshrc文件，然后将ZSH_THEME后面的字段改为agnoster。ZSH_THEME=&quot;agnoster&quot;（agnoster即为要设置的主题） 增加代码高亮效果 cd到.zshrc所在目录 下载工程文件 git clone git://github.com/zsh-users/zsh-syntax-highlighting.git 打开.zshrc文件，在最后添加下面内容 source /.../zsh-syntax-highlighting/zsh-syntax-highlighting.zsh cd ~/.oh-my-zsh/custom/plugins 再次打开.zshrc文件，在最后面添加下面内容 plugins=(zsh-syntax-highlighting) 其他 默认使用zsh: chsh -s /bin/zsh 取消显示计算机名 在~/.oh-my-zsh/themes路径下找到agnoster.zsh-theme文件，将里面的build_prompt下的prompt_context字段在注释掉即可。 跳板机互传文件 由于使用跳板机，所以这里需要使用lrzsz 注意lrzsz与expect连接方式不能共存，容易出现假死 如果需要免输入密码登录，建议使用sshpass方式进行连接远程服务器 安装lrzsz brew install lrzsz 配置lrzsz 在/usr/local/bin 目录下创建两个文件iterm2-recv-zmodem.sh， iterm2-send-zmodem.sh iterm2-recv-zmodem.sh 12345678910111213141516171819202122232425262728#!/bin/bash# Author: Matt Mastracci (matthew@mastracci.com)# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script# licensed under cc-wiki with attribution required # Remainder of script public domainosascript -e 'tell application "iTerm2" to version' &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTermif [[ $NAME = "iTerm" ]]; then FILE=`osascript -e 'tell application "iTerm" to activate' -e 'tell application "iTerm" to set thefile to choose folder with prompt "Choose a folder to place received files in"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"`else FILE=`osascript -e 'tell application "iTerm2" to activate' -e 'tell application "iTerm2" to set thefile to choose folder with prompt "Choose a folder to place received files in"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"`fiif [[ $FILE = "" ]]; then echo Cancelled. # Send ZModem cancel echo -e \\x18\\x18\\x18\\x18\\x18 sleep 1 echo echo \# Cancelled transferelse cd "$FILE" /usr/local/bin/rz -E -e -b sleep 1 echo echo echo \# Sent \-\&gt; $FILEfi iterm2-send-zmodem.sh 12345678910111213141516171819202122232425#!/bin/bash# Author: Matt Mastracci (matthew@mastracci.com)# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script# licensed under cc-wiki with attribution required # Remainder of script public domainosascript -e 'tell application "iTerm2" to version' &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTermif [[ $NAME = "iTerm" ]]; then FILE=`osascript -e 'tell application "iTerm" to activate' -e 'tell application "iTerm" to set thefile to choose file with prompt "Choose a file to send"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"`else FILE=`osascript -e 'tell application "iTerm2" to activate' -e 'tell application "iTerm2" to set thefile to choose file with prompt "Choose a file to send"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"`fiif [[ $FILE = "" ]]; then echo Cancelled. # Send ZModem cancel echo -e \\x18\\x18\\x18\\x18\\x18 sleep 1 echo echo \# Cancelled transferelse /usr/local/bin/sz "$FILE" -e -b sleep 1 echo echo \# Received $FILEfi 将文件写好后保存好，使用如下命令添加权限 chmod a+x iterm2-* 配置iTerm2 点击 iTerm2 的设置界面 Perference-&gt; Profiles -&gt; Default -&gt; Advanced -&gt; Triggers 的 Edit 按钮 1234567Regular expression: rz waiting to receive.\*\*B0100Action: Run Silent CoprocessParameters: /usr/local/bin/iterm2-send-zmodem.shRegular expression: \*\*B00000000000000Action: Run Silent CoprocessParameters: /usr/local/bin/iterm2-recv-zmodem.sh Typora偏好设置截图 「注」iPic需要在App Store中提前下载好。 快捷键12345678910111213141516171819标题：#最大标题：command + 1 或者：#大标题：command + 2 或者：##标准标题：command + 3 或者：###中标题：command + 4 或者：####小标题：command + 5 或者：#####插入表格：command + T插入代码：command + Alt +c 行间公式 command + Alt + b段落：command + 0竖线: command + Alt +q有序列表（1. 2.）: 输入数字+“.”之后输入空格 或者：command + Alt + o 黑点标记: command + Alt + u 隔离线: shift + command + -超链接：command + Alt + l插入链接：command +k下划线：command +u 加粗：command +b搜索：command +f V2RayX GitHub下载 通过Homebrew-Cask直接安装 brew cask install v2rayx 配置 将自己的节点信息输入进去并保存,切换服务器,Load Core即可使用. Sequel Pro配置自带格式化工具123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156# check for empty STDINSQL=$(cat)if [ -z "$SQL" ]; then echo "No SQL statements passed." exit $SP_BUNDLE_EXIT_SHOW_AS_TEXT_TOOLTIPfi# check if connected to the internet and if server is upconnected=$(/sbin/ping -t 8 -c 1 -on www.dpriver.com 2&gt; /dev/null | grep '69\.5\.11\.169' | wc -l)if [ $connected -eq "0" ]; then echo "&lt;font color=red&gt;You are probably not connected to the internet or http://www.dpriver.com/ server is down.&lt;/font&gt;" exit $SP_BUNDLE_EXIT_SHOW_AS_HTML_TOOLTIPfi# show info alert about sending the SQL statements to an online serviceif [ ! -e infoShowed ]; then touch infoShowed osascript -e 'tell app "Sequel Pro" to display dialog "This command will send the SQL statement(s) - unencrypted - to an online service (http://www.dpriver.com). Please consider this before sending confidential data!\n\nThis message will only be displayed once." with icon caution' 2&gt; 1 if [ `cat 1 | wc -c` -ne 0 ]; then rm -f 1 exit $SP_BUNDLE_EXIT_NONE fi rm -f 1fi# send SQL to www.dpriver.com and replace the formatted SQL string in first responder; if a parser error occurred# show error message and try to jump to the errorcat &lt;&lt;HTML&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;&lt;html&gt;&lt;head&gt; &lt;base href="http://www.dpriver.com/pp/"&gt; &lt;title&gt;Connecting www.dpriver.com&lt;/title&gt; &lt;script&gt; function lookForResult() &#123; if(document.all.outputsql.value.length &gt; 8) &#123; if(document.all.errorhint.style.display == "inline") &#123; var errormes = document.all.outputsql.value; var re = /.*?\(\d+\s*,\s*(\d+)\).*/; re.exec(errormes); var pos = parseInt(RegExp.\$1) - 1; re = /.*?(\d+).*/; re.exec('$SP_SELECTED_TEXT_RANGE'); var offset = parseInt(RegExp.\$1); pos = pos + offset; alert(document.all.outputsql.value); window.system.setSelectedTextRange(pos+''); &#125; else &#123; var txt = document.all.outputsql.value; var len = txt.length; window.system.setSelectedTextRange('$SP_SELECTED_TEXT_RANGE'); window.system.insertText(txt.slice(0,len-2)); &#125; window.system.closeHTMLOutputWindow(); &#125; else &#123; setTimeout("lookForResult()",50); &#125; &#125; function waitForResult() &#123; window.system.suppressExceptionAlert(); setTimeout("lookForResult()",50); &#125; &lt;/script&gt; &lt;script language="JavaScript" type="text/javascript" src="pp.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body onload='window.resizeTo(300,200);SQLFMT.format(document.all.sp_submit);waitForResult()'&gt;&lt;div id="retvalues"&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;Copyright &amp;copy; 2001-2010 Gudu Software&lt;br&gt;All Rights Reserved&lt;br&gt;&lt;a href="mailto:support@dpriver.com"&gt;Contact US&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p align=right&gt;Please wait…&lt;/p&gt;&lt;div class="page-container-1" style="display:none;"&gt; &lt;div id="container"&gt; &lt;div id="wrapper"&gt; &lt;div id="content"&gt; &lt;form id="SqlFmtForm" name="frm_sqlformat" method="post" action="/cgi-bin/ppserver" onsubmit="return false;"&gt; &lt;div id="secondpanel"&gt; &lt;div id="sp_database"&gt; &lt;label class="desc" style="display:inline;"&gt;Database&lt;/label&gt; &lt;select name="dbvendor"&gt; &lt;option value="mysql" selected&gt;MySQL&lt;/option&gt; &lt;/select&gt; &lt;label class="desc" style="display:inline;padding:0 0 0px 40px; border:0px solid;"&gt;Output:&lt;/label&gt; &lt;select name="outputfmt"&gt; &lt;option value="SQL" selected&gt;SQL(Text)&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="sqlpanel"&gt; &lt;div id="sp_inputsql"&gt; &lt;textarea id ="inputsql" name="inputsql" cols="1" rows="1" wrap="off"&gt; $SQL &lt;/textarea&gt; &lt;/div&gt; &lt;div id="sp_submit"&gt; &lt;input type="button" id="btnformat" name="print" value="Format SQL" onclick="SQLFMT.format(this)" value="Format SQL"&gt; &lt;label style="display:none;"&gt;(Time used: &lt;span id="timestamp"&gt;0&lt;/span&gt; seconds)&lt;/label&gt; &lt;/div&gt; &lt;div id="sp_submit" style="text-align:left;"&gt; &lt;/div&gt; &lt;label id="errorhint" class="desc" style="color:#DF0000 !important;display:none;"&gt; Can't format input sql, make sure there is no syntax error and select correct database. &lt;a href="" style="display:none;"&gt;OR Report a bug of this sql beautifier&lt;/a&gt; &lt;/label&gt; &lt;iframe id="ioutputsql" &gt;&lt;/iframe&gt; &lt;div id="sp_outputsql" style="display:none;"&gt; &lt;textarea id = "outputsql" name="outputsql" cols="80" rows="15" wrap="off" &gt; &lt;/textarea&gt; &lt;/div&gt; &lt;div id="sp_errormsg" style="display:none;"&gt; Error message goes to here! &lt;/div&gt; &lt;/div&gt; &lt;div id="formatoptions"&gt; &lt;select name="keywordcs"&gt; &lt;option value="Uppercase" selected &gt;Uppercase&lt;/option&gt; &lt;option value="Lowercase" &gt;Lowercase&lt;/option&gt; &lt;option value="InitCap" &gt;InitCap&lt;/option&gt; &lt;option value="Unchanged" &gt;Unchanged&lt;/option&gt; &lt;/select&gt; &lt;select name="identifiercs"&gt; &lt;option value="Uppercase" &gt;Uppercase&lt;/option&gt; &lt;option value="Lowercase" selected &gt;Lowercase&lt;/option&gt; &lt;option value="InitCap" &gt;InitCap&lt;/option&gt; &lt;option value="Unchanged" &gt;Unchanged&lt;/option&gt; &lt;option value="initcapeachword" &gt;Init cap each word&lt;/option&gt; &lt;/select&gt; &lt;select name="functioncs"&gt; &lt;option value="Uppercase" &gt;Uppercase&lt;/option&gt; &lt;option value="Lowercase" &gt;Lowercase&lt;/option&gt; &lt;option value="InitCap" selected &gt;InitCap&lt;/option&gt; &lt;option value="Unchanged" &gt;Unchanged&lt;/option&gt; &lt;/select&gt; &lt;input type="radio" name="lnbrwithcomma" value="after" checked &gt; After &lt;input type="radio" name="lnbrwithcomma" value="before" &gt; Before &lt;input type="radio" name="lnbrwithcomma" value= "beforewithspace" &gt; Before with space &lt;input type="radio" name="liststyle" value="stack" checked&gt;Stacked &lt;input type="radio" name="liststyle" value="nostack"&gt;Not Stacked &lt;input type="radio" name="salign" value="sleft" checked&gt; Align left &lt;input type="radio" name="salign" value="sright" &gt; Align right &lt;input type="checkbox" name="andorunderwhere" value="yes" checked&gt; And/Or under Where &lt;input type="checkbox" name="removelnbr" value="no" checked&gt; Remove Linebreak before beautify &lt;input type="checkbox" name="trimquotechar" value="yes"&gt; Trim Quoted Char of Each Line quoted char of eachline: &lt;input type="text" name="quotechar" value= "&amp;#34" size = 5 &gt; &lt;input type="checkbox" name="compactmode" value="yes"&gt; Compact the output of sql output &lt;input type="text" name="maxlenincm" value= "80" size = 5 &gt; &lt;/div&gt; &lt;input type="hidden" name="clientid" value="dpriver-9094-8133-2031" /&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;HTML 调整Launchpad图标大小123456# 调整每一列显示图标数量defaults write com.apple.dock springboard-rows -int 7# 调整每一行显示图标数量defaults write com.apple.dock springboard-columns -int 12# 由于修改了每一页显示图标数量，需要重启Launchpaddefaults write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock VS CodeVS Code的相关内容已在另外一篇文章中进行演绎,就不在此赘述了]]></content>
      <categories>
        <category>Macintosh</category>
      </categories>
      <tags>
        <tag>Macintosh</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven Tutorial]]></title>
    <url>%2F2018%2F12%2F20%2FMaven-Tutorial%2F</url>
    <content type="text"><![CDATA[Maven TutorialAuthor: JacksonLeon Description Maven是一个非常有用的依赖管理工具，Maven一个很重要的作用是用来管理Jar包的. 通过maven工程可以直接从maven仓库下载需要的jar包到本地，不用再需要从外部添加，maven仓库可以是网上的镜像地址，也可以是公司内部的仓库； 通过maven可以实现对java 工程的同意管理和规范化使用； 本文主要介绍Maven的配置过程. 安装配置下载Maven官网下载Maven后, 解压到文件夹,路径名之后配置环境变量需要用到. 配置环境变量在环境变量中新建M2_HOME系统变量,路径为D:\Program Files\apache-maven-3.6.0,就是你解压的文件夹的位置. 在path系统变量中添加一个,路径为%M2_HOME%\bin, 保存后进入命令行输入mvn -version查看是否配置成功. 123456C:\Users\PmbJa&gt;mvn -versionApache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)Maven home: D:\Program Files\apache-maven-3.6.0\bin\..Java version: 1.8.0_191, vendor: Oracle Corporation, runtime: D:\Program Files\Java\jdk1.8.0_191\jreDefault locale: en_US, platform encoding: GBKOS name: "windows 10", version: "10.0", arch: "amd64", family: "windows" Maven文件夹配置进入%M2_HOME%\bin\conf文件夹下,编辑settings.xml文件,将localRepository设置为自己的M2仓库位置. 1234567 &lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; --&gt;&lt;localRepository&gt;\path\M2\Repository&lt;/localRepository&gt; 另外也可以设置镜像 123456789101112&lt;!-- mirrors | This is a list of mirrors to be used in downloading artifacts from remote repositories. | | It works like this: a POM may declare a repository to use in resolving certain artifacts. | However, this repository may have problems with heavy traffic at times, so people have mirrored | it to several places. | | That repository definition will have a unique id, so we can create a mirror reference for that | repository, to be used as an alternate download site. The mirror site will be the preferred | server for that repository. |--&gt;&lt;mirrors&gt; 配置IntelliJ IDEA集成Maven打开IntelliJ IDEA-&gt;File-&gt;Setting,搜索Maven,在下图的位置修改成上一步修改的xml文件,下面的Local repository会自动修改. Maven for Hello World 右键Projects-&gt;New-&gt;Module 选择Maven,直接下一步 设置Group,ArtifactId Finish 点击Enable Auto-Import,等待下载 项目结构 选择Project Structure 选择Modules-&gt;Web 双击Web Resource Directory,选择scr/main目录,在后面加上webapp 设置Web的描述文件的位置 设置ArtifactId 未完待续]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode Note]]></title>
    <url>%2F2018%2F12%2F16%2FVSCode%2F</url>
    <content type="text"><![CDATA[VSCode NoteAuthor: JacksonLeon Description VSCode. 此文用来记录VSCode 使用技巧. 本文长期更新. USER SETTINGSWindows123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&#123; "workbench.startupEditor": "newUntitledFile", "editor.minimap.enabled": false, "terminal.external.windowsExec": "C:\\Program Files\\Git\\bin\\bash.exe", "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe", "workbench.colorTheme": "One Dark Pro", "workbench.iconTheme": "vscode-icons", "diffEditor.ignoreTrimWhitespace": false, "workbench.sideBar.location": "left", "editor.wordWrap": "on", "latex-workshop.latex.tools": [ &#123; "name": "latexmk", "command": "latexmk", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "-pdf", "%DOC%" ] &#125;, &#123; "name": "xelatex", "command": "xelatex", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "%DOC%" ] &#125;, &#123; "name": "pdflatex", "command": "pdflatex", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "%DOC%" ] &#125;, &#123; "name": "bibtex", "command": "bibtex", "args": [ "%DOCFILE%" ] &#125; ], "latex-workshop.latex.recipes": [ &#123; "name": "xelatex", "tools": [ "xelatex" ] &#125;, &#123; "name": "latexmk", "tools": [ "latexmk" ] &#125;, &#123; "name": "pdflatex -&gt; bibtex -&gt; pdflatex*2", "tools": [ "pdflatex", "bibtex", "pdflatex", "pdflatex" ] &#125; ], "latex-workshop.latex.clean.enabled": true, "latex-workshop.latex.clean.fileTypes": [ "*.aux", "*.bbl", "*.blg", "*.idx", "*.ind", "*.lof", "*.lot", "*.out", "*.toc", "*.acn", "*.acr", "*.alg", "*.glg", "*.glo", "*.gls", "*.ist", "*.fls", "*.log", "*.fdb_latexmk", "*.gz" ], "latex-workshop.view.pdf.viewer": "external", "latex-workshop.view.pdf.external.command": &#123; "command": "C:/Program Files/SumatraPDF/SumatraPDF.exe", "args": [ "%PDF%" ] &#125;, "latex-workshop.view.pdf.external.synctex": &#123; "command": "SumatraPDF.exe", "args": [ "-forward-search", "%TEX%", "%LINE%", "%PDF%" ] &#125;,&#125; MacOS123456789101112&#123; "workbench.startupEditor": "newUntitledFile", "editor.minimap.enabled": false, "workbench.colorTheme": "One Dark Pro", "workbench.iconTheme": "vscode-icons", "diffEditor.ignoreTrimWhitespace": false, "workbench.sideBar.location": "left", "editor.wordWrap": "on", "editor.fontSize": 16, "terminal.integrated.fontFamily": "Source Code Pro for Powerline", "terminal.integrated.fontSize": 14&#125; EXTENSIONS One Dark Pro vscode-icons ESLint GitLens LaTeX Workshop Insert Date String Windows:ctrl+shift+I MacOScommand+shift+I]]></content>
      <categories>
        <category>Note</category>
        <category>Application</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Application</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Latex with vsode]]></title>
    <url>%2F2018%2F12%2F15%2FLatex-with-vsode%2F</url>
    <content type="text"><![CDATA[Latex with VS CodeAuthor: JacksonLeon Description Latex tutorial. 此文用来记录使用Latex遇到的问题与心得. 本文长期更新. VS Code Settings123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&#123; "latex-workshop.latex.tools": [ &#123; "name": "latexmk", "command": "latexmk", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "-pdf", "%DOC%" ] &#125;, &#123; "name": "xelatex", "command": "xelatex", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "%DOC%" ] &#125;, &#123; "name": "pdflatex", "command": "pdflatex", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "%DOC%" ] &#125;, &#123; "name": "bibtex", "command": "bibtex", "args": [ "%DOCFILE%" ] &#125; ], "latex-workshop.latex.recipes": [ &#123; "name": "xelatex", "tools": [ "xelatex" ] &#125;, &#123; "name": "latexmk", "tools": [ "latexmk" ] &#125;, &#123; "name": "pdflatex -&gt; bibtex -&gt; pdflatex*2", "tools": [ "pdflatex", "bibtex", "pdflatex", "pdflatex" ] &#125; ], "latex-workshop.latex.clean.enabled": true, "latex-workshop.latex.clean.fileTypes": [ "*.aux", "*.bbl", "*.blg", "*.idx", "*.ind", "*.lof", "*.lot", "*.out", "*.toc", "*.acn", "*.acr", "*.alg", "*.glg", "*.glo", "*.gls", "*.ist", "*.fls", "*.log", "*.fdb_latexmk", "*.gz" ], "latex-workshop.view.pdf.viewer": "external", "latex-workshop.view.pdf.external.command": &#123; "command": "C:/Program Files/SumatraPDF/SumatraPDF.exe", "args": [ "%PDF%" ] &#125;, "latex-workshop.view.pdf.external.synctex": &#123; "command": "SumatraPDF.exe", "args": [ "-forward-search", "%TEX%", "%LINE%", "%PDF%" ] &#125;,&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux Note]]></title>
    <url>%2F2018%2F12%2F13%2FLinux-Note%2F</url>
    <content type="text"><![CDATA[Linux NoteAuthor: JacksonLeon Description 此文用来记录平时使用Linux遇到的问题与心得. 本文长期更新. Linux 命令 sudo 12# 为某条命令指定用户sudo -Hu user-name commond Linux 配置 Java 1234567891011# 查看JDK路径whereis javawhich java （java执行路径）echo $JAVA_HOMEecho $PATH# 配置JDK环境变量vim /etc/profileexport JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.91.x86_64export JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib Linux 发行版 Ubuntu Mint Manjaro Elementary 其他问题 双系统切换后时间不一致 原因 Windows和Ubuntu在默认情况下看待硬件时间（主板上的BOIS显示的时间）的方式不一样 Windows把系统硬件时间当作本地时间（Local time），即操作系统中显示的时间跟BIOS中显示的时间是一样的. Linux/Unix/Mac把硬件时间当作UTC（Universal Time Coordinated,协调世界时），操作系统中显示的时间是硬件时间经过换算得来. 解决方案 1234567# 更改Windows# 如果要让Windows把硬件时间当作UTC# 在CMD窗口（快捷键Win+R，输入cmd，回车）中输入如下命令，可以快速编辑注册表Reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1# 或者直接编辑注册表，打开注册表编辑器（快捷键Win+R，输入regedit，回车），并找到一下目录位置# 添加一项类型为REG_DWORD的键值，命名为RealTimeIsUniversal，值为1，重启后时间即回复正常HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/TimeZoneInformation/]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WebHook Based on Git(Using PHP)]]></title>
    <url>%2F2018%2F12%2F12%2Fwebhook-based-on-Git-PHP%2F</url>
    <content type="text"><![CDATA[WebHook Based on Git(Using PHP)Author: JacksonLeon Description 使用Webhook实现远程服务器自动拉取更新内容 生成公钥 Git用户公钥 123ssh-keygen -t rsa -C "test@test.com"# 然后一直回车就行# 生成的文件通常是 /root/.ssh/id_rsa，如果非root用户请查看提示上的路径 单独的服务器用户公钥 12345sudo -Hu www ssh-keygen -t rsa # 服务器运行PHP的用户为www,所以Hooks文件中涉及到权限的地方都需要声明为该用户# 所以也就需要在Remote中加入该用户对应的公钥# 意思是为www用户生成公钥# 也是一直回车,中间会提示密钥存储位置 接下来将这两个公钥加入账户中,获取对仓库的权限 Hook文件创建和修改目录权限：1234# 创建目录mkdir /mnt/wwwroot/xxxx# 修改目录权限chown -R www:www /mnt/wwwroot/xxxx 用www用户创建Hook文件,声明权限1sudo -Hu www touch /data/wwwroot/xxxx/webhook.php 创建log文件夹sudo -Hu www mkdir log Hook文件内容123456789101112131415161718192021222324252627&lt;?php//git webhook 自动部署脚本//项目存放物理路径$path = "/mnt/wwwroot/www.xxxx.com";$requestBody = file_get_contents("php://input");$content = json_decode($requestBody, true);//if(empty($content))&#123;// die("sent fail");//&#125;//若是主分支且提交数大于0if ($content['ref']=='refs/heads/master' &amp;&amp; $content['total_commits_count']&gt;0) &#123; //$res = shell_exec("cd &#123;$path&#125; &amp;&amp; git fetch --all &amp;&amp; git reset --hard origin/master "); //$res = shell_exec("cd &#123;$path&#125; &amp;&amp; git add . &amp;&amp; git commit -m 'commit by svn' &amp;&amp; git pull &amp;&amp; git push 2&gt;&amp;1"); $res = shell_exec("cd &#123;$path&#125; &amp;&amp; git pull origin master "); $res_log = '-------------------------'.PHP_EOL; $res_log .= $content['user_name'] . ' 在' . date('Y-m-d H:i:s') . '向' . $content['repository']['name'] . '项目的' . $content['ref'] . '分支push了' . $content['total_commits_count'] . '个commit：' . PHP_EOL; $res_log .= $res.PHP_EOL; file_put_contents("&#123;$path&#125;/log/".date('Y-m',time()).".txt", $res_log, FILE_APPEND);&#125;?&gt; 确保你的hook文件可以访问,例如https://test.com/hook.php ,Hook文件准备完成. 配置Remote和服务器仓库 配置公钥,将之前生成的公钥文件加入到Remote仓库的SSH公钥选项中 服务器仓库 12sudo -Hu www clone git@repo_address/gittest.git /自定义文件夹# 意思是以www用户的身份clone仓库,权限属于www用户 添加WebHooks规则 在每个仓库的设置中进行设置 可以选择推送事件/标签推送事件/评论/缺陷事件/合并请求/构建事件 链接中填写外网访问服务器Hook文件的地址, 点击增加WEBHOOKS即可. 测试在本地仓库中: 1234vim test.txtgit add .git commit -m "test hook"git push 在服务器端: 12# 查看更改是否拉取到服务器vim test.txt]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TortoiseGit on windows tutorial]]></title>
    <url>%2F2018%2F12%2F10%2FTortoiseGit-on-windows-tutorial%2F</url>
    <content type="text"><![CDATA[Tutorial of TortoiseGit on WindowsAuthor: JacksonLeon Description Tutorial of TortoiseGit on Windows. TortoiseGit is a Git) revision control client, implemented as a Windows shell extension and based on TortoiseSVN. It is free software released under the GNU General Public License. In Windows Explorer, besides showing context menu items for Git commands, TortoiseGit provides icon overlays that indicate the status of Git working trees and files. It also comes with the TortoiseGitMerge utility to visually compare two files and resolve conflicts. 安装 TortoiseGit 需要下载Git 以及TortoiseGit TortoiseGit 官网自带中文语言包(64位) 安装比较简单,一路Next,只需要注意下面几点: 开始安装一路Next 配置软件 勾选Run first start wizard 设置本地Git路径 设置用户名与邮箱地址 选择OpenSSh作为SSH软件工具(默认的会出现不知名错误) 在相同的页面选择Generate PuTTY key pair 点击生成,鼠标需要在空白处移动,不然进度会非常慢 把生成的密钥内容粘贴进git库中的SSH 密钥的位置(设置-SSH 公钥)并保存到本地 打开Pageant(TortoiseGit文件夹下),点击Add,将刚刚生成的文件添加进去 开始使用Clone到本地 工程文件夹下选择Git Clone,将Remote工程文件夹拉取到本地 URL中填写项目地址(SSH),Directory中填写工程所在位置,点击OK即可拉取到本地(与SVN操作大致相同) 将本地更新推送到远程 选择Git Commit… 输入Message后点击Commit 接着点击Push并勾选合适的参数推送到远程客户端 Push完成,一次本地更新结束,其他操作类似 其他功能 TortoiseGitDiff TortoiseGit选项]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Tortoise</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Note]]></title>
    <url>%2F2018%2F12%2F07%2FJava-Note%2F</url>
    <content type="text"><![CDATA[Java NoteAuthor: JacksonLeon Description 此文用来记录平时使用Java遇到的问题与心得. 本文长期更新. Java常用函数String indexOf() charAt() Unix 时间戳与标准时间互转1234567891011121314151617/** * Java将Unix时间戳转换成指定格式日期字符串 * @param timestampString 时间戳 如："1473048265"; * @param formats 要格式化的格式 默认："yyyy-MM-dd HH:mm:ss"; * * @return 返回结果 如："2016-09-05 16:06:42"; */// importedimport java.text.SimpleDateFormat;import java.util.Locale;import java.util.Date;public static String TimeStamp2Date(String timestampString, String formats)&#123; Long timestamp = Long.parseLong(timestampString); String _date = new SimpleDateFormat(formats, Locale.CHINA).format(new Date(timestamp)); return _date;&#125; 调用方法 TimeStamp2Date(&quot;1473048265&quot;, &quot;yyyy-MM-dd HH:mm:ss”); 1234567891011121314151617/** * 日期格式字符串转换成时间戳 * * @param dateStr 字符串日期 * @param format 如：yyyy-MM-dd HH:mm:ss * * @return */public static String Date2TimeStamp(String dateStr, String format) &#123; try &#123; SimpleDateFormat sdf = new SimpleDateFormat(format); return String.valueOf(sdf.parse(dateStr).getTime() / 1000); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return "";&#125;]]></content>
      <categories>
        <category>Note</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Coding Life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL Note]]></title>
    <url>%2F2018%2F12%2F07%2FMySQL-Note%2F</url>
    <content type="text"><![CDATA[MySQL NoteAuthor: JacksonLeon Description 此文用来记录平时使用MySQL遇到的问题与心得. 本文长期更新. MySQL常用命令 为用户修改密码 1SET PASSWORD FOR &apos;Username&apos;@&apos;Host&apos; = PASSWORD(&apos;password&apos;); 创建用户 123CREATE USER Username IDENTIFIED BY &apos;password&apos;;GRANT SELECT, INSERT, UPDATE, DELETE, EXECUTE ON snatch.* TO &apos;Username&apos;@&apos;%&apos; identified by &apos;password&apos;;FLUSH PRIVILEGES; 删除用户 1Delete FROM user Where User=&apos;user-name&apos; and Host=&apos;host&apos;; MySQL遇到的问题InnoDB引擎自增id中断问题 如果在插入的过程中出现了删除的操作,那么下一条数据的自增id将跳过这个id,从而出现自增id中断的问题. 如何检查: 123456# 如果两个数不一样,那么就说明中间出现了断层SELECT COUNT(*) FROM table_name;SELECT MAX(id) FROM table_name;# 显示断层的idSELECT id FROM (SELECT id FROM table_name ORDER BY id ASC) t WHERE NOT EXISTS (SELECT 1 FROM table_name WHERE id=t.id-1); 解决办法 不适用默认自增id,自己设定id 在每次插入之前都将AUTO_INCREMENT设置为11ALTER TABLE table_name AUTO_INCREMENT=1; 查询优化limit、between等语句12345# sql-1select * FROM table_name limit index1,index2-index1;# sql-2select * FROM table_nameWHERE id BETWEEN index1 AND index2 limit 100; 数据量比较大的话,sql-2的查询效率会比sql-1高很多,在数据量比较大的情况下一般使用between语句. 查询表头信息1SHOW COLUMNS FROM snatch.`jcy_prop`;]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Coding Life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hackintosh for Lenovo Ideapad 700 15isk]]></title>
    <url>%2F2018%2F12%2F06%2FHackintosh-for-Lenovo-Ideapad-700-15isk%2F</url>
    <content type="text"><![CDATA[Hacintash for Lenovo Ideapad 700 15iskAuthor: JacksonLeon Description 引言最近更换了固态硬盘，所以就有一个闲置了出来，然后就在京东上面买了一个M.2接口NGFF协议的固态硬盘盒，用来装Hackintosh. Windows 下制作MacOS安装盘准备工具 容量大于8G的U盘 etcher Lenovo Ideapad 700 15isk专用CLOVER文件 系统镜像：【黑果小兵】macOS Mojave 10.14.1 18B75 正式版 with Clover 4726原版镜像 制作安装镜像镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可 安装镜像的制作到这里就完成了,下一步,我们需要将电脑专用的EFI文件复制进刚制作好的USB磁盘的EFI分区里。 Windows下将专用的EFI文件复制到USB安装盘的EFI分区下以系统管理员身份打开cmd窗口,输入命令： 123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id=&quot;ebd0a0a2-b9e5-4433-87c0-68b6b72699c7&quot; # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad BIOS设置进入BIOS,默认开启了安全认证,UEFI引导需要关闭安全启动Secure Boot Mode方式,否则无法加载UEFI引导设备.并设置MacOS启动U盘为第一启动序列,保存并重新启动. MacOS安装第一阶段(以下为摘抄) 进入Clover主菜单 移动光标到Boot OS X Install from XiaoMiPro 10131回车 如果无法进入安装界面,需要打开啰嗦模式进行排错,具体的操作方法请参考Clover使用教程 。 开始引导MacOS系统 这个过程需要1-2分钟,耐心等待进入安装程序,出现语言选择界面 出现macOS实用工具界面,选择磁盘工具 磁盘工具选择显示所有设备:选择SSD Media,点击抹掉按钮,选择默认的Mac OS扩展(日志型),将名称修改为Macintosh HD,点击抹掉按钮 假设您的磁盘是空的且数据是已经备份过的,别怪我没提醒你!!! 抹盘成功后,它会自动生成一个200MB的EFI分区,这样做的好处是不会出现安装过程中的由于EFI分区尺寸小于200MB而引起的无法安装的错误.当然前提是你的磁盘中没有重要的数据,或者您的数据已经提前备份过了.到这里,磁盘工具的动作就已经结束了.退出磁盘工具进入安装界面,进行系统的安装了. 安装macOS进入安装界面选择继续点击同意,选择Macintosh HD 选择安装 期间,它会把USB安装盘上的安装文件预复制到要安装的系统分区里,这个过程在小米Pro的笔记本上它跑得飞快,数据复制完后,它会自动重启然后进行第二阶段的安装 第二阶段第二阶段的安装会有两种界面,一种是不进安装界面直接安装,另一种是先进入安装界面直接安装,需要注意的是,无论是哪一种界面下,安装的过程中全程是禁用鼠标和键盘的,需要你做的只是耐心等待它安装完成 安装速度取决于你的磁盘速度,第二阶段的安装已经与USB安装盘没什么关系了.macOS 10.13的安装完全区别于10.12,它不能免二次安装,甚至还需要重启多次,这些都是正常现象,请不要大惊小怪的. 系统安装完成后,重启进入系统设置向导 国家选择首先让你选择国家,这里我选择中国点击继续,设置键盘 设置键盘这里询问你是否传输信息到这台Mac 数据恢复可以从Mac或者Time Machine备份恢复 我选择现在不传输任何信息,点击继续 Apple ID登录选择是否使用您的Apple ID登录,如何想现在就登录到Apple ID,请输入Apple ID和密码登录,否则选择不登录,进入系统后也可以设置登录到iCloud,点击继续阅读条款与条件,选择同意继续出现创建电脑用户的窗口,输入用户名和密码,点击继续 创建电脑用户系统会创建初始用户用户创建成功后,弹出iCloud的正在设置用户的窗口紧接着弹出设置iClound钥匙串的设置窗口,选择稍候设置,点击继续 设置iCloud钥匙串出现快捷设置,点击继续 快捷设置自定义设置定位以及数据反馈,请根据自己的喜好进行设置 出现iCloud中的所有文件,如果你需要将文稿和桌面上的文件储存在 iCloud Drive中,请勾选,否则取消勾选,点击继续 iCloud文件同步设置出现FileVault磁盘加密,如果你需要打开 Filevault 磁盘加密,请勾选,否则取消勾选,点击继续 FileVault磁盘加密设置出现正在设置您的Mac,请稍候完成设置向导 设置向导完成 出现桌面后,整个的安装向导就完成了. 安装后的系统设置教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[macOS篇] 新的系统安装成功后，EFI还位于U盘里，总不能一直挂着U盘使用系统吧。这个时候如果你想将U盘里的EFI复制到磁盘的EFI分区里，却苦于找不到看不见EFI分区，这个时候是该让diskutil登场了。 diskutil命令的基本用法： 查看磁盘分区表1diskutil list /dev/disk0(internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 256 GB disk0 1: EFI EFI 200 MB disk0s1 2: Apple_HFS MAC 128 GB disk0s2 3: Microsoft Basic Data WIN10 127.7 GB disk0s3 /dev/disk1(internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 16 GB disk1 1: EFI EFI 200 MB disk1s1 2: Apple_HFS Install macOS Sierra 15.8 GB disk1s2 挂载磁盘EFI分区1sudo diskutil mount disk0s1 挂载U盘EFI分区1sudo diskutil mount disk1s1 打开Finder，注意后面有个. 1open . 左侧会显示挂载了两个EFI分区，将U盘EFI目录全部复制到磁盘的EFI分区即可。 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是合并的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 完成现在就可以拔掉U盘，尽情重启啦！ 后续工作 iMessage无法使用 更改苹果三码实现 没有在苹果设备上注册过的账号一定是不可用的 之后继续尝试其他方案 网卡、蓝牙无法使用 HIDPI提高分辨率]]></content>
      <categories>
        <category>Macintosh</category>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Blog Update Process]]></title>
    <url>%2F2018%2F08%2F03%2Fblog-update-processes%2F</url>
    <content type="text"><![CDATA[Hexo Blog Update ProcessAuthor: JacksonLeon Description This post is talking about the processes of updating the content of Blog. Steps Write posts anywhere use the Typora to edit the markdown files save files on the devices Upload it to remote repo through Git 123456# 添加文件$ git add --all# commit messages$ git commit -m "commit messages"# 推送更新到远程分支$ git push origin [branch] Sync the content from the remote repo on my Personal Computer 1$ git pull origin master Update the content on the blog 12345$ hexo clean$ hexo g# 本地测试$ hexo s$ ./deploy.sh]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」627. Swap Salary]]></title>
    <url>%2F2018%2F07%2F30%2F627-Swap-Salary%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 627. Swap SalaryDescriptionGiven a table salary, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table. For example: 123456| id | name | sex | salary ||----|------|-----|--------|| 1 | A | m | 2500 || 2 | B | f | 1500 || 3 | C | m | 5500 || 4 | D | f | 500 | After running your query, the above salary table should have the following rows: 123456| id | name | sex | salary ||----|------|-----|--------|| 1 | A | f | 2500 || 2 | B | m | 1500 || 3 | C | f | 5500 || 4 | D | m | 500 | Solution123# Write your MySQL query statement belowupdate salary set sex=IF(sex=&apos;f&apos;,&apos;m&apos;,&apos;f&apos;) ThinkingMySQL的东西忘得都差不多了，这些还是要定期复习一下的。话说这种判断式的语句真的非常好用啊！]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」876. Middle of the Linked List]]></title>
    <url>%2F2018%2F07%2F30%2F876-Middle-of-the-Linked-List%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 876. Middle of the Linked ListDescription Given a non-empty, singly linked list with head node head, return a middle node of linked list. If there are two middle nodes, return the second middle node. Examples one 12345Input: [1,2,3,4,5]Output: Node 3 from this list (Serialization: [3,4,5])The returned node has value 3. (The judge&apos;s serialization of this node is [3,4,5]).Note that we returned a ListNode object ans, such that:ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL. two 123Input: [1,2,3,4,5,6]Output: Node 4 from this list (Serialization: [4,5,6])Since the list has two middle nodes with values 3 and 4, we return the second one. Note: The number of nodes in the given list will be between 1 and 100. Solution123456789101112131415161718192021/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* middleNode(ListNode* head) &#123; ListNode *slow, *fast; slow=head;fast=head; while(fast!=NULL &amp;&amp; fast-&gt;next!=NULL) &#123; slow=slow-&gt;next; fast=fast-&gt;next-&gt;next; &#125; return slow; &#125;&#125;; Thinking其实是一个搜索的过程，正常逻辑就是遍历链表到头，获取一半的长度，截取后半部分就可以，但是由于是链表，搜索起来耗费时间空间。 可以把链表内容复制到数组，从而将目标找到。也可以设置两个指针: slow 、fast，fast移动速度为slow的两倍，那么当fast到达链表尾部时，slow此时在链表中部，返回slow指针就达到了我们的目的。]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」852. Peak Index in a Mountain Array]]></title>
    <url>%2F2018%2F07%2F30%2F852-Peak-Index-in-a-Mountain-Array%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 852. Peak Index in a Mountain ArrayDescription Let’s call an array A a mountain if the following properties hold: A.length &gt;= 3 There exists some 0 &lt; i &lt; A.length - 1 such that A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1] Given an array that is definitely a mountain, return any i such that A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]. Examples one 12Input: [0,1,0]Output: 1 two 12Input: [0,2,1,0]Output: 1 Note 3 &lt;= A.length &lt;= 10000 0 &lt;= A[i] &lt;= 10^6 A is a mountain, as defined above. Solution(C++)1234567891011class Solution &#123;public: int peakIndexInMountainArray(vector&lt;int&gt;&amp; A) &#123; for(int i=0;i&lt;A.size();i++) &#123; if(A[i]&gt;A[i+1]) return i; &#125; return 0; &#125;&#125;; Thinking直接根据Mountain Array的定义来确定i的位置，比较无脑的办法就是直接遍历数组。]]></content>
      <categories>
        <category>LeetCode</category>
        <category>String</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」617. Merge Two Binary Trees]]></title>
    <url>%2F2018%2F07%2F30%2F617-Merge-Two-Binary-Trees%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 617. Merge Two Binary TreesDescription Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree. Example1234567891011121314Input: Tree 1 Tree 2 1 2 / \ / \ 3 2 1 3 / \ \ 5 4 7 Output: Merged tree: 3 / \ 4 5 / \ \ 5 4 7 Note: The merging process must start from the root nodes of both trees. Solution C++ 12345678910111213141516171819202122/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) &#123; if(t1==NULL &amp;&amp; t2==NULL)return NULL; int tempValue=(t1==NULL?0:t1-&gt;val)+(t2==NULL?0:t2-&gt;val); TreeNode* res=new TreeNode(tempValue); res-&gt;left=mergeTrees((t1==NULL?NULL:t1-&gt;left),(t2==NULL?NULL:t2-&gt;left)); res-&gt;right=mergeTrees((t1==NULL?NULL:t1-&gt;right),(t2==NULL?NULL:t2-&gt;right)); return res; &#125;&#125;; Thinking使用递归遍历两个树，注意从头节点开始获取val]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Tree</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode Statistics]]></title>
    <url>%2F2018%2F07%2F30%2FLeetCode%2F</url>
    <content type="text"><![CDATA[LeetCode Statistics LeetCode ID Name Status Difficulty Language 191 Number of 1 Bits Solved E C/C++ 386 Lexicographical Numbers Solved M C/C++ 387 First Unique Character in a String Solved E C/C++ 461 Hamming Distance Solved E C/C++ 535 Encode and Decode TinyURL Solved M C/C++ 595 Big Countries Solved E C/C++ 617 Merge Two Binary Trees Solved E C/C++ 627 Swap Salary Solved E MySQL 654 Maximum Binary Tree Solved M C/C++ 657 Judge Route Circle Solved E C/C++ 709 To Lower Case Solved E C/C++ 771 Jewels and Stones Solved E C/C++ 804 Unique Morse Code Words Solved E C/C++ 807 Max Increase to Keep City Skyline Solved M C/C++ 832 Flipping an Image Solved E C/C++ 852 Peak Index in a Mountain Array Solved E C/C++ 876 Middle of the Linked List Solved E C/C++]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-NexT博客主题美化]]></title>
    <url>%2F2018%2F07%2F17%2FBeautify-Blog-With-Hexo%2F</url>
    <content type="text"><![CDATA[Hexo-NexT博客主题美化Author: JacksonLeon Description 默认的主题样式非常简单，但是在有些方面还有些缺陷，其实NexT主题中已经包含这些主题，我们只需要把他们启用就OK啦。 更新NexT主题12cd themes/nextgit pull 其中Blog文件夹下的_config.yml为站点配置文件，themes/next下的_config.yml为主题配置文件。 开启主页菜单打开主题配置文件，找到menu内容，将需要用到的菜单取消注释 123456789menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive # schedule: /schedule/ || calendar # sitemap: /sitemap.xml || sitemap # commonweal: /404/ || heartbeat 启用的菜单需要添加对应的页面1hexo new page "categories" 并在index.md文件中添加type: &quot;categories&quot; 添加Fork me on github在GitHub Ribbons或GitHub Corners选择一款你喜欢的挂饰，拷贝方框内的代码1&lt;a href="https://your-url" class="github-corner" aria-label="View source on Github"&gt;&lt;svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"&gt;&lt;path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"&gt;&lt;/path&gt;&lt;path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"&gt;&lt;/path&gt;&lt;path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt; 在/themes/next/layout/_layout.swig文件中，将上述代码放到&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下方。 RSS 安装插件 1npm install --save hexo-generator-feed 编辑站点配置文件，在文件末尾添加 1plugins: hexo-generate-feed 配置主题配置文件 1234# Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml //注意：有一个空格 修改底部标签样式修改\themes\next\layout\_macro\post.swig中文件，搜索rel=&quot;tag&quot;&gt;#，将#替换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;。 修改代码块自定义样式修改\themes\next\source\css\_custom\custom.styl123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 修改主题配置文件，搜索Social123456789101112# [社交平台名]: [社交地址] || [图标名称]social: GitHub: https://github.com/JacksonLeon || github E-Mail: mailto:pumbjackson@gmail.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」832. Flipping an Image]]></title>
    <url>%2F2018%2F07%2F15%2F832-Flipping-an-Image%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 832. Flipping an ImageDescription Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image.To flip an image horizontally means that each row of the image is reversed. For example, flipping [1, 1, 0] horizontally results in [0, 1, 1].To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] results in [1, 0, 0]. Examplesone1234Input: [[1,1,0],[1,0,1],[0,0,0]]Output: [[1,0,0],[0,1,0],[1,1,1]]Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]] two1234Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] Notes 1 &lt;= A.length = A[0].length &lt;= 20 0 &lt;= A[i][j] &lt;= 1 Solution1234567891011121314151617class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; flipAndInvertImage(vector&lt;vector&lt;int&gt;&gt;&amp; A) &#123; int size=A[0].size(); for(int i=0;i&lt;A.size();i++) &#123; //矩阵内顺序反转 reverse(A[i].begin(),A[i].end()); for(int j=0;j&lt;size;j++) &#123; //反转 A[i][j]=1-A[i][j]; &#125; &#125; return A; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」709. To Lower Case]]></title>
    <url>%2F2018%2F07%2F14%2F709.%20To-Lower-Case%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 709. To Lower CaseDescription Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase. C++ Solution1234567class Solution &#123;public: string toLowerCase(string str) &#123; transform(str.begin(),str.end(),str.begin(),::tolower); return str; &#125;&#125;; STL的algorithm库给我们提供了模板函数transform可以轻松解决这个问题. 函数原型 123456789template &lt; class InputIterator, class OutputIterator, class UnaryOperator &gt; OutputIterator transform ( InputIterator first1, InputIterator last1, OutputIterator result, UnaryOperator op ); template &lt; class InputIterator1, class InputIterator2, class OutputIterator, class BinaryOperator &gt; OutputIterator transform ( InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryOperator binary_op ); 测试代码 12345678910111213141516171819202122232425#include &lt;string&gt; #include &lt;algorithm&gt; using namespace std; int main() &#123; string strA = "pmbjackson@outlook.com"; string strB = "pumbjackson@gmail.com"; printf("Before transform:\n"); printf("strA:%s \n", strA.c_str()); printf("strB:%s \n\n", strB.c_str()); transform(strA.begin(), strA.end(), strA.begin(), ::toupper); transform(strB.begin(), strB.end(), strB.begin(), ::toupper); printf("After transform to toupper:\n"); printf("strA:%s \n", strA.c_str()); printf("strB:%s \n\n", strB.c_str()); transform(strA.begin(), strA.end(), strA.begin(), ::tolower); transform(strB.begin(), strB.end(), strB.begin(), ::tolower); printf("After transform to lower:\n"); printf("strA:%s \n", strA.c_str()); printf("strB:%s \n\n", strB.c_str()); return 0; &#125; 运行结果 12345678910strA:pmbjackson@outlook.com strB:pumbjackson@gmail.com After transform to toupper: strA:PMBJACKSON@OUTLOOK.COM strB:PUMBJACKSON@GMAIL.COM After transform to lower: strA:pmbjackson@outlook.com strB:pumbjackson@gmail.com Java Solution12345class Solution &#123; public String toLowerCase(String str) &#123; return str.toLowerCase(); &#125;&#125;]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django-blog]]></title>
    <url>%2F2018%2F06%2F21%2FDjango-blog%2F</url>
    <content type="text"><![CDATA[1pip install -r requirement.txt requirement.txt 12345678910111213141516171819bootstrap-admin dj-database-url dj-static Django django-markdown django-toolbelt Markdown markdown2 pip psycopg2 Pygments pygobject python-apt pytz setuptools ssh-import-id static3 virtualenv wheel 12345678910$ django-admin.py startproject my_blog$ python manage.py startapp articleINSTALLED_APPS = ( ... 'article', #这里填写的是app的名称)ALLOWED_HOSTS = ['*']$ python manage.py runserver 0.0.0.0:2210]]></content>
      <tags>
        <tag>Blog</tag>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Operating System Note]]></title>
    <url>%2F2018%2F05%2F22%2FOperating-System-Note%2F</url>
    <content type="text"><![CDATA[Operating System Note 页面置换算法 选择调出页面的算法就称为页面置换算法。好的页面置换算法应有较低的页面更换频率，也就是说，应将以后不会再访问或者以后较长时间内不会再访问的页面先调出。 常见的页面置换算法有：最佳置换算法、先进先出（FIFO）、最近最久未使用（LRU）、时钟（CLOCK）置换算法。 OPT 最佳置换算法所选择的被淘汰页面将是以后永不使用的，或者是在最长时间内不再被访问的页面,这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若千页面中哪个是未来最长时间内不再被访问的，因而该算法其实是无法实现。 虽然OPT算法是无法实现的，但是我们可以利用他对其他页面置换算法进行评价。]]></content>
      <tags>
        <tag>Note</tag>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Opencv Tutorial]]></title>
    <url>%2F2018%2F05%2F20%2FOpencv-Note%2F</url>
    <content type="text"><![CDATA[Opencv NoteAuthor: JacksonLeon Description 此文用来记录平时使用OpenCV遇到的问题与心得. 本文长期更新. 安装与配置安装 这里使用VS 2017与Opencv 3.4.1为例，其他版本基本相似 下载Opencv 双击运行，安装到磁盘（Opencv安装位置下面需要用到） 等解压完成就可以了 配置系统环境变量配置 （以Windows 10为例）我的电脑-&gt;右键-&gt;属性-&gt;高级系统设置-&gt;环境变量 系统变量中找到path选择编辑 新建，内容为%Opencv%\build\x64\vc15\bin，其中%Opencv%为Opencv安装路径 VS 2017配置 创建VS 2017项目，Visual C++ -&gt; Win32 -&gt; Win32控制台应用程序 附加选项中勾上空项目，点击完成 点击视图-&gt;其他窗口-&gt;属性管理器 在你需要进行编译的环境下右键选择添加新项目属性表 例如右键Debug | x64选择添加新项目属性表，名称为Debug_64.props，保存位置默认 在通用属性 -&gt; VC++目录 -&gt; 包含目录中分别添加 123%opencv%\build\include%opencv%\build\include\opencv%opencv%\build\include\opencv2 库目录中添加%opencv%\build\x64\vc15\lib 在通用属性 -&gt; 链接器 -&gt; 输入中添加opencv_world341d.lib Release环境下的属性配置与Debug类似，不同的是在通用属性 -&gt; 链接器 -&gt; 输入中添加的是opencv_world341.lib 以后若是创建新项目，可以直接在属性管理器中相应的编译环境下右键添加现有项目属性表，添加相应的属性表 测试123456789101112131415161718#include &lt;iostream&gt; #include &lt;opencv2/core/core.hpp&gt; #include &lt;opencv2/highgui/highgui.hpp&gt; using namespace cv;int main()&#123; // 读入一张图片（test） Mat img = imread("test.jpg"); // 创建一个名为 "test"窗口 namedWindow("test"); // 在窗口中显示test imshow("test", img); // 任意按键后窗口关闭 waitKey(0); return 0;&#125;]]></content>
      <categories>
        <category>Note</category>
        <category>Opencv</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MATLAB Note]]></title>
    <url>%2F2018%2F04%2F28%2FMatLab-Note%2F</url>
    <content type="text"><![CDATA[MATLAB NoteAuthor: JacksonLeon Description 此文用来记录平时使用MatLab遇到的问题与心得. 本文长期更新. 输出无白边图片123imshow(I,'border','tight','initialmagnification','fit');% 'border','tight'的组合功能意思是去掉图像周边空白% 'InitialMagnification','fit'组合的意思是图像填充整个figure窗口 平移、旋转、缩放、镜像 平移123456789101112131415161718192021init = imread('Fig3.tif'); % 读取图像[R, C] = size(init); % 获取图像大小res = zeros(R, C); % 构造结果矩阵。每个像素点默认初始化为0（黑色）delX = 50; % 平移量XdelY = 50; % 平移量Ytras = [1 0 delX; 0 1 delY; 0 0 1]; % 平移的变换矩阵 for i = 1 : R for j = 1 : C temp = [i; j; 1]; temp = tras * temp; % 矩阵乘法 x = temp(1, 1); y = temp(2, 1); % 变换后的位置判断是否越界 if (x &lt;= R) &amp; (y &lt;= C) &amp; (x &gt;= 1) &amp; (y &gt;= 1) res(x, y) = init(i, j); end endend;imshow(uint8(res)); % 显示图像 旋转123456789101112131415161718192021init = imread('Fig3.tif'); % 读取图像[R, C] = size(init); % 获取图像大小res = zeros( R, C); % 构造结果矩阵。每个像素点默认初始化为0（黑色）alfa = -15 * 3.1415926 / 180.0; % 旋转角度tras = [cos(alfa) -sin(alfa) 0; sin(alfa) cos(alfa) 0; 0 0 1]; % 旋转的变换矩阵for i = 1 : R for j = 1 : C temp = [i; j; 1]; temp = tras * temp;% 矩阵乘法 x = uint16(temp(1, 1)); y = uint16(temp(2, 1)); % 变换后的位置判断是否越界 if (x &lt;= R) &amp; (y &lt;= C) &amp; (x &gt;= 1) &amp; (y &gt;= 1) res(i, j) = init(x, y); end endend;imshow(uint8(res)); % 显示图像 缩放123456789101112131415161718192021init = imread('Fig3.tif'); % 读取图像[R, C] = size(init); % 获取图像大小timesX = 3; % X轴缩放量timesY = 3; % Y轴缩放量res = zeros(timesX * R, timesY * C); % 构造结果矩阵。每个像素点默认初始化为0（黑色）tras = [1/timesX 0 0; 0 1/timesY 0; 0 0 1]; % 缩放的变换矩阵 for i = 1 : timesX * R for j = 1 : timesY * C temp = [i; j; 1]; temp = tras * temp; % 矩阵乘法 x = uint8(temp(1, 1)); y = uint8(temp(2, 1)); % 变换后的位置判断是否越界 if (x &lt;= R) &amp; (y &lt;= C) &amp; (x &gt;= 1) &amp; (y &gt;= 1) res(i, j) = init(x, y); end endend;imshow(uint8(res)); % 显示图像 镜像（水平）12345678910111213init = imread('Fig3.tif');[R, C] = size(init);res = zeros(R, C);for i = 1 : R for j = 1 : C x = i; y = C - j + 1; res(x, y) = init(i, j); endendimshow(uint8(res)); Graythresh与im2bw函数 graythresh函数输入一副图像，输出就是阈值。在这个函数中，是使用最大类间方差法找到图片的一个合适的阈值（threshold）。再利用im2bw（将灰度图像转换为二值图像）函数，将找到的阈值输入，就可以把原图变为一个二值图。 12thresh = graythresh(image)img = im2bw(image, thresh)]]></content>
      <tags>
        <tag>Note</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我脑海中的NLP]]></title>
    <url>%2F2018%2F04%2F24%2FNLP-in-my-mind%2F</url>
    <content type="text"><![CDATA[中华文化博大精深，汉语更是其中的代表，近年来的NLP更是有了非常多的“用武之地”。例如，语义智能分析，当女朋友问你“爱不爱我”，有的时候是“我要包包”，有的时候是“我要口红”，有的时候就是单纯的想要你的肯定的回答，这个时候NLP就可以起到救命的作用^_^。 “沟通，是人最紧迫又最困难的事。除了生存，人解决孤独、恐惧等所有精神层面的问题，都要靠沟通。”这些年机器翻译、机器写新闻甚至是机器写诗都陆续出现，机器表现出的强大的能力背后是自然语言处理对于机器与人类之间沟通的作用。 想象一下，人类与机器沟通，甚至通过机器与自然界沟通，这是一个多么宏大的愿景啊！以前看过一部电影叫做《Her》，当初看这部电影主要是因为女神斯嘉丽·约翰逊给她配的音，但是看过之后反而被这部电影所描绘的世界给吸引住了。在《Her》的世界里，人类需要做什么直接告诉“Her”就行，孤单的时候“Her”可以是一个真正懂你的“完美情人”，而不仅仅是近年来只能订闹钟、打电话、查天气的Siri、Cortana、Google Assistant、小爱同学之流。 我认为未来的人工智能，必须是能够听懂及能够一定程度上满足人类需求的“工具”，那么这个“听懂”的前提很大一部分上依赖于现在的自然语言处理，也是未来人工智能的入口。]]></content>
      <tags>
        <tag>NLP</tag>
        <tag>Program-Think</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小说爬虫]]></title>
    <url>%2F2018%2F04%2F12%2FNovel-python%2F</url>
    <content type="text"><![CDATA[使用Python爬虫爬取网络小说 小说网址 https://www.uxiaoshuo.com/ 使用绝色妖娆：鬼医至尊为例（主要是女朋友想看^_^） 下面是程序代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#coding:utf-8import requestsimport threadingfrom bs4 import BeautifulSoupimport reimport osimport timeimport sysimport threadingreq_header=&#123;'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8','Accept-Encoding':'gzip, deflate, br','Accept-Language':'zh-CN,zh;q=0.9','Cookie':'UM_distinctid=162afbabff819e-03f2f082776e95-b34356b-1fa400-162afbabff9294; CNZZDATA1259019190=1993576859-1523364262-https%253A%252F%252Fwww.baidu.com%252F%7C1523364262; bookid=124629; chapterid=6510968; chaptername=%25u7B2C1%25u7AE0%2520%25u6797%25u4E2D%25u9634%25u8C0B','Host':'www.uxiaoshuo.com','Proxy-Connection':'keep-alive','Referer':'https://www.uxiaoshuo.com/','Upgrade-Insecure-Requests':'1','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'&#125;req_url_base='http://www.uxiaoshuo.com' #小说主地址def get_txt(txt_id): txt=&#123;&#125; _req_url=[] txt['title']='' txt['id']=str(txt_id) #小说编号 _req_url=txt['id'].split('.') req_url=req_url_base+ txt['id'] #根据小说编号获取小说URL print("小说编号："+req_url) try: res=requests.get(req_url, params=req_header) #获取小说第一章界面 soups=BeautifulSoup(res.text,"html.parser") #soup转化 #获取小说题目 txt['title']=soups.select('#webhtml .box_con .con_top a')[1].text #打开小说文件写入小说相关信息 fo = open('&#123;0&#125;.txt'.format(txt['title']), "ab+") #循环写入章节内容 while 1: if _req_url[-1]!='html': print(txt['title']+"全部下载成功！") break txt['c_title']=soups.select('#webhtml .box_con .zhangjieming h1')[0].text ##章节名称 txt['content']=soups.select('#webhtml .box_con .zhangjieTXT')[0] for i in txt['content'].select("script"): #去除无用内容 i.decompose() for i in txt['content'].select("div"): i.decompose() txt['content']=re.sub( '\s+', '\r\n\t', txt['content'].text).strip('\r\n') #以二进制写入章节题目 fo.write(('\n'+txt['c_title']+'\r\n').encode('UTF-8')) #以二进制写入章节内容 fo.write(('\n'+txt['content']+'\n').encode('UTF-8')) print(txt['c_title']) # print('章节名:'+txt['c_title']) # print("章节内容：\n"+txt['content']) req_url=soups.select('#webhtml .zhangjieming .bottem1 a')[3]['href'] _req_url=req_url.split('.') req_url=req_url_base+req_url res=requests.get(req_url, params=req_header) #获取下一章界面 soups=BeautifulSoup(res.text,"html.parser") #soup转化 except Exception as e: print(e) finally: returnget_txt('/124/124629/7404934.html')get_txt('/135/135169/7373986.html') 要爬取该网站内的小说，只需要将参数改成自己需要的小说就可以了]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Novel</tag>
        <tag>Reptile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」657. Judge Route Circle]]></title>
    <url>%2F2018%2F04%2F09%2F657-Judge-Route-Circle%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 657. Judge Route CircleDescription Initially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place.The move sequence is represented by a string. And each move is represent by a character. The valid robot moves are R (Right), L (Left), U (Up) and D (down). The output should be true or false representing whether the robot makes a circle. Examples One 12Input: &quot;UD&quot;Output: true Two 12Input: &quot;LL&quot;Output: false Solutions C++ Solution 1234567891011121314151617class Solution &#123;public: bool judgeCircle(string moves) &#123; int a=0; int b=0; for(char c:moves) &#123; switch(c)&#123; case 'R':a++;break; case 'L':a--;break; case 'U':b++;break; case 'D':b--;break; &#125; &#125; return a==0&amp;&amp;b==0; &#125;&#125;; Wrong Answer Solution 12345678910111213class Solution &#123;public: bool judgeCircle(string moves) &#123; int* alp=new int[26]; for(char c:moves) &#123; alp[c-'A']++; &#125; if((alp['R'-'A']==alp['L'-'A'])&amp;&amp;(alp['U'-'A'] ==alp['D'-'A']))return true; else return false; &#125;&#125;; Test Case 按道理solution应该没错的，可是不知道哪里有点问题，神经病啊！！！！！ 1RULDDLLDLRDUUUURULRURRRRLRULRLULLLRRULULDDRDLRULDRRULLUDDURDLRRUDRUDDURLLLUUDULRUDRLURRDRLLDDLLLDLRLLRUUDUURDRLDUDRUDRLUDULRLUDRLDDUULDDLDURULUDUUDDRRDUURRLRDLDLRLLDRRUUURDLULLURRRRDRRURDUURDLRRUULRURRUULULUUDURUDLRDDDDDURRRLRUDRUULUUUULDURDRULLRRRUDDDUUULUURRDRDDRLLDRLDULDLUUDRDLULLDLDDRUUUUDDRRRDLLLLURUURLRUUULRDDULUULUURDURDDDRRURLURDLLLRLULRDLDDLRDRRRRLUURRRRLDUDLLRUDLDRDLDRUULDRDULRULRRDLDLLLUDLDLULLDURUURRLLULUURLRLRDUDULLDURRUDDLDDLLUDURLLRLDLDUDLURLLDRRURRDUDLDUULDUDRRUDULLUUDURRRURLULDDLRRURULUURURRDULUULDDDUUDRLDDRLULDUDDLLLDLDURDLRLUURDDRLUDRLUDLRRLUUULLDUUDUDURRUULLDDUDLURRDDLURLDRDRUDRLDDLDULDRULUDRRDRLLUURULURRRUDRLLUURULURRLUULRDDDRDDLDRLDRLDUDRLDRLDDLDUDDURUDUDDDLRRDLUUUDUDURLRDRURUDUDDRDRRLUDURULDULDDRLDLUURUULUDRLRLRLLLLRLDRURRRUULRDURDRRDDURULLRDUDRLULRRLLLDRLRLRRDULDDUDUURLRULUUUULURULDLDRDRLDDLRLURRUULRRLDULLUULUDUDRLDUDRDLLDULURLUDDUURULDURRUURLRDRRRLDDULLLLDDRRLRRDRDLRUDUUDLRLDRDRURULDLULRRDLLURDLLDLRDRURLRUDURDRRRULURDRURLDRRRDUDUDUDURUUUUULURDUDDRRDULRDDLULRDRULDRUURRURLUDDDDLDRLDLLLLRLDRLRDRRRLLDRDRUULURLDRULLDRRDUUDLURLLDULDUUDLRRRDDUDRLDULRDLLULRRUURRRURLRRLDDUDDLULRUDULDULRDUDRLRDULRUUDDRUURUDLDRDUDDUULLUDDLLRLURURLRRULLDDDLURDRRDLLLLULLDLUDDLURLLDDRLDLLDDRDRDDUDLDURLUUUUUDLLLRLDULDDRDDDDRUDLULDRRLLLDUUUDDDRDDLLULUULRRULRUDRURDDULURDRRURUULDDDDUULLLURRRRDLDDLRLDDDRLUUDRDDRDDLUDLUUULLDLRDLURRRLRDRLURUURLULLLLRDDLLLLRUDURRLDURULURULDDRULUDRLDRLLURURRRDURURDRRUDLDDLLRRDRDDLRLRLUDUDRRUDLLDUURUURRDUDLRRLRURUDURDLRRULLDLLUDURUDDRUDULLDUDRRDDUDLLLDLRDRUURLLDLDRDDLDLLUDRDDRUUUDDULRUULRDRUDUURRRURUDLURLRDDLUULRDULRDURLLRDDDRRUDDUDUDLLDDRRUUDURDLLUURDLRULULDULRUURUDRULDRDULLULRRDDLDRDLLLDULRRDDLDRDLLRDDRLUUULUURULRULRUDULRULRUURUDUUDLDUDUUURLLURDDDUDUDLRLULDLDUDUULULLRDUDLDRUDRUULRURDDLDDRDULRLRLRRRRLRULDLLLDDRLUDLULLUUDLDRRLUDULRDRLLRRRULRLRLLUDRUUDUDDLRLDRDDDDRDLDRURULULRUURLRDLLDDRLLRUDRRDDRDUDULRUDULURRUDRDLRDUUDDLDRUDLLDDLRLULLLRUUDRRRRUULLRLLULURLDUDDURLRULULDLDRURDRLLURRDLURRURLULDLRLDUDLULLLDRDLULDLRULLLUDUDUDUDLDDDDDRDLUDUULLUDRLUURDRLULD 12output: falseexpect: true]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
        <tag>Circle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」387. First Unique Character in a String]]></title>
    <url>%2F2018%2F04%2F09%2F387-First-Unique-Character-in-a-String%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 387. First Unique Character in a StringDescription Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1. Examples12345s = &quot;leetcode&quot;return 0.s = &quot;loveleetcode&quot;,return 2. Note: You may assume the string contain only lowercase letters. Solutions C++ Solution 123456789101112131415class Solution &#123;public: int firstUniqChar(string s) &#123; int* alp=new int[26]; for(char c:s) &#123; alp[c-'a']++; &#125; for(int i=0;i&lt;s.size();i++) &#123; if(alp[s[i]-'a']==1)return i; &#125; return -1; &#125;&#125;; Someting Wrong 明明测试用例是对的，但是提交就是错的，很郁闷，结果在下面发现 Note: is Run Code inconsistent with Submit Solution? If you are using global variables or C/C++, check this out.First, please check if you are using any global or static variables. They are Evil, period. If you must declare one, reset them in the first line of your called method or in the default constructor. Why? Because the judger executes all test cases using the same program instance, global/static variables affect the program state from one test case to another. See this Discuss thread for more details.Are you using C or C++? If the answer is yes, chances are your code has bugs in it which cause one of the earlier test cases to trigger an undefined behavior. See this Discuss thread for an example of undefined behavior. These bugs could be hard to debug, so good luck. Or just give up on C/C++ entirely and code in a more predictable language, like Java. Just kidding.总之很郁闷 Jave Solution 123456789101112131415class Solution &#123; public int firstUniqChar(String s) &#123; int[] alp=new int[26]; char[] arr=s.toCharArray(); for(char c:arr) &#123; alp[c-'a']++; &#125; for(int i=0;i&lt;s.length();i++) &#123; if(alp[arr[i]-'a']==1)return i; &#125; return -1; &#125;&#125; 9 ms Soluton in Java 1234567891011121314151617class Solution &#123; public int firstUniqChar(String s) &#123; int resIndex = s.length(); if(resIndex == 0) return -1; for(char c = 'a';c&lt;='z';c++)&#123; int index = s.indexOf(c); if(index!=-1 &amp;&amp; index == s.lastIndexOf(c))&#123; resIndex = Math.min(resIndex,index); &#125; &#125; return resIndex == s.length() ? -1 : resIndex; &#125;&#125;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>String</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[双系统删除Ubuntu后出现grub rescure>解决办法]]></title>
    <url>%2F2018%2F03%2F27%2FBUGs-when-Delete-the-ubuntu-on-windows%2F</url>
    <content type="text"><![CDATA[双系统删除Ubuntu后出现grub rescureAuthor: JacksonLeon Description 在笔记本电脑上安装了两个Linux系统，有一个几乎不用，所以决定把它给删除了,然后就出现了问题. 123GRUB loadingerror:unknow filesystemgrub rescue&gt; 下面几种操作会导致这种问题： 想删除Ubuntu，于是直接在Windows下删除/格式化了Ubuntu所在的分区。 调整磁盘，利用工具合并/分割/调整/删除分区，使磁盘分区数目发生了变化。 重新安装系统，把Linux安装到了新分区，原有分区已经格式化，但是没有重新安装grub2。 用Ubuntu备份工具/衍生版制造工具等，把主分区恢复成了8.X的老版本，结果老版本的grub是grub1,于是把grub2破坏掉了。 总归是由于操作者不知道grub2分为两部分，一部分（一般情况下）写在了mbr上，另一部分写在了某个分区的/boot/grub目录（如果/boot单独分区，则直接写在对应分区的/grub目录）里面。由于上述操作，致使grub2的mbr里面的那一部分找不到/grub目录里面的那一部分了（或者另一部分已经删除了）。 解决办法彻底删除grub2 已经使用此方法成功解决 适用于已经不想再使用Ubuntu，要转回Windows的人。只要有Windows启动盘（非Ghost），用它启动，至选择安装位置，不用真正安装，退出重启就可以。或者用它启动到故障修复台，运行fixboot或者fixmbr都可以。win7命令行下，则是执行： 1BootRec.exe /fixmbr /fixmbr修复mbr，/FixBoot修复启动扇区，/ScanOs检测已安装的win7，/RebuildBcd重建bcd。 重新安装、修复grub2先使用ls命令，找到Ubuntu安装在哪个分区在grub rescue&gt;下输入以下命令： 1ls 会罗列所有的磁盘分区信息，比如： 1(hd0,1),(hd0,5),(hd0,3),(hd0,2) 依次调用如下命令： X表示各个分区号码如果/boot没有单独分区，用以下命令： 1ls (hd0,X)/boot/grub 如果/boot单独分区，则用下列命令： 1ls （hd0,X)/grub 正常情况下，会列出来几百个文件，很多文件的扩展名是.mod、.lst和.img，还有一个文件是grub.cfg。假设找到（hd0,5）时，显示了文件夹中的文件，则表示Linux安装在这个分区。 如果找到了正确的grub目录，则设法临时性将grub的两部分关联起来以下是/boot没有单独分区的命令： 123grub rescue&gt;set root=(hd0,5)grub rescue&gt;set prefix=(hd0,5)/boot/grubgrub rescue&gt;insmod /boot/grub/normal.mod 以下是/boot单独分区的命令： 123grub rescue&gt;set root=(hd0,5)grub rescue&gt;set prefix=(hd0,5)/grubgrub rescue&gt;insmod /grub/normal.mod 为了显示出丢失的grub菜单，需要调用如下命令： 1grub rescue&gt;normal 如果重启后问题依旧存在，则需要进入Linux中对grub进行修复。启动起来，进入Ubuntu之后，在终端执行： 12$ sudo update-grub$ sudo grub-install /dev/sda sda是硬盘号码，千万不要指定分区号码，例如sda1，sda5等都不对。 如果找不到正确的/grub目录，则尝试寻找是否有linux核心文件，则依次在grub rescue&gt;下调用如下命令： X表示各个分区号码如果/boot没有单独分区： 1ls (hd0,X)/boot 如果/boot单独分区： 1ls （hd0,X) 找名字类似vmlinuz-3.0.0-12-generic这样的文件，这是Linux核心文件，如果找到，记下(hd0,X)中的X值。假设找到（hd0,5）时，显示了文件夹中的文件。 然后用live cd或者live usb启动，在live cd的Ubuntu终端中依次输入以下命令（sda5中的5必须改成上面记录下来数值）： 如果/boot没有单独分区： 12sudo mount /dev/sda5 /mntsudo grub-install --boot-directory=/mnt/boot /dev/sda 如果/boot单独分区： 12sudo mount /dev/sda5 /mntsudo grub-install --boot-directory=/mnt /dev/sda 然后重新启动即可。 以上这两句命令也可以解决“安装Ubuntu时grub安装位置不对，没有将grub安装到/dev/sda，造成启动时不出现Ubuntu启动项直接进入Windows”的问题，不过需要自行确定sda5中的5改成什么数字。 如果连Linux核心文件都没有，那么就得彻底重新安装找到了grub分区的目录，却找不到normal.mod这个文件，所以最后直接借助U盘里的Linux系统来完成修复了。面对这种状况的时候，最坏的打算就是重新安装系统了，可惜的就是那些辛辛苦苦收集的资料了。不过谁让自己瞎折腾的呢？这一切代价都需要自己去承担。不过索性有强大的网络，让我找到了解决的措施，在此感谢那些无私奉献的Linux爱好者辛勤的付出，是他们的存在才让生活更美好！ 参考文章Grub Rescue修复方法grub rescue修复方法Ubuntu启动问题以及Grub Rescue修复方法Grub Rescue来修复Grub 问题grub rescue模式下启动并修复Ubuntu Grub Rescue几种修复方法grub rescue修复grub rescue 模式下引导修复]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」386. Lexicographical Numbers]]></title>
    <url>%2F2018%2F03%2F26%2F386-Lexicographical-Numbers%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 386. Lexicographical NumbersDescription Given an integer n, return 1-n in lexicographical order. For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9]. Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000. Solution123456789101112131415161718192021222324class Solution &#123;public: vector&lt;int&gt; lexicalOrder(int n) &#123; vector&lt;int&gt; res; int cur=1; for(int i=1;i&lt;=n;i++) &#123; res.push_back(cur); if(cur*10&lt;=n) //首先判断能否直接再后面加0 cur*=10; else if(cur%10!=9&amp;&amp;(cur+1)&lt;=n) //正常情况下+1 cur++; else &#123; while((cur/10)%10==9) //处理*9_的情况，例如192(n=192)的下一个应该是(1__开头结束)2开头，而不是20 &#123; cur/=10; &#125; cur=(cur/10)+1; //这一轮个位结束，从上一位+1继续开始 &#125; &#125; return res; &#125;&#125;; Hints 字典排序(数字) 首先判断能否直接再后面加0即乘10 正常情况下直接+1 还有这一轮个位结束，回到上一位+1重新开始 处理* 9 *的特殊情况，这种情况下需要从上一个不是9的位置开始也就是循环除以10]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Sort</tag>
        <tag>Lexicographical</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」807. Max Increase to Keep City Skyline]]></title>
    <url>%2F2018%2F03%2F25%2F807-Max-Increase-to-Keep-City-Skyline%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 807. Max Increase to Keep City SkylineDescription In a 2 dimensional array grid, each value grid[i][j] represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well. At the end, the “skyline” when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city’s skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.What is the maximum total sum that the height of the buildings can be increased? Example12Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]Output: 35 Explanation123456789101112131415The grid is:[[3, 0, 8, 4], [2, 4, 5, 7], [9, 2, 6, 3], [0, 3, 1, 0]]The skyline viewed from top or bottom is: [9, 4, 8, 7]The skyline viewed from left or right is: [8, 7, 9, 3]The grid after increasing the height of buildings without affecting skylines is:gridNew = [ [8, 4, 8, 7], [7, 4, 7, 7], [9, 4, 8, 7], [3, 3, 3, 3] ] Note 1 &lt; grid.length = grid[0].length &lt;= 50. All heights grid[i][j] are in the range [0, 100]. All buildings in grid[i][j] occupy the entire grid cell: that is, they are a 1 x 1 x grid[i][j] rectangular prism. Solution12345678910111213141516171819202122232425262728293031class Solution &#123;public: int maxIncreaseKeepingSkyline(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123; int n = grid.size(); vector&lt;int&gt; col, row; //The Skyline Matrix int max; //初始化col、row数组 for (int i = 0; i &lt; n; i++) &#123; max=0; for (int j = 0; j &lt; n; j++) if(max&lt;grid[i][j])max=grid[i][j]; row.push_back(max); &#125; for (int i = 0; i &lt; n; i++) &#123; max=0; for (int j = 0; j &lt; n; j++) if(max&lt;grid[j][i])max=grid[j][i]; col.push_back(max); &#125; int res = 0; int tmp; for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; n; j++) &#123; tmp=row[i]&lt;col[j]?row[i]:col[j]; //girdNew res += tmp - grid[i][j]; //累加增加的值 &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」804. Unique Morse Code Words]]></title>
    <url>%2F2018%2F03%2F25%2F804-Unique-Morse-Code-Words%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 804. Unique Morse Code WordsDescription International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: &quot;a&quot; maps to &quot;.-&quot;, &quot;b&quot; maps to &quot;-...&quot;, &quot;c&quot; maps to &quot;-.-.&quot;, and so on. For convenience, the full table for the 26 letters of the English alphabet is given below: 1[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;] Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, “cab” can be written as “-.-.-….-“, (which is the concatenation “-.-.” + “-…” + “.-“). We’ll call such a concatenation, the transformation of a word. Return the number of different transformations among all words we have. Example12345678910Input: words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]Output: 2Explanation: The transformation of each word is:&quot;gin&quot; -&gt; &quot;--...-.&quot;&quot;zen&quot; -&gt; &quot;--...-.&quot;&quot;gig&quot; -&gt; &quot;--...--.&quot;&quot;msg&quot; -&gt; &quot;--...--.&quot;There are 2 different transformations, &quot;--...-.&quot; and &quot;--...--.&quot;. Note The length of words will be at most 100. Each words[i] will have length in range [1, 12]. words[i] will only consist of lowercase letters. Solution1234567891011121314151617class Solution &#123;public: int uniqueMorseRepresentations(vector&lt;string&gt;&amp; words) &#123; vector&lt;string&gt; letters=&#123;".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."&#125;; set&lt;string&gt; res; for(string word:words) &#123; string code; for(auto w:word) &#123; code+=letters[w-'a']; &#125; res.insert(code); &#125; return res.size(); &#125;&#125;; Hints 利用Set的特性：元素无重复，直接返回set的size()就可以得到the number of different transformations among all words 根据ASCⅡ码的特点，words中的word包含的每个字母可以直接替换为Morse Code，再将字符串连接起来就可以得到每个word对应的Morse Code]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
        <tag>Morse-Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」191. Number of 1 Bits]]></title>
    <url>%2F2018%2F03%2F25%2F191-Number-of-1-Bits%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 191. Number of 1 BitsDescription Write a function that takes an unsigned integer and returns the number of 1 bits it has (also known as the Hamming weight). For example, the 32-bit integer 11 has binary representation 00000000000000000000000000001011, so the function should return 3. Solutions Hamming Weight 123456789101112class Solution &#123;public: int hammingWeight(uint32_t n) &#123; int c=0; while(n) &#123; c++; n&amp;=n-1; //逐次获取最低非0 bit位 &#125; return c; &#125;&#125;; Bit Mask 1234567891011121314class Solution(object): def hammingWeight(self, n): """ :type n: int :rtype: int """ res=0 mask=1 for i in range(32): if n&amp;mask: # &amp;：按位与 res+=1 mask=mask&lt;&lt;1 # n=n&gt;&gt;1 #n移位或者mask移位 return res]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Hamming-Distance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Note]]></title>
    <url>%2F2018%2F03%2F25%2FHexo-Note%2F</url>
    <content type="text"><![CDATA[Hexo NoteAuthor: JacksonLeon Description 记录使用Hexo博客期间的心得。 小技巧 Hexo博客实现页内跳转 如何在Hexo中写MarkDown文档，不使用绝对地址进行跳转到本博客中另外一个页面 传送门在此，代码如下：1&#123;% post_link Settings-of-iTerm2-on-Mac 详细设置请看这篇文章 %&#125; BUGs Hexo解析问题 例如：文章中代码块外出现}}时，Hexo 解析就会出现问题 解决办法： One 123&#123;% raw %&#125; 含有双大括号的内容&#123;% endraw %&#125; The Other 避免这种问题]]></content>
      <categories>
        <category>Note</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」461. Hamming Distance]]></title>
    <url>%2F2018%2F03%2F25%2F461-Hamming-Distance%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 461. Hamming DistanceDescription The Hamming distance between two integers is the number of positions at which the corresponding bits are different.Given two integers x and y, calculate the Hamming distance. Example12345678910Input: x = 1, y = 4Output: 2Explanation:1 (0 0 0 1)4 (0 1 0 0) ↑ ↑The above arrows point to positions where the corresponding bits are different. Note 0 ≤ x , y &lt; 2^31 Solution12345678910111213class Solution &#123;public: int hammingDistance(int x, int y) &#123; int dist=0; int tmp=x^y; while(tmp) &#123; dist++; tmp&amp;=tmp-1; &#125; return dist; &#125;&#125;; Hints 汉明距离是使用在数据传输差错控制编码里面的，汉明距离是一个概念，它表示两个（相同长度）字对应位不同的数量，我们以d（x,y）表示两个字x,y之间的汉明距离。对两个字符串进行异或运算，并统计结果为1的个数，那么这个数就是汉明距离。 1利用按位异或运算符^将不同bit位置为1，再逐次消除最低位非0 bit位得到Hamming Distance.]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Hamming-Distance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」654. Maximum Binary Tree]]></title>
    <url>%2F2018%2F03%2F24%2F654-Maximum-Binary-Tree%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 654. Maximum Binary TreeDescription Given an integer array with no duplicates. A maximum tree building on this array is defined as follow: The root is the maximum number in the array. The left subtree is the maximum tree constructed from left part subarray divided by the maximum number. The right subtree is the maximum tree constructed from right part subarray divided by the maximum number. Construct the maximum tree by the given array and output the root node of this tree. Example12345678910Input: [3,2,1,6,0,5]Output: return the tree root node representing the following tree: 6 / \ 3 5 \ / 2 0 \ 1 Note The size of the given array will be in the range [1,1000]. SolutionsC++ from Discuss : C++ O(N) solution123456789101112131415161718192021222324252627282930/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* constructMaximumBinaryTree(vector&lt;int&gt;&amp; nums) &#123; vector&lt;TreeNode*&gt; mbt; //堆栈存储数组 for(int i=0;i&lt;nums.size();i++) //从左到右扫描数组 &#123; TreeNode* cur=new TreeNode(nums[i]); //当前数初始化树节点 while(!mbt.empty()&amp;&amp;mbt.back()-&gt;val&lt;nums[i]) &#123; /*当堆栈不空且新数比堆栈中最后的数字小时， 当前节点作为父节点，先前的作为左子树 */ cur-&gt;left=mbt.back(); mbt.pop_back(); &#125; if(!mbt.empty()) //正常情况新节点直接作为右子树 mbt.back()-&gt;right=cur; mbt.push_back(cur); &#125; return mbt.front(); //返回头节点 &#125;&#125;; Hints 从左向右直接扫描数组 遇到比上一节点的val值小的直接作为右子树的头节点 所以比较适合使用堆栈来存储数组 当遇到比堆栈back()大的，作为其父节点 过几天再重新写试试看能不能写出来 就这样 Python 递归123456789101112class Solution: def constructMaximumBinaryTree(self, nums): """ :type nums: List[int] :rtype: TreeNode """ if nums: pos=nums.index(max(nums)) root=TreeNode(nums[pos]) root.left=self.constructMaximumBinaryTree(nums[:pos]) root.right=self.constructMaximumBinaryTree(nums[pos+1:]) return root Hints 先找到最大的数赋值给root节点 接着递归将左边数组返回左子树的头节点 相同地对右子树进行操作]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Tree</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Blog with Hexo]]></title>
    <url>%2F2018%2F03%2F22%2FBlog-with-Hexo%2F</url>
    <content type="text"><![CDATA[Blog with HexoAuthor: JacksonLeon Description Tutorial for build your blog with Hexo. Github pages环境搭建要使用Hexo， 需要系统支持Node.js以及Git Node.js 官网下载相应程序安装，最好是最新版下载 Git 也是官网下载安装下载 Hexo安装Hexo12345678$ cd */hexo # 进入hexo博客文件夹下$ npm install hexo --save$ npm install hexo-cli -g # 安装hexo$ hexo init blog$ cd blog$ npm install # 安装依赖组件$ hexo g # hexo generate$ hexo s # hexo server 本地查看 其他命令 12$ hexo new post "post-name" # 默认为post$ hexo new page "page-name" # 新建页面 简写 1234$ hexo g == hexo generate$ hexo s == hexo server$ hexo n == hexo new$ hexo d == hexo deploy 本地环境查看 1$ hexo -v 我的本地环境 1234567891011121314151617hexo: 3.6.0hexo-cli: 1.1.0os: Windows_NT 10.0.16299 win32 x64http_parser: 2.7.0node: 9.8.0v8: 6.2.414.46-node.21uv: 1.19.2zlib: 1.2.11ares: 1.13.0modules: 59nghttp2: 1.29.0napi: 2openssl: 1.0.2nicu: 60.2unicode: 10.0cldr: 32.0.1tz: 2017c Hexo 主题 安装主题 123$ hexo clean$ git clone https://github.com/theme-next/hexo-theme-next.git themes/next# 这种方案下，会出现仓库上传到Git后，本文件夹会变成@，不会显示具体内容的情况 更新主题 12$ cd themes/next$ git pull 启用主题 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next GithubGitHub Pages 主要用于管理自己的网站，不过，由于空间免费稳定，比较适合用来做搭建一个个人博客。 创建自己的Github账号 创建repository创建一个公共仓库用来存放网站静态内容，不过仓库名字必须是username/username.github.io，这是Github特殊的命名约定，你可以通过 https://username.github.io 来访问自己的博客。 使用Hexo deploy部署 部署到Github12345# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: git@github.com:username/username.github.io.git,master 注意空格 安装扩展 1$ npm install hexo-deployer-git --save 执行 1$ hexo d # hexo deploy Github Repository 1$ git clone https://github.com/username/username.github.io.git .deploy/username.github.io 将之前创建的空repo clone到本地，每次hexo d生成的public文件夹下内容复制到刚刚的文件夹下，再push到master brunch下，就可以更新github端的内容，为此我们创建一个sh脚本文件12345678910hexo cleanhexo generatecp -R public/* .deploy/JacksonLeoncd .deploy/JacksonLeongit fetch origingit add .DATE="$(echo $(date --rfc-2822))"git commit -m "Auto builder by JacksonLeon CI: $DATE"git merge origin/mastergit push origin master 每次添加完文章后直接运行脚本就可以了12$ cd */hexo/blog$ ./deploy.sh Coding pages由于国内访问Github速度比较慢，所以我们还可以使用 coding.net 的pages服务，大部分与Github pages设置相同，要注意的是，仓库名必须为用户名，不然会出现css解析错误以及404的现象。 _config.yml 1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: git@github.com:username/username.github.io.git,master coding: git@git.coding.net:username/username.git,master .deploy.sh 12345678910111213141516171819hexo cleanhexo generatecp -R public/* .deploy/JacksonLeoncd .deploy/JacksonLeongit fetch origingit add .DATE="$(echo $(date --rfc-2822))"git commit -m "Auto builder by JacksonLeon CI: $DATE"git merge origin/mastergit push origin mastercd ..cd ..cp -R public/* .deploy/JacksonLeon.github.iocd .deploy/JacksonLeon.github.iogit fetch origingit add .git commit -m "Auto builder by JacksonLeon CI: $DATE"git merge origin/mastergit push origin master 欢迎大家访问 Blog on Github Pages Blog on Coding Pages]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」771. Jewels and Stones]]></title>
    <url>%2F2018%2F03%2F22%2F771.%20Jewels%20and%20Stones%2F</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JacksonLeon 771. Jewels and StonesDesciption You’re given strings J representing the types of stones that are jewels, and S representing the stones you have. Each character in S is a type of stone you have. You want to know how many of the stones you have are also jewels. The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so “a” is considered a different type of stone from “A”. Example Example 1 12Input: J = "aA", S = "aAAbbbb"Output: 3 Example 2 12Input: J = "z", S = "ZZ"Output: 0 Note S and J wil consist of letters and have length at most 500 The charactors in J are distinct Solutionsfirst try1234567891011121314int numJewelsInStones(string J, string S) &#123; int c=0; for(int i=0;i&lt;J.size();i++) &#123; for(int j=0;j&lt;S.size();j++) &#123; if(J[i]==S[j]) &#123; c++; &#125; &#125; &#125; return c; &#125; Solutions in Discuss123456int numJewelsInStones(string J, string S) &#123; int c=0; set&lt;char&gt; setj(J.begin(),J.end()); for(char s:S)if(setj.count(s))c++; return c; &#125; Java Solution 123456789class Solution &#123; public int numJewelsInStones(String J, String S) &#123; int c=0; for(int i=0;i&lt;S.length();i++) if(J.indexOf(S.charAt(i))&gt;-1) c++; return c; &#125;&#125;]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown 语法]]></title>
    <url>%2F2018%2F03%2F22%2FMarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[NOTE: This is Simplelified Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to Markdown: Syntax. 声明： 这份文档派生(fork)于繁体中文版，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里查看它的源文件。「繁体中文版的原始文件可以查看这里 。」–By @riku / 本项目托管于 GitCafe 注： 本项目同时也托管于 Github 上，请通过 fork＋pull request 方式来帮忙改进本项目。 Markdown 语法说明 (简体中文版) 概述宗旨Markdown 的目标是实现「易读易写」。 可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。 总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像 强调 。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。 兼容 HTMLMarkdown 语法的目标是：成为一种适用于网络的_书写_语言。 Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想_不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写_的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。 要制约的只有一些 HTML 区块元素――比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;p&gt; 标签。 例子如下，在 Markdown 文件里加上一段 HTML 表格： 123456789这是一个普通段落。&lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。 请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。 HTML 的区段（行内）标签如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 &lt;a&gt; 或 &lt;img&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。 和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。 特殊字符自动转换在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &amp;lt; 和 &amp;amp;。 &amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到： 1http://images.google.com/images?num=30&amp;q=larry+bird 你必须要把网址转换写为： 1http://images.google.com/images?num=30&amp;amp;q=larry+bird 才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。 Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;amp;。 所以你如果要在文档中插入一个版权符号 ©，你可以这样写： 1&amp;copy; Markdown 会保留它不动。而若你写： 1AT&amp;T Markdown 就会将它转为： 1AT&amp;amp;T 类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写： 14 &lt; 5 Markdown 将会把它转换为： 14 &amp;lt; 5 不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都_一定_会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。） 区块元素段落和换行一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。 「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 &lt;br /&gt; 标签。 如果你_确实_想要依赖 Markdown 来插入 &lt;br /&gt; 标签的话，在插入处先按入两个以上的空格然后回车。 的确，需要多费点事（多加空格）来产生 &lt;br /&gt; ，但是简单地「每个换行都转换为 &lt;br /&gt;」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。 标题Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： 12345This is an H1=============This is an H2------------- 任何数量的 = 和 - 都可以有效果。 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： 12345# 这是 H1## 这是 H2###### 这是 H6 你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）： 12345# 这是 H1 ### 这是 H2 ##### 这是 H3 ###### 区块引用 BlockquotesMarkdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ： 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ： 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： 12345&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 12345678&gt; ## 这是一个标题。&gt; &gt; 1\. 这是第一行列表项。&gt; 2\. 这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。 列表Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记： 123* Red* Green* Blue 等同于： 123+ Red+ Green+ Blue 也等同于： 123- Red- Green- Blue 有序列表则使用数字接着一个英文句点： 1231\. Bird2\. McHale3\. Parish 很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为： 12345&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt; 如果你的列表标记写成： 1231\. Bird1\. McHale1\. Parish 或甚至是： 1233\. Bird1\. McHale8\. Parish 你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。 如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮，你可以把内容用固定的缩进整理好： 12345* Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.* Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 但是如果你懒，那也行： 12345* Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.* Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing. 如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 &lt;p&gt; 标签包起来，举例来说： 12* Bird* Magic 会被转换为： 1234&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt; 但是这个： 123* Bird* Magic 会被转换为： 1234&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt; 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符： 1234567891\. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.2\. Suspendisse id sem consectetuer libero luctus adipiscing. 如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许： 1234567* This is a list item with two paragraphs. This is the second paragraph in the list item. You&apos;reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.* Another item in the same list. 如果要在列表项目内放进引用，那 &gt; 就需要缩进： 1234* A list item with a blockquote: &gt; This is a blockquote &gt; inside a list item. 如果要放代码区块的话，该区块就需要缩进_两次_，也就是 8 个空格或是 2 个制表符： 123* 一列表项包含一个列表区块： &lt;代码写在这&gt; 当然，项目列表很可能会不小心产生，像是下面这样的写法： 11986\. What a great season. 换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。 11986\. What a great season. 代码区块和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 &lt;pre&gt; 和 &lt;code&gt; 标签来把代码区块包起来。 要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入： 123这是一个普通段落： 这是一个代码区块。 Markdown 会转换成： 1234&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt; 这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如： 12345Here is an example of AppleScript: tell application &quot;Foo&quot; beep end tell 会被转换为： 123456&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot; beepend tell&lt;/code&gt;&lt;/pre&gt; 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如： 123&lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation&lt;/div&gt; 会被转换为： 1234&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt; &amp;amp;copy; 2004 Foo Corporation&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt; 代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 123456789* * *********- - ---------------------------------------- 区段元素链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。 不管是哪一种，链接文字都是用 [方括号] 来标记。 要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如： 123This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute. 会产生： 12345&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt; 如果你是要链接到同样主机的资源，你可以使用相对路径： 1See my [About](/about/) page for details. 参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： 1This is [an example][id] reference-style link. 你也可以选择性地在两个方括号中间加上一个空格： 1This is [an example] [id] reference-style link. 接着，在文件的任意处，你可以把这个标记的链接内容定义出来： 1[id]: http://example.com/ &quot;Optional Title Here&quot; 链接内容定义的形式为： 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符 接着链接的网址 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着 下面这三种链接的定义都是相同： 123[foo]: http://example.com/ &quot;Optional Title Here&quot;[foo]: http://example.com/ &apos;Optional Title Here&apos;[foo]: http://example.com/ (Optional Title Here) 请注意： 有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。 链接网址也可以用方括号包起来： 1[id]: &lt;http://example.com/&gt; &quot;Optional Title Here&quot; 你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看： 12[id]: http://example.com/longish/path/to/resource/here &quot;Optional Title Here&quot; 网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。 链接辨别标签可以有字母、数字、空白和标点符号，但是并_不_区分大小写，因此下面两个链接是一样的： 12[link text][a][link text][A] 隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成： 1[Google][] 然后定义链接内容： 1[Google]: http://google.com/ 由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词： 1Visit [Daring Fireball][] for more information. 然后接着定义链接： 1[Daring Fireball]: http://daringfireball.net/ 链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。 下面是一个参考式链接的范例： 123456I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot; 如果改成用链接名称的方式写： 123456I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][]. [google]: http://google.com/ &quot;Google&quot; [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [msn]: http://search.msn.com/ &quot;MSN Search&quot; 上面两种写法都会产生下面的 HTML。 1234&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt; 下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用： 123I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;). 参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。 使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。 强调Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em&gt; 标签包围，用两个 * 或 _ 包起来的话，则会被转成 &lt;strong&gt;，例如： 1234567*single asterisks*_single underscores_**double asterisks**__double underscores__ 会转成： 1234567&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt; 你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。 强调也可以直接插在文字中间： 1un*frigging*believable 但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线： 1\*this text is surrounded by literal asterisks\* 代码如果要标记一小段行内代码，你可以用反引号把它包起来（12 Use the printf() function. 12会产生： Use the printf() function. 12如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： There is a literal backtick (`) here. 12这段语法会产生： There is a literal backtick (`) here. 12代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号： A single backtick in a code span: ` A backtick-delimited string in a code span: `foo` 12会产生： A single backtick in a code span: ` A backtick-delimited string in a code span: foo 12在代码区段内，`&amp;` 和方括号**都**会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段： Please don’t use any &lt;blink&gt; tags. 12转为： Please don’t use any &lt;blink&gt; tags. 12你也可以这样写： &amp;#8212; is the decimal-encoded equivalent of &amp;mdash;. 12以产生： &amp;#8212; is the decimal-encodedequivalent of &amp;mdash;. 12345678### 图片很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： _行内式_和_参考式_。行内式的图片语法看起来像是： 12345678详细叙述如下：* 一个惊叹号 `!`* 接着一个方括号，里面放上图片的替代文字* 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 &apos;title&apos; 文字。参考式的图片语法则长得像这样： 12「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： 12345678910到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `&lt;img&gt;` 标签。* * *## 其它### 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： http://example.com/12Markdown 会转为： http://example.com/12邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如： &#x61;&#100;&#x64;&#x72;&#x65;&#x73;&#115;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#46;&#99;&#111;&#109;12Markdown 会转成： &#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;12345678在浏览器里面，这段字串（其实是 `&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;`）会变成一个可以点击的「address@example.com」链接。（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）### 反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `&lt;em&gt;` 标签），你可以在星号的前面加上反斜杠： *literal asterisks*12Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \ 反斜线` 反引号 星号_ 底线{} 花括号[] 方括号() 括弧井字号 加号 减号. 英文句点! 惊叹号` 感谢感谢 leafy7382 协助翻译，hlb、Randylien 帮忙润稿，ethantw 的汉字标准格式・CSS Reset， WM 回报文字错误。 感谢 fenprace，addv。]]></content>
      <tags>
        <tag>Note</tag>
        <tag>MarkDown</tag>
        <tag>Reproduce</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim Note]]></title>
    <url>%2F2018%2F03%2F21%2FVi-Note%2F</url>
    <content type="text"><![CDATA[Vim NoteAuthor: JacksonLeon Description 此文用来记录平时使用Vim遇到的问题与心得. 本文长期更新. Vim使用技巧批量删除内容 全部删除 123## 进入文章末尾G ##注意大写:1,:d ## 删除全部内容 删除部分内容 123## 定位到要删除的文档末尾200G:9,:d ##删除9-200之间的内容 复制粘贴1234# 复制当前行yy# 在当前行粘贴p]]></content>
      <categories>
        <category>Note</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git note]]></title>
    <url>%2F2018%2F03%2F20%2FGit-note%2F</url>
    <content type="text"><![CDATA[Git NoteAuthor: JacksonLeon Description 此文用来记录平时使用Git遇到的问题与心得. 本文长期更新. 遇到的报错与解决办法 File Mode 12345# 遇到的问题[root@me file]# git diff .gitignorediff --git a/.gitignore b/.gitignoreold mode 100644new mode 100755 解决办法: filemode的变化，文件chmod后其文件某些位是改变了的，如果严格的比较原文件和chmod后的文件，两者是有区别的，但是源代码通常只关心文本内容，因此chmod产生的变化应该忽略，所以设置一下： git config --add core.filemode false 在.gitignore文件中添加忽略规则无效 项目开始的时候 没有将一些无关文件配置进 .gitignore里面。导致文件已经进行跟踪了，但是目前想把这些文件add 到 .gitignore文件中，但是发现没有效果。 修改文件之后，git 依然检测到了，文件改动。 解决办法: 12345# 原来git有一条规则，“如果一个文件一开始没有添加到.gitignore里面，中途添加进去。git将不会忽略这个文件。”在这种情况下，必须使用git rm --cached &lt; file name &gt;# git rm --cached -r &lt; file name &gt; 强制删除# 这个命令 来 移除对这个文件的跟踪，然后将 这个不想被跟踪的文件 添加到 .gitignore文件里面 就可以了。# 做完这些工作之后 你还必须 再 commit 一次，这次commit之后 ，文件就可以被忽略了。 fatal: refusing to merge unrelated histories 123# 在使用Git创建项目的时候，在两个分支合并的时候，出现了下面的这个错误。git merge origin/masterfatal: refusing to merge unrelated histories 解决办法: 在你操作命令后面加 --allow-unrelated-histories 例如 git merge master --allow-unrelated-histories commit之后想撤销 commit之后想要撤销commit某个文件 解决办法: 12345678910# 查看commit日志git log# reset commit# 想要撤销的commit的前一次commit idgit reset --soft [commit id]# 取消暂存git reset HEAD README.md# 重新commitgit add .git commit -m "message" To prevent you from losing history, non-fast-forward updates were rejected 123456To git ! [rejected] master -&gt; master (non-fast-forward)error: failed to push some refs to &apos;git&apos;To prevent you from losing history, non-fast-forward updates were rejectedMerge the remote changes before pushing again. See the &apos;Note aboutfast-forwards&apos; section of &apos;git push --help&apos; for details. 出现原因在于：git仓库中已经有一部分代码，所以它不允许你直接把你的代码覆盖上去。于是你有2个选择方式： 强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容 git push -f 先把git的东西fetch到你本地然后merge后再push git pull 拉取远程强制覆盖本地 1234# 获取remote最新代码git fetch --all# 覆盖本地git reset --hard origin master 生成密钥 123ssh-keygen -t rsa -C "your email address"# Windows存储在/c/user/username/.ssh中# Mac存储在~/.ssh中 Git常用命令123456789101112131415161718git add .git add [filename]# 提交暂存区到仓库区git commit -m [message]# 提交暂存区的指定文件到仓库区git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区git commit -a# 提交时显示所有diff信息git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化git commit --amend [file1] [file2] ...# 暂时将未提交的变化移除，稍后再移入git stashgit stash pop Git Workspace1234Workspace：工作区Index/Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库 Git Push 免密码登陆123##设置git config --global##credential.helper设置为storegit config --global credential.helper store 查看设置是否完成12345##查看git config设置内容git config --listuser.name=your-usernameuser.email=example@example.comcredential.helper=store Git Push 操作12345git fetch origingit add .git commit -m "message"git merge origin/mastergit push origin master 新建Repo123456# 在当前目录新建一个Git代码库git init# 新建一个目录，将其初始化为Git代码库git init[project-name]# 下载一个项目和它的整个代码历史git clone [url] Git配置1234567# 显示当前的Git配置git config--list# 编辑Git配置文件git config -e[--global]# 设置提交代码时的用户信息git config[--global] user.name "[name]"git config[--global] user.email "[email address]" 增加删除文件123456789101112131415# 添加指定文件到暂存区git add [file1][file2] ...# 添加指定目录到暂存区，包括子目录git add [dir]# 添加当前目录的所有文件到暂存区git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交git add -p# 删除工作区文件，并且将这次删除放入暂存区git rm [file1][file2] ...# 停止追踪指定文件，但该文件会保留在工作区git rm --cached[file]# 改名文件，并且将这个改名放入暂存区git mv[file-original] [file-renamed] 代码提交12345678910111213# 提交暂存区到仓库区git commit -m[message]# 提交暂存区的指定文件到仓库区git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区git commit -a# 提交时显示所有diff信息git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化git commit--amend [file1] [file2] ... 分支操作1234567891011121314151617181920212223242526272829# 列出所有本地分支git branch# 列出所有远程分支git branch -r# 列出所有本地分支和远程分支git branch -a# 新建一个分支，但依然停留在当前分支git branch[branch-name]# 新建一个分支，并切换到该分支git checkout -b[branch]# 新建一个分支，指向指定commitgit branch[branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系git branch--track [branch] [remote-branch]# 切换到指定分支，并更新工作区git checkout[branch-name]# 切换到上一个分支git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间git branch--set-upstream [branch] [remote-branch]# 合并指定分支到当前分支git merge[branch]# 选择一个commit，合并进当前分支git cherry-pick[commit]# 删除分支git branch -d[branch-name]# 删除远程分支git push origin--delete [branch-name]git branch -dr[remote/branch] 标签操作123456789101112131415161718# 列出所有taggit tag# 新建一个tag在当前commitgit tag [tag]# 新建一个tag在指定commitgit tag [tag][commit]# 删除本地taggit tag -d[tag]# 删除远程taggit push origin:refs/tags/[tagName]# 查看tag信息git show [tag]# 提交指定taggit push[remote] [tag]# 提交所有taggit push[remote] --tags# 新建一个分支，指向某个taggit checkout -b[branch] [tag] 查看信息1234567891011121314151617181920212223242526272829303132333435363738394041# 显示有变更的文件git status# 显示当前分支的版本历史git log# 显示commit历史，以及每次commit发生变更的文件git log --stat# 搜索提交历史，根据关键词git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行git log [tag]HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件git log [tag]HEAD --grep feature# 显示某个文件的版本历史，包括文件改名git log --follow [file]git whatchanged [file]# 显示指定文件相关的每一次diffgit log -p[file]# 显示过去5次提交git log -5--pretty --oneline# 显示所有提交过的用户，按提交次数排序git shortlog -sn# 显示指定文件是什么人在什么时间修改过git blame [file]# 显示暂存区和工作区的差异git diff# 显示暂存区和上一个commit的差异git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异git diff HEAD# 显示两次提交之间的差异git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码git diff --shortstat "@&#123;0 day ago&#125;"# 显示某次提交的元数据和内容变化git show [commit]# 显示某次提交发生变化的文件git show --name-only [commit]# 显示某次提交时，某个文件的内容git show [commit]:[filename]# 显示当前分支的最近几次提交git reflog 远程同步12345678910111213141516# 下载远程仓库的所有变动git fetch[remote]# 显示所有远程仓库git remote -v# 显示某个远程仓库的信息git remote show[remote]# 增加一个新的远程仓库，并命名git remote add[shortname] [url]# 取回远程仓库的变化，并与本地分支合并git pull[remote] [branch]# 上传本地指定分支到远程仓库git push[remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突git push[remote] --force# 推送所有分支到远程仓库git push[remote] --all 撤销操作12345678910111213141516171819# 恢复暂存区的指定文件到工作区git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区git checkout [commit] [file]# 恢复暂存区的所有文件到工作区git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变git reset [file]# 重置暂存区与工作区，与上一次commit保持一致git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变git reset[commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset--hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变git reset--keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支git revert [commit]]]></content>
      <categories>
        <category>Note</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F02%2F14%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
