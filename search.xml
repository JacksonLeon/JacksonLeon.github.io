<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown 图床更改及博客推送]]></title>
    <url>%2Fposts%2F1145527125.html</url>
    <content type="text"><![CDATA[Markdown 图床更改及博客推送 由于2019年4月份新浪图床开启了防盗链功能（不确定），部署到pages服务的图片失效，为了防止图片资源丢失，需要在本地留一份备份，但是本地的图片在线博客无法显示，所以还是需要重新找一个目前可以使用的图床以及图床工具。 图床选择 七牛云存储由于需要上传身份验证，个人比较敏感，所以不考虑这个选项 腾讯云cos只有7个月的免费时间，在线博客本来就是白嫖的，也没多少人看，我大部分时间还是看本地文档，所以也不考虑 阿里云oss与腾讯云类似，而且更贵 SM.MS，V2EX网友提供维护，不限制流量，不限制公网域名，只有上传文件频率限制，只是比较担心什么时候会停止维护，毕竟没有收入来源，要是大佬钱多那就当我没说 我这里选择的是SM.MS图床，虽然有点担心后续维护，但是对于目前来说，这个算是最优解了。 SM.MS提供了API，一小时内可以上传100张图片，这个频率一般人达不到吧，除非你是想把这个当成云盘存你的照片，不过傻子才会把私人照片上传到图床啊，艳照门是怎么来的啊！小伙子/小姑娘们！ 图床工具目前来说mac端的图床工具做的比较好的就是ipic了，但是这货免费版只支持新浪，新浪呢又开启了防盗链，付费版呢也不支持SM.MS 然后我就想通过Alfred workflow来作为图床工具，自动获取剪切板的图片，然后利用API转换成链接，放到剪切板里，我就又找了半天，又是ruby，又是PHP，又是python，不知道哪里出了问题怎么都不成功，气！ 索性我就自己写了一个轮子，把原先markdown文件里的新浪图床链接下载成图片，再用API转成SMMS链接 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119import osimport reimport jsonimport requestsimport urllib.requestfrom urllib.request import urlretrievefrom bs4 import BeautifulSoupheader = &#123; "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3", "Accept-Encoding": "gzip, deflate", "Accept-Language": "zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7", "Cache-Control": "max-age=0", "DNT": "1", "Host": "ws1.sinaimg.cn", "If-Modified-Since": "Mon, 08 Jul 2013 18:06:40 GMT", "Proxy-Connection": "keep-alive", "Upgrade-Insecure-Requests": "1", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.108 Safari/537.36"&#125;# find markdown files in filesPath# list files# get the whole files path# decide the files are md file or not# return markdown files listdef find_MD(filesPath): if not os.path.isdir(filesPath): return filesList = os.listdir(filesPath) MDFileList = [] for file in filesList: filePath = os.path.join(filesPath, file) if os.path.isfile(filePath) and os.path.splitext(filePath)[1] == '.md': MDFileList.append(filePath) return MDFileList# download pics through url# generate files' name in filespath# get pics' content# write the content to file# return saved pic pathdef downloadPic(link, savePath): picPath = savePath + link.split('.')[1] + str(1) + '.' + link.split( '.')[-1] pic_html = requests.get(link, stream=True) with open(picPath, 'wb') as pic: pic.write(pic_html.content) # urlretrieve(link, picPath) return picPath# upload pics using sm.ms# using sm.ms api# return cloud pathdef smmsUpload(imgOriginPath): try: smmsUrl = '' data = requests.post( smmsUrl, files=&#123; 'smfile': open(imgOriginPath, 'rb'), 'format': 'json' &#125;) img_new_url = json.loads(data.text) cloud_path = img_new_url['data']['url'] return (cloud_path) except BaseException as err: print("error in smms\n&#123;&#125;".format(err))# rewrite markdown files# save filesdef MDRewrite(MDFilePath, MDContent): with open(MDFilePath, 'w', encoding='utf-8') as md: md.write(MDContent)# change pic blocks from sinaimg to smms# using re to find sinaimg urls# download pic from sinaimg# upload pics to sm.ms and get cloud url# rewrite markdown files content and savedef picBlockParser(MDFilePath): try: picUrl_re = re.compile('') with open(MDFilePath) as md: MDContent = md.read() picUrl = picUrl_re.findall(MDContent) if len(picUrl) &gt; 0: print(MDFilePath) # print(len(picUrl)) # print(picUrl) for Url in picUrl: picPath = downloadPic(Url,'pic/') print(Url) smmsUrl = smmsUpload(picPath) print(smmsUrl) MDContent = MDContent.replace(Url, smmsUrl) MDRewrite(MDFilePath, MDContent) print(MDFilePath + '替换成功') except BaseException as err: print("&#123;&#125;".format(err))if __name__ == "__main__": for page in find_MD('/_posts'): picBlockList = picBlockParser(page) 博客推送由于图床工具使用python来实现，那么就在推送之前将markdown中的本地图片地址，转化成smms链接，再进行推送，这样以后更改图床比较方便，只需要更改API实现方式就👌。 具体实现方式与上述代码类似，在此不在赘述。 放几张美盾和钢铁侠的海报测试一下。]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Picture Bed</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pytorch Style Guide]]></title>
    <url>%2Fposts%2F3514606856.html</url>
    <content type="text"><![CDATA[Pytorch Style Guide To be translated This is not an official style guide for PyTorch. This document summarizes best practices from more than a year of experience with deep learning using the PyTorch framework. Note that the learnings we share come mostly from a research and startup perspective. This is an open project and other collaborators are highly welcomed to edit and improve the document. You will find three main parts of this doc. First, a quick recap of best practices in Python, followed by some tips and recommendations using PyTorch. Finally, we share some insights and experiences using other frameworks which helped us generally improve our workflow. We recommend using Python 3.6+From our experience we recommend using Python 3.6+ because of the following features which became very handy for clean and simple code: Support for typing since Python 3.6. Support of f strings since Python 3.6 Python Styleguide recapWe try to follow the Google Styleguide for Python.Please refer to the well-documented style guide on python code provided by Google. We provide here a summary of the most commonly used rules: Naming ConventionsFrom 3.16.4 Type Convention Example Packages &amp; Modules lower_with_under from prefetch_generator import BackgroundGenerator Classes CapWords class DataLoader Constants CAPS_WITH_UNDER BATCH_SIZE=16 Instances lower_with_under dataset = Dataset Methods &amp; Functions lower_with_under() def visualize_tensor() Variables lower_with_under background_color=’Blue’ IDEsCode EditorsIn general, we recommend the use of an IDE such as visual studio code or PyCharm. Whereas VS Code provides syntax highlighting and autocompletion in a relatively lightweight editor PyCharm has lots of advanced features for working with remote clusters. Setting up PyCharm to work with a Remote Machine Login to your remote machine (AWS, Google etc.) Create a new folder and a new virtual environment In Pycharm (professional edition) in the project settings setup a remote interpreter Configure the remote python interpreter (path to venv on AWS, Google etc.) Configure the mapping of the code from your local machine to the remote machine If set up properly this allows you to do the following: Code on your local computer (notebook, desktop) wherever you want (offline, online) Sync local code with your remote machine Additional packages will be installed automatically on a remote machine You don’t need any dataset on your local machine Run the code and debug on the remote machine as if it would be your local machine running the code Jupyter Notebook vs Python ScriptsIn general, we recommend to use jupyter notebooks for initial exploration/ playing around with new models and code.Python scripts should be used as soon as you want to train the model on a bigger dataset where also reproducibility is more important. Our recommended workflow: Start with a jupyter notebook Explore the data and models Build your classes/ methods inside cells of the notebook Move your code to python scripts Train/ deploy on server Jupyter Notebook Python Scripts + Exploration + Running longer jobs without interruption + Debugging + Easy to track changes with git - Can become a huge file - Debugging mostly means rerunning the whole script - Can be interrupted (don’t use for long training) - Prone to errors and become a mess LibrariesCommonly used libraries: Name Description Used for torch Base Framework for working with neural networks creating tensors, networks and training them using backprop torchvision todo data preprocessing, augmentation, postprocessing Pillow (PIL) Python Imaging Library Loading images and storing them Numpy Package for scientific computing with Python Data preprocessing &amp; postprocessing prefetch_generator Library for background processing Loading next batch in background during computation tqdm Progress bar Progress during training of each epoch torchsummary Keras summary for PyTorch Displays network, it’s parameters and sizes at each layer tensorboardx Tensorboard without tensorflow Logging experiments and showing them in tensorboard File OrganizationDon’t put all layers and models into the same file. A best practice is to separate the final networks into a separate file (networks.py) and keep the layers, losses, and ops in respective files (layers.py, losses.py, ops.py). The finished model (composed of one or multiple networks) should be reference in a file with its name (e.g. yolov3.py, DCGAN.py) The main routine, respective the train and test scripts should only import from the file having the model’s name. Building a Neural Network in PyTorchWe recommend breaking up the network into its smaller reusable pieces. A network is a nn.Module consisting of operations or other nn.Modules as building blocks. Loss functions are also nn.Module and can, therefore, be directly integrated into the network. A class inheriting from nn.Module must have a forward method implementing the forward pass of the respective layer or operation. A nn.module can be used on input data using self.net(input). This simply uses the call() method of the object to feed the input through the module. 1output = self.net(input) A Simple Network in PyTorchUse the following pattern for simple networks with a single input and single output:12345678910111213141516171819202122class ConvBlock(nn.Module): def __init__(self): super(ConvBlock, self).__init__() block = [nn.Conv2d(...)] block += [nn.ReLU()] block += [nn.BatchNorm2d(...)] self.block = nn.Sequential(*block) def forward(self, x): return self.block(x)class SimpleNetwork(nn.Module): def __init__(self, num_resnet_blocks=6): super(SimpleNetwork, self).__init__() # here we add the individual layers layers = [ConvBlock(...)] for i in range(num_resnet_blocks): layers += [ResBlock(...)] self.net = nn.Sequential(*layers) def forward(self, x): return self.net(x) Note the following: We reuse simple, recurrent building blocks such as ConvBlock which consists of the same recurrent pattern of (convolution, activation, normalization) and put them into a separate nn.Module We build up a list of desired layers and finally turn them into a model using nn.Sequential(). We use the * operator before the list object to unwrap it. In the forward pass we just run the input through the model A Network with skip connections in PyTorch12345678910111213141516171819202122class ResnetBlock(nn.Module): def __init__(self, dim, padding_type, norm_layer, use_dropout, use_bias): super(ResnetBlock, self).__init__() self.conv_block = self.build_conv_block(...) def build_conv_block(self, ...): conv_block = [] conv_block += [nn.Conv2d(...), norm_layer(...), nn.ReLU()] if use_dropout: conv_block += [nn.Dropout(...)] conv_block += [nn.Conv2d(...), norm_layer(...)] return nn.Sequential(*conv_block) def forward(self, x): out = x + self.conv_block(x) return out Here the skip connection of a ResNet block has been implemented directly in the forward pass. PyTorch allows for dynamic operations during the forward pass. A Network with multiple outputs in PyTorchFor a network requiring multiple outputs, such as building a perceptual loss using a pretrained VGG network we use the following pattern:123456789101112131415161718192021222324class Vgg19(torch.nn.Module): def __init__(self, requires_grad=False): super(Vgg19, self).__init__() vgg_pretrained_features = models.vgg19(pretrained=True).features self.slice1 = torch.nn.Sequential() self.slice2 = torch.nn.Sequential() self.slice3 = torch.nn.Sequential() for x in range(7): self.slice1.add_module(str(x), vgg_pretrained_features[x]) for x in range(7, 21): self.slice2.add_module(str(x), vgg_pretrained_features[x]) for x in range(21, 30): self.slice3.add_module(str(x), vgg_pretrained_features[x]) if not requires_grad: for param in self.parameters(): param.requires_grad = False def forward(self, x): h_relu1 = self.slice1(x) h_relu2 = self.slice2(h_relu1) h_relu3 = self.slice3(h_relu2) out = [h_relu1, h_relu2, h_relu3] return out Note here the following: We use a pretrained model provided by torchvision. We split up the network into three slices. Each slice consists of layers from the pretrained model. We freeze the network by setting requires_grad = False We return a list with the three outputs of our slices Custom LossEven if PyTorch already has a lot of of standard loss function it might be necessary sometimes to create your own loss function. For this, create a separate file losses.py and extend the nn.Module class to create your custom loss function: 12345678class CustomLoss(torch.nn.Module): def __init__(self): super(CustomLoss,self).__init__() def forward(self,x,y): loss = torch.mean((x - y)**2) return loss Recommended code structure for training your modelNote that we used the following patterns: We use BackgroundGenerator from prefetch_generator to load next batches in background We use tqdm to monitor training progress and show the compute efficiency. This helps us find bottlenecks in our data loading pipeline. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130# import statementsimport torchimport torch.nn as nnfrom torch.utils import data...# set flags / seedstorch.backends.cudnn.benchmark = Truenp.random.seed(1)torch.manual_seed(1)torch.cuda.manual_seed(1)...# Start with main codeif __name__ == '__main__': # argparse for additional flags for experiment parser = argparse.ArgumentParser(description="Train a network for ...") ... opt = parser.parse_args() # add code for datasets (we always use train and validation/ test set) data_transforms = transforms.Compose([ transforms.Resize((opt.img_size, opt.img_size)), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)) ]) train_dataset = datasets.ImageFolder( root=os.path.join(opt.path_to_data, "train"), transform=data_transforms) train_data_loader = data.DataLoader(train_dataset, ...) test_dataset = datasets.ImageFolder( root=os.path.join(opt.path_to_data, "test"), transform=data_transforms) test_data_loader = data.DataLoader(test_dataset ...) ... # instantiate network (which has been imported from *networks.py*) net = MyNetwork(...) ... # create losses (criterion in pytorch) criterion_L1 = torch.nn.L1Loss() ... # if running on GPU and we want to use cuda move model there use_cuda = torch.cuda.is_available() if use_cuda: net = net.cuda() ... # create optimizers optim = torch.optim.Adam(net.parameters(), lr=opt.lr) ... # load checkpoint if needed/ wanted start_n_iter = 0 start_epoch = 0 if opt.resume: ckpt = load_checkpoint(opt.path_to_checkpoint) # custom method for loading last checkpoint net.load_state_dict(ckpt['net']) start_epoch = ckpt['epoch'] start_n_iter = ckpt['n_iter'] optim.load_state_dict(ckpt['optim']) print("last checkpoint restored") ... # if we want to run experiment on multiple GPUs we move the models there net = torch.nn.DataParallel(net) ... # typically we use tensorboardX to keep track of experiments writer = SummaryWriter(...) # now we start the main loop n_iter = start_n_iter for epoch in range(start_epoch, opt.epochs): # set models to train mode net.train() ... # use prefetch_generator and tqdm for iterating through data pbar = tqdm(enumerate(BackgroundGenerator(train_data_loader, ...)), total=len(train_data_loader)) start_time = time.time() # for loop going through dataset for i, data in pbar: # data preparation img, label = data if use_cuda: img = img.cuda() label = label.cuda() ... # It's very good practice to keep track of preparation time and computation time using tqdm to find any issues in your dataloader prepare_time = start_time-time.time() # forward and backward pass optim.zero_grad() ... loss.backward() optim.step() ... # udpate tensorboardX writer.add_scalar(..., n_iter) ... # compute computation time and *compute_efficiency* process_time = start_time-time.time()-prepare_time pbar.set_description("Compute efficiency: &#123;:.2f&#125;, epoch: &#123;&#125;/&#123;&#125;:".format( process_time/(process_time+prepare_time), epoch, opt.epochs)) start_time = time.time() # maybe do a test pass every x epochs if epoch % x == x-1: # bring models to evaluation mode net.eval() ... #do some tests pbar = tqdm(enumerate(BackgroundGenerator(test_data_loader, ...)), total=len(test_data_loader)) for i, data in pbar: ... # save checkpoint if needed ... Training on Multiple GPUs in PyTorchThere are two distinct patterns in PyTorch to use multiple GPUs for training.From our experience both patterns are valid. The first one results however in nicer and less code. The second one seems to have a slight performance advantage due to less communication between the GPUs. I asked a question in the official PyTorch forum about the two approaches here Split up the batch input of each networkThe most common one is to simply split up the batches of all networks to the individual GPUs. A model running on 1 GPU with batch size 64 would, therefore, run on 2 GPUs with each a batch size of 32. This can be done automatically by wrapping the model by nn.DataParallel(model). Pack all networks in a super network and split up input batchThis pattern is less commonly used. A repository implemnting this approach is shown here in the pix2pixHD implementation by Nvidia Do’s and Don’t’sAvoid Numpy Code in the forward method of a nn.ModuleNumpy runs on the CPU and is slower than torch code. Since torch has been developed with being similar to numpy in mind most numpy functions are supported by PyTorch already. Separate the DataLoader from the main CodeThe data loading pipeline should be independent of your main training code. PyTorch uses background workers for loading the data more efficiently and without disturbing the main training process. Don’t log results in every stepTypically we train our models for thousands of steps. Therefore, it is enough to log loss and other results every n’th step to reduce the overhead. Especially, saving intermediary results as images can be costly during training. Use Command-line ArgumentsIt’s very handy to use command-line arguments to set parameters during code execution (batch size, learning rate, etc). An easy way to keep track of the arguments for an experiment is by just printing the dictionary received from parse_args:123456...# saves arguments to config.txt fileopt = parser.parse_args()with open("config.txt", "w") as f: f.write(opt.__str__())... Use .detach() to free tensors from the graph if possiblePyTorch keeps track of of all operations involving tensors for automatic differentiation. Use .detach() to prevent recording of unnecessary operations. Use .item() for printing scalar tensorsYou can print variables directly, however it’s recommended to use variable.detach() or variable.item(). In earlier PyTorch versions &lt; 0.4 you have to use .data to access the tensor of a variable. Use the call method instead of forward on a nn.ModuleThe two ways are not identical as pointed out in one of the issues here:123output = self.net.forward(input)# they are not equal!output = self.net(input) FAQ How to keep my experiments reproducible? We recommend setting the following seeds at the beginning of your code: 123np.random.seed(1)torch.manual_seed(1)torch.cuda.manual_seed(1) How to improve training and inference speed further? On Nvidia GPUs you can add the following line at the beginning of our code. This will allow the cuda backend to optimize your graph during its first execution. However, be aware that if you change the network input/output tensor size the graph will be optimized each time a change occurs. This can lead to very slow runtime and out of memory errors. Only set this flag if your input and output have always the same shape. Usually, this results in an improvement of about 20%. 1torch.backends.cudnn.benchmark = True What is a good value for compute efficiency using your tqdm + prefetch_generator pattern? It depends on the machine used, the preprocessing pipeline and the network size. Running on a SSD on a 1080Ti GPU we see a compute efficiency of almost 1.0 which is an ideal scenario. If shallow (small) networks or a slow harddisk is used the number may drop to around 0.1-0.2 depending on your setup. How can I have a batch size &gt; 1 even though I don’t have enough memory? In PyTorch we can implement very easily virtual batch sizes. We just prevent the optimizer from making an update of the parameters and sum up the gradients for batch_size cycles. 1234567891011121314...# in the main loopout = net(input)loss = criterion(out, label)# we just call backward to sum up gradients but don't perform step hereloss.backward() total_loss += loss.item() / batch_sizeif n_iter % batch_size == batch_size-1: # here we perform out optimization step using a virtual batch size optim.step() optim.zero_grad() print('Total loss: ', total_loss) total_loss = 0.0... How can I adjust the learning rate during training? We can access the learning rate directly using the instantiated optimizer as shown here: 1234567...for param_group in optim.param_groups: old_lr = param_group['lr'] new_lr = old_lr * 0.1 param_group['lr'] = new_lr print('Updated lr from &#123;&#125; to &#123;&#125;'.format(old_lr, new_lr))... How to use a pretrained model as a loss (non backprop) during training If you want to use a pretrained model such as VGG to compute a loss but not train it (e.g. Perceptual loss in style-transfer/ GANs/ Auto-encoder) you can use the following pattern: 1234567891011121314...# instantiate the modelpretrained_VGG = VGG19(...)# disable gradients (prevent training)for p in pretrained_VGG.parameters(): # reset requires_grad p.requires_grad = False...# you don't have to use the no_grad() namespace but can just run the model# no gradients will be computed for the VGG modelout_real = pretrained_VGG(input_a)out_fake = pretrained_VGG(input_b)loss = any_criterion(out_real, out_fake)... Why do we use .train() and .eval() in PyTorch? Those methods are used to set layers such as BatchNorm2d or Dropout2d from training to inference mode. Every module which inherits from nn.Module has an attribute called isTraining. .eval() and .train() just simply sets this attribute to True/ False. For more information of how this method is implemented please have a look at the module code in PyTorch My model uses lots of memory during Inference/ How to run a model properly for inference in PyTorch? Make sure that no gradients get computed and stored during your code execution. You can simply use the following pattern to assure that: 123with torch.no_grad(): # run model here out_tensor = net(in_tensor) How to fine-tune a pretrained model? In PyTorch you can freeze layers. This will prevent them from being updated during an optimization step. 1234# you can freeze whole modules usingfor p in pretrained_VGG.parameters(): # reset requires_grad p.requires_grad = False When to use Variable(…)? Since PyTorch 0.4 Variable* and Tensor have been merged. We don’t have to explicitly create a Variable** object anymore. Is PyTorch on C++ faster then using Python? C++ version is about 10% faster Can TorchScript / JIT speed up my code? Todo… Is PyTorch code using cudnn.benchmark=True faster? From our experience you can gain about 20% speed-up. But the first time you run your model it takes quite some time tobuild the optimized graph. In some cases (loops in forward pass, no fixed input shape, if/else in forward, etc.) this flag mightresult in out of memory or other errors. How to use multiple GPUs for training? Todo… How does .detach() work in PyTorch? If frees a tensor from a computation graph. A nice illustration is shown here]]></content>
      <categories>
        <category>Python</category>
        <category>Style Guide</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Reproduce</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Python Style Guide]]></title>
    <url>%2Fposts%2F1894126926.html</url>
    <content type="text"><![CDATA[Google Python Style Guide To be translated Google Python Style Guide 待翻译 1 BackgroundPython is the main dynamic language used at Google. This style guide is a listof dos and don’ts for Python programs. To help you format code correctly, we’ve created a settings file forVim. For Emacs, the default settings should be fine. Many teams use the yapfauto-formatter to avoid arguing over formatting. &lt;/a&gt; 2 Python Language Rules&lt;/a&gt; 2.1 LintRun pylint over your code. 2.1.1 Definitionpylint is a tool for finding bugs and style problems in Python sourcecode. It finds problems that are typically caught by a compiler for less dynamiclanguages like C and C++. Because of the dynamic nature of Python, somewarnings may be incorrect; however, spurious warnings should be fairlyinfrequent. 2.1.2 ProsCatches easy-to-miss errors like typos, using-vars-before-assignment, etc. 2.1.3 Conspylint isn’t perfect. To take advantage of it, we’ll need to sometimes: a)Write around it b) Suppress its warnings or c) Improve it. 2.1.4 DecisionMake sure you run pylint on your code. Suppress warnings if they are inappropriate so that other issues are not hidden.To suppress warnings, you can set a line-level comment: 1dict = 'something awful' # Bad Idea... pylint: disable=redefined-builtin pylint warnings are each identified by symbolic name (empty-docstring)Google-specific warnings start with g-. If the reason for the suppression is not clear from the symbolic name, add anexplanation. Suppressing in this way has the advantage that we can easily search forsuppressions and revisit them. You can get a list of pylint warnings by doing: 1pylint --list-msgs To get more information on a particular message, use: 1pylint --help-msg=C6409 Prefer pylint: disable to the deprecated older form pylint: disable-msg. Unused argument warnings can be suppressed by deleting the variables at thebeginning of the function. Always include a comment explaining why you aredeleting it. “Unused.” is sufficient. For example: 123def viking_cafe_order(spam, beans, eggs=None): del beans, eggs # Unused by vikings. return spam + spam + spam Other common forms of suppressing this warning include using ‘_‘ as theidentifier for the unused argument, prefixing the argument name with‘unused_‘, or assigning them to ‘_‘. These forms are allowed but no longerencouraged. The first two break callers that pass arguments by name, while thelast does not enforce that the arguments are actually unused. &lt;/a&gt; 2.2 ImportsUse import statements for packages and modules only, not for individualclasses or functions. Note that there is an explicit exemption for imports fromthe typing module. 2.2.1 DefinitionReusability mechanism for sharing code from one module to another. 2.2.2 ProsThe namespace management convention is simple. The source of each identifier isindicated in a consistent way; x.Obj says that object Obj is defined inmodule x. 2.2.3 ConsModule names can still collide. Some module names are inconveniently long. 2.2.4 Decision Use import x for importing packages and modules. Use from x import y where x is the package prefix and y is the modulename with no prefix. Use from x import y as z if two modules named y are to be imported or ify is an inconveniently long name. Use import y as z only when z is a standard abbreviation (e.g., np fornumpy). For example the module sound.effects.echo may be imported as follows: 123from sound.effects import echo...echo.EchoFilter(input, output, delay=0.7, atten=4) Do not use relative names in imports. Even if the module is in the same package,use the full package name. This helps prevent unintentionally importing apackage twice. Imports from the typing module are exempt from this rule. &lt;/a&gt; 2.3 PackagesImport each module using the full pathname location of the module. 2.3.1 ProsAvoids conflicts in module names or incorrect imports due to the module searchpath not being what the author expected. Makes it easier to find modules. 2.3.2 ConsMakes it harder to deploy code because you have to replicate the packagehierarchy. Not really a problem with modern deployment mechanisms. 2.3.3 DecisionAll new code should import each module by its full package name. Imports should be as follows: Yes: 12345# Reference absl.flags in code with the complete name (verbose).import absl.flagsfrom doctor.who import jodieFLAGS = absl.flags.FLAGS 12345# Reference flags in code with just the module name (common).from absl import flagsfrom doctor.who import jodieFLAGS = flags.FLAGS No: _(assume this file lives in doctor/who/ where jodie.py also exists)_ 1234# Unclear what module the author wanted and what will be imported. The actual# import behavior depends on external factors controlling sys.path.# Which possible jodie module did the author intend to import?import jodie The directory the main binary is located in should not be assumed to be insys.path despite that happening in some environments. This being the case,code should assume that import jodie refers to a third party or top levelpackage named jodie, not a local jodie.py. &lt;/a&gt; 2.4 ExceptionsExceptions are allowed but must be used carefully. 2.4.1 DefinitionExceptions are a means of breaking out of the normal flow of control of a codeblock to handle errors or other exceptional conditions. 2.4.2 ProsThe control flow of normal operation code is not cluttered by error-handlingcode. It also allows the control flow to skip multiple frames when a certaincondition occurs, e.g., returning from N nested functions in one step instead ofhaving to carry-through error codes. 2.4.3 ConsMay cause the control flow to be confusing. Easy to miss error cases when makinglibrary calls. 2.4.4 DecisionExceptions must follow certain conditions: Raise exceptions like this: raise MyError(&#39;Error message&#39;) or raise MyError(). Do not use the two-argument form (raise MyError, &#39;Error message&#39;). Make use of built-in exception classes when it makes sense. For example,raise a ValueError if you were passed a negative number but were expectinga positive one. Do not use assert statements for validating argumentvalues of a public API. assert is used to ensure internal correctness, notto enforce correct usage nor to indicate that some unexpected eventoccurred. If an exception is desired in the latter cases, use a raisestatement. For example: 12345678910111213141516171819Yes: def connect_to_next_port(self, minimum): """Connects to the next available port. Args: minimum: A port value greater or equal to 1024. Raises: ValueError: If the minimum port specified is less than 1024. ConnectionError: If no available port is found. Returns: The new minimum port. """ if minimum &lt; 1024: raise ValueError('Minimum port must be at least 1024, not %d.' % (minimum,)) port = self._find_next_open_port(minimum) if not port: raise ConnectionError('Could not connect to service on %d or higher.' % (minimum,)) assert port &gt;= minimum, 'Unexpected port %d when minimum was %d.' % (port, minimum) return port 12345678910111213No: def connect_to_next_port(self, minimum): """Connects to the next available port. Args: minimum: A port value greater or equal to 1024. Returns: The new minimum port. """ assert minimum &gt;= 1024, 'Minimum port must be at least 1024.' port = self._find_next_open_port(minimum) assert port is not None return port Libraries or packages may define their own exceptions. When doing so theymust inherit from an existing exception class. Exception names should end inError and should not introduce stutter (foo.FooError). Never use catch-all except: statements, or catch Exception orStandardError, unless you are re-raising the exception or in the outermostblock in your thread (and printing an error message). Python is verytolerant in this regard and except: will really catch everything includingmisspelled names, sys.exit() calls, Ctrl+C interrupts, unittest failures andall kinds of other exceptions that you simply don’t want to catch. Minimize the amount of code in a try/except block. The larger the bodyof the try, the more likely that an exception will be raised by a line ofcode that you didn’t expect to raise an exception. In those cases, thetry/except block hides a real error. Use the finally clause to execute code whether or not an exception israised in the try block. This is often useful for cleanup, i.e., closing afile. When capturing an exception, use as rather than a comma. For example: 1234try: raise Error()except Error as error: pass &lt;/a&gt; 2.5 Global variablesAvoid global variables. 2.5.1 DefinitionVariables that are declared at the module level or as class attributes. 2.5.2 ProsOccasionally useful. 2.5.3 ConsHas the potential to change module behavior during the import, becauseassignments to global variables are done when the module is first imported. 2.5.4 DecisionAvoid global variables. While they are technically variables, module-level constants are permitted andencouraged. For example: MAX_HOLY_HANDGRENADE_COUNT = 3. Constants must benamed using all caps with underscores. See Naming below. If needed, globals should be declared at the module level and made internal tothe module by prepending an _ to the name. External access must be donethrough public module-level functions. See Naming below. &lt;/a&gt; 2.6 Nested/Local/Inner Classes and FunctionsNested local functions or classes are fine when used to close over a localvariable. Inner classes are fine. 2.6.1 DefinitionA class can be defined inside of a method, function, or class. A function can bedefined inside a method or function. Nested functions have read-only access tovariables defined in enclosing scopes. 2.6.2 ProsAllows definition of utility classes and functions that are only used inside ofa very limited scope. VeryADT-y.Commonly used for implementing decorators. 2.6.3 ConsInstances of nested or local classes cannot be pickled. Nested functions andclasses cannot be directly tested. Nesting can make your outer function longerand less readable. 2.6.4 DecisionThey are fine with some caveats. Avoid nested functions or classes except whenclosing over a local value. Do not nest a function just to hide it from usersof a module. Instead, prefix its name with an _ at the module level so that itcan still be accessed by tests. &lt;/a&gt; 2.7 Comprehensions &amp; Generator ExpressionsOkay to use for simple cases. 2.7.1 DefinitionList, Dict, and Set comprehensions as well as generator expressions provide aconcise and efficient way to create container types and iterators withoutresorting to the use of traditional loops, map(), filter(), or lambda. 2.7.2 ProsSimple comprehensions can be clearer and simpler than other dict, list, or setcreation techniques. Generator expressions can be very efficient, since theyavoid the creation of a list entirely. 2.7.3 ConsComplicated comprehensions or generator expressions can be hard to read. 2.7.4 DecisionOkay to use for simple cases. Each portion must fit on one line: mappingexpression, for clause, filter expression. Multiple for clauses or filterexpressions are not permitted. Use loops instead when things get morecomplicated. 12345678910111213141516171819202122232425262728293031Yes: result = [mapping_expr for value in iterable if filter_expr] result = [&#123;'key': value&#125; for value in iterable if a_long_filter_expression(value)] result = [complicated_transform(x) for x in iterable if predicate(x)] descriptive_name = [ transform(&#123;'key': key, 'value': value&#125;, color='black') for key, value in generate_iterable(some_input) if complicated_condition_is_met(key, value) ] result = [] for x in range(10): for y in range(5): if x * y &gt; 10: result.append((x, y)) return &#123;x: complicated_transform(x) for x in long_generator_function(parameter) if x is not None&#125; squares_generator = (x**2 for x in range(10)) unique_names = &#123;user.name for user in users if user is not None&#125; eat(jelly_bean for jelly_bean in jelly_beans if jelly_bean.color == 'black') 12345678910111213No: result = [complicated_transform( x, some_argument=x+1) for x in iterable if predicate(x)] result = [(x, y) for x in range(10) for y in range(5) if x * y &gt; 10] return ((x, y, z) for x in xrange(5) for y in xrange(5) if x != y for z in xrange(5) if y != z) &lt;/a&gt; 2.8 Default Iterators and OperatorsUse default iterators and operators for types that support them, like lists,dictionaries, and files. 2.8.1 DefinitionContainer types, like dictionaries and lists, define default iterators andmembership test operators (“in” and “not in”). 2.8.2 ProsThe default iterators and operators are simple and efficient. They express theoperation directly, without extra method calls. A function that uses defaultoperators is generic. It can be used with any type that supports the operation. 2.8.3 ConsYou can’t tell the type of objects by reading the method names (e.g. has_key()means a dictionary). This is also an advantage. 2.8.4 DecisionUse default iterators and operators for types that support them, like lists,dictionaries, and files. The built-in types define iterator methods, too. Preferthese methods to methods that return lists, except that you should not mutate acontainer while iterating over it. Never use Python 2 specific iterationmethods such as dict.iter*() unless necessary. 123456Yes: for key in adict: ... if key not in adict: ... if obj in alist: ... for line in afile: ... for k, v in adict.items(): ... for k, v in six.iteritems(adict): ... 1234No: for key in adict.keys(): ... if not adict.has_key(key): ... for line in afile.readlines(): ... for k, v in dict.iteritems(): ... &lt;/a&gt; 2.9 GeneratorsUse generators as needed. 2.9.1 DefinitionA generator function returns an iterator that yields a value each time itexecutes a yield statement. After it yields a value, the runtime state of thegenerator function is suspended until the next value is needed. 2.9.2 ProsSimpler code, because the state of local variables and control flow arepreserved for each call. A generator uses less memory than a function thatcreates an entire list of values at once. 2.9.3 ConsNone. 2.9.4 DecisionFine. Use “Yields:” rather than “Returns:” in the docstring for generatorfunctions. &lt;/a&gt; 2.10 Lambda FunctionsOkay for one-liners. 2.10.1 DefinitionLambdas define anonymous functions in an expression, as opposed to a statement.They are often used to define callbacks or operators for higher-order functionslike map() and filter(). 2.10.2 ProsConvenient. 2.10.3 ConsHarder to read and debug than local functions. The lack of names means stacktraces are more difficult to understand. Expressiveness is limited because thefunction may only contain an expression. 2.10.4 DecisionOkay to use them for one-liners. If the code inside the lambda function islonger than 60-80 chars, it’s probably better to define it as a regular nestedfunction. For common operations like multiplication, use the functions from the operatormodule instead of lambda functions. For example, prefer operator.mul tolambda x, y: x * y. &lt;/a&gt; 2.11 Conditional ExpressionsOkay for one-liners. 2.11.1 DefinitionConditional expressions (sometimes called a “ternary operator”) are mechanismsthat provide a shorter syntax for if statements. For example:x = 1 if cond else 2. 2.11.2 ProsShorter and more convenient than an if statement. 2.11.3 ConsMay be harder to read than an if statement. The condition may be difficult tolocate if the expression is long. 2.11.4 DecisionOkay to use for one-liners. In other cases prefer to use a complete ifstatement. &lt;/a&gt; 2.12 Default Argument ValuesOkay in most cases. 2.12.1 DefinitionYou can specify values for variables at the end of a function’s parameter list,e.g., def foo(a, b=0):. If foo is called with only one argument,b is set to 0. If it is called with two arguments, b has the value of thesecond argument. 2.12.2 ProsOften you have a function that uses lots of default values, but-rarely-you wantto override the defaults. Default argument values provide an easy way to dothis, without having to define lots of functions for the rare exceptions. Also,Python does not support overloaded methods/functions and default arguments arean easy way of “faking” the overloading behavior. 2.12.3 ConsDefault arguments are evaluated once at module load time. This may causeproblems if the argument is a mutable object such as a list or a dictionary. Ifthe function modifies the object (e.g., by appending an item to a list), thedefault value is modified. 2.12.4 DecisionOkay to use with the following caveat: Do not use mutable objects as default values in the function or methoddefinition. 12345678Yes: def foo(a, b=None): if b is None: b = []Yes: def foo(a, b: Optional[Sequence] = None): if b is None: b = []Yes: def foo(a, b: Sequence = ()): # Empty tuple OK since tuples are immutable ... 123456No: def foo(a, b=[]): ...No: def foo(a, b=time.time()): # The time the module was loaded??? ...No: def foo(a, b=FLAGS.my_thing): # sys.argv has not yet been parsed... ... &lt;/a&gt; 2.13 PropertiesUse properties for accessing or setting data where you would normally have usedsimple, lightweight accessor or setter methods. 2.13.1 DefinitionA way to wrap method calls for getting and setting an attribute as a standardattribute access when the computation is lightweight. 2.13.2 ProsReadability is increased by eliminating explicit get and set method calls forsimple attribute access. Allows calculations to be lazy. Considered the Pythonicway to maintain the interface of a class. In terms of performance, allowingproperties bypasses needing trivial accessor methods when a direct variableaccess is reasonable. This also allows accessor methods to be added in thefuture without breaking the interface. 2.13.3 ConsMust inherit from object in Python 2. Can hide side-effects much like operatoroverloading. Can be confusing for subclasses. 2.13.4 DecisionUse properties in new code to access or set data where you would normally haveused simple, lightweight accessor or setter methods. Properties should becreated with the @property decorator. Inheritance with properties can be non-obvious if the property itself is notoverridden. Thus one must make sure that accessor methods are called indirectlyto ensure methods overridden in subclasses are called by the property (using theTemplate Method DP). 1234567891011121314151617181920212223242526272829303132333435363738394041Yes: import math class Square(object): """A square with two properties: a writable area and a read-only perimeter. To use: &gt;&gt;&gt; sq = Square(3) &gt;&gt;&gt; sq.area 9 &gt;&gt;&gt; sq.perimeter 12 &gt;&gt;&gt; sq.area = 16 &gt;&gt;&gt; sq.side 4 &gt;&gt;&gt; sq.perimeter 16 """ def __init__(self, side): self.side = side @property def area(self): """Gets or sets the area of the square.""" return self._get_area() @area.setter def area(self, area): return self._set_area(area) def _get_area(self): """Indirect accessor to calculate the 'area' property.""" return self.side ** 2 def _set_area(self, area): """Indirect setter to set the 'area' property.""" self.side = math.sqrt(area) @property def perimeter(self): return self.side * 4 &lt;/a&gt; 2.14 True/False evaluationsUse the “implicit” false if at all possible. 2.14.1 DefinitionPython evaluates certain values as False when in a boolean context. A quick“rule of thumb” is that all “empty” values are considered false, so0, None, [], {}, &#39;&#39; all evaluate as false in a boolean context. 2.14.2 ProsConditions using Python booleans are easier to read and less error-prone. Inmost cases, they’re also faster. 2.14.3 ConsMay look strange to C/C++ developers. 2.14.4 DecisionUse the “implicit” false if at all possible, e.g., if foo: rather thanif foo != []:. There are a few caveats that you should keep in mind though: Never use == or != to compare singletons like None. Use is oris not. Beware of writing if x: when you really mean if x is not None:-e.g.,when testing whether a variable or argument that defaults to None was setto some other value. The other value might be a value that’s false in aboolean context! Never compare a boolean variable to False using ==. Use if not x:instead. If you need to distinguish False from None then chain theexpressions, such as if not x and x is not None:. For sequences (strings, lists, tuples), use the fact that empty sequencesare false, so if seq: and if not seq: are preferable to if len(seq):and if not len(seq): respectively. When handling integers, implicit false may involve more risk than benefit(i.e., accidentally handling None as 0). You may compare a value which isknown to be an integer (and is not the result of len()) against theinteger 0. 123456789101112Yes: if not users: print('no users') if foo == 0: self.handle_zero() if i % 10 == 0: self.handle_multiple_of_ten() def f(x=None): if x is None: x = [] 1234567891011No: if len(users) == 0: print('no users') if foo is not None and not foo: self.handle_zero() if not i % 10: self.handle_multiple_of_ten() def f(x=None): x = x or [] Note that &#39;0&#39; (i.e., 0 as string) evaluates to true. &lt;/a&gt; 2.15 Deprecated Language FeaturesUse string methods instead of the string module where possible. Use functioncall syntax instead of apply. Use list comprehensions and for loops insteadof filter and map when the function argument would have been an inlinedlambda anyway. Use for loops instead of reduce. 2.15.1 DefinitionCurrent versions of Python provide alternative constructs that people findgenerally preferable. 2.15.2 DecisionWe do not use any Python version which does not support these features, so thereis no reason not to use the new styles. 1234567Yes: words = foo.split(':') [x[1] for x in my_list if x[2] == 5] map(math.sqrt, data) # Ok. No inlined lambda expression. fn(*args, **kwargs) 12345No: words = string.split(foo, ':') map(lambda x: x[1], filter(lambda x: x[2] == 5, my_list)) apply(fn, args, kwargs) &lt;/a&gt; 2.16 Lexical ScopingOkay to use. 2.16.1 DefinitionA nested Python function can refer to variables defined in enclosing functions,but can not assign to them. Variable bindings are resolved using lexicalscoping, that is, based on the static program text. Any assignment to a name ina block will cause Python to treat all references to that name as a localvariable, even if the use precedes the assignment. If a global declarationoccurs, the name is treated as a global variable. An example of the use of this feature is: 123456def get_adder(summand1): """Returns a function that adds numbers to a given number.""" def adder(summand2): return summand1 + summand2 return adder 2.16.2 ProsOften results in clearer, more elegant code. Especially comforting toexperienced Lisp and Scheme (and Haskell and ML and …) programmers. 2.16.3 ConsCan lead to confusing bugs. Such as this example based onPEP-0227: 12345678910i = 4def foo(x): def bar(): print(i, end='') # ... # A bunch of code here # ... for i in x: # Ah, i *is* local to foo, so this is what bar sees print(i, end='') bar() So foo([1, 2, 3]) will print 1 2 3 3, not 1 2 3 4. 2.16.4 DecisionOkay to use. &lt;/a&gt; 2.17 Function and Method DecoratorsUse decorators judiciously when there is a clear advantage. Avoid@staticmethod and limit use of @classmethod. 2.17.1 DefinitionDecorators for Functions andMethods(a.k.a “the @ notation”). One common decorator is @property, used forconverting ordinary methods into dynamically computed attributes. However, thedecorator syntax allows for user-defined decorators as well. Specifically, forsome function my_decorator, this: 1234class C(object): @my_decorator def method(self): # method body ... is equivalent to: 1234class C(object): def method(self): # method body ... method = my_decorator(method) 2.17.2 ProsElegantly specifies some transformation on a method; the transformation mighteliminate some repetitive code, enforce invariants, etc. 2.17.3 ConsDecorators can perform arbitrary operations on a function’s arguments or returnvalues, resulting in surprising implicit behavior. Additionally, decoratorsexecute at import time. Failures in decorator code are pretty much impossible torecover from. 2.17.4 DecisionUse decorators judiciously when there is a clear advantage. Decorators shouldfollow the same import and naming guidelines as functions. Decorator pydocshould clearly state that the function is a decorator. Write unit tests fordecorators. Avoid external dependencies in the decorator itself (e.g. don’t rely on files,sockets, database connections, etc.), since they might not be available when thedecorator runs (at import time, perhaps from pydoc or other tools). Adecorator that is called with valid parameters should (as much as possible) beguaranteed to succeed in all cases. Decorators are a special case of “top level code” - see main formore discussion. Never use @staticmethod unless forced to in order to integrate with an APIdefined in an existing library. Write a module level function instead. Use @classmethod only when writing a named constructor or a class-specificroutine that modifies necessary global state such as a process-wide cache. &lt;/a&gt; 2.18 ThreadingDo not rely on the atomicity of built-in types. While Python’s built-in data types such as dictionaries appear to have atomicoperations, there are corner cases where they aren’t atomic (e.g. if __hash__or __eq__ are implemented as Python methods) and their atomicity should not berelied upon. Neither should you rely on atomic variable assignment (since thisin turn depends on dictionaries). Use the Queue module’s Queue data type as the preferred way to communicatedata between threads. Otherwise, use the threading module and its lockingprimitives. Learn about the proper use of condition variables so you can usethreading.Condition instead of using lower-level locks. &lt;/a&gt; 2.19 Power FeaturesAvoid these features. 2.19.1 DefinitionPython is an extremely flexible language and gives you many fancy features suchas custom metaclasses, access to bytecode, on-the-fly compilation, dynamicinheritance, object reparenting, import hacks, reflection (e.g. some uses ofgetattr()), modification of system internals, etc. 2.19.2 ProsThese are powerful language features. They can make your code more compact. 2.19.3 ConsIt’s very tempting to use these “cool” features when they’re not absolutelynecessary. It’s harder to read, understand, and debug code that’s using unusualfeatures underneath. It doesn’t seem that way at first (to the original author),but when revisiting the code, it tends to be more difficult than code that islonger but is straightforward. 2.19.4 DecisionAvoid these features in your code. Standard library modules and classes that internally use these features are okayto use (for example, abc.ABCMeta, collections.namedtuple, dataclasses,and enum). &lt;/a&gt; 2.20 Modern Python: Python 3 and from __future__ importsPython 3 is here! While not every project is ready touse it yet, all code should be written to be 3 compatible (and tested under3 when possible). 2.20.1 DefinitionPython 3 is a significant change in the Python language. While existing code isoften written with 2.7 in mind, there are some simple things to do to make codemore explicit about its intentions and thus better prepared for use under Python3 without modification. 2.20.2 ProsCode written with Python 3 in mind is more explicit and easier to get runningunder Python 3 once all of the dependencies of your project are ready. 2.20.3 ConsSome people find the additional boilerplate to be ugly. It’s unusual to addimports to a module that doesn’t actually require the features added by theimport. 2.20.4 Decisionfrom __future__ importsUse of from __future__ import statements is encouraged. All new code shouldcontain the following and existing code should be updated to be compatible whenpossible: 123from __future__ import absolute_importfrom __future__ import divisionfrom __future__ import print_function If you are not already familiar with those, read up on each here: absoluteimports, new / divisionbehavior, and the printfunction. Please don’t omit or remove these imports, even if they’re not currently usedin the module. It is better to always have the future imports in all filesso that they are not forgotten during later edits when someone starts usingsuch a feature. There are other from __future__ import statements. Use them as you see fit. Wedo not include unicode_literals in our recommendations as it is not a clearwin due to implicit default codec conversion consequences it introduces in manyplaces within Python 2.7. Most code is better off with explicit use of b&#39;&#39; andu&#39;&#39; bytes and unicode string literals as necessary. The six, future, or past libraries.When your project needs to actively support use under both Python 2 and 3, useof these libraries is encouraged as you see fit. They exist to make your codecleaner and life easier. &lt;/a&gt; 2.21 Type Annotated CodeYou can annotate Python 3 code with type hints according toPEP-484, and type-check the code atbuild time with a type checking tool likepytype. Type annotations can be in the source or in a stub pyifile. Whenever possible,annotations should be in the source. Use pyi files for third-party or extensionmodules. 2.21.1 DefinitionType annotations (or “type hints”) are for function or method arguments andreturn values: 1def func(a: int) -&gt; List[int]: You can also declare the type of a variable using a special comment: 1a = SomeFunc() # type: SomeType 2.21.2 ProsType annotations improve the readability and maintainability of your code. Thetype checker will convert many runtime errors to build-time errors, and reduceyour ability to use Power Features. 2.21.3 ConsYou will have to keep the type declarations up to date. You might see type errors that you think are valid code. Use of a type checkermay reduce your ability to use Power Features. 2.21.4 DecisionThis highly depends on the complexity of your project. Give it a try. &lt;/a&gt; 3 Python Style Rules&lt;/a&gt; 3.1 SemicolonsDo not terminate your lines with semicolons, and do not use semicolons to puttwo statements on the same line. &lt;/a&gt; 3.2 Line lengthMaximum line length is 80 characters. Exceptions: Long import statements. URLs, pathnames, or long flags in comments. Long string module level constants not containing whitespace that would beinconvenient to split across lines such as URLs or pathnames. Pylint disable comments. (e.g.: # pylint: disable=invalid-name) Do not use backslash line continuation except for with statements requiringthree or more context managers. Make use of Python’s implicit line joining inside parentheses, brackets andbraces.If necessary, you can add an extra pair of parentheses around an expression. 12345Yes: foo_bar(self, width, height, color='black', design=None, x='foo', emphasis=None, highlight=0) if (width == 0 and height == 0 and color == 'red' and emphasis == 'strong'): When a literal string won’t fit on a single line, use parentheses for implicitline joining. 12x = ('This will build a very long long ' 'long long long long long long string') Within comments, put long URLs on their own line if necessary. 12Yes: # See details at # http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html 123No: # See details at # http://www.example.com/us/developer/documentation/api/content/\ # v2.0/csv_file_name_extension_full_specification.html It is permissible to use backslash continuation when defining a with statementwhose expressions span three or more lines. For two lines of expressions, use anested with statement: 1234Yes: with very_long_first_expression_function() as spam, \ very_long_second_expression_function() as beans, \ third_thing() as eggs: place_order(eggs, beans, spam, beans) 123No: with VeryLongFirstExpressionFunction() as spam, \ VeryLongSecondExpressionFunction() as beans: PlaceOrder(eggs, beans, spam, beans) 123Yes: with very_long_first_expression_function() as spam: with very_long_second_expression_function() as beans: place_order(beans, spam) Make note of the indentation of the elements in the line continuation examplesabove; see the indentation section for explanation. &lt;/a&gt; 3.3 ParenthesesUse parentheses sparingly. It is fine, though not required, to use parentheses around tuples. Do not usethem in return statements or conditional statements unless using parentheses forimplied line continuation or to indicate a tuple. 1234567891011121314Yes: if foo: bar() while x: x = bar() if x and y: bar() if not x: bar() # For a 1 item tuple the ()s are more visually obvious than the comma. onesie = (foo,) return foo return spam, beans return (spam, beans) for (x, y) in dict.items(): ... 12345No: if (x): bar() if not(x): bar() return (foo) &lt;/a&gt; 3.4 IndentationIndent your code blocks with 4 spaces. Never use tabs or mix tabs and spaces. In cases of implied line continuation,you should align wrapped elements either vertically, as per the examples in theline length section; or using a hanging indent of 4 spaces,in which case there should be nothing after the open parenthesis or bracket onthe first line. 123456789101112131415161718192021222324252627Yes: # Aligned with opening delimiter foo = long_function_name(var_one, var_two, var_three, var_four) meal = (spam, beans) # Aligned with opening delimiter in a dictionary foo = &#123; long_dictionary_key: value1 + value2, ... &#125; # 4-space hanging indent; nothing on first line foo = long_function_name( var_one, var_two, var_three, var_four) meal = ( spam, beans) # 4-space hanging indent in a dictionary foo = &#123; long_dictionary_key: long_dictionary_value, ... &#125; 1234567891011121314151617No: # Stuff on first line forbidden foo = long_function_name(var_one, var_two, var_three, var_four) meal = (spam, beans) # 2-space hanging indent forbidden foo = long_function_name( var_one, var_two, var_three, var_four) # No hanging indent in a dictionary foo = &#123; long_dictionary_key: long_dictionary_value, ... &#125; &lt;/a&gt; 3.4.1 Trailing commas in sequences of items?Trailing commas in sequences of items are recommended only when the closingcontainer token ], ), or } does not appear on the same line as the finalelement. The presence of a trailing comma is also used as a hint to our Pythoncode auto-formatter YAPF to direct it to auto-format the containerof items to one item per line when the , after the final element is present. 1234567Yes: golomb3 = [0, 1, 3]Yes: golomb4 = [ 0, 1, 4, 6, ] 123456No: golomb4 = [ 0, 1, 4, 6 ] &lt;/a&gt; 3.5 Blank LinesTwo blank lines between top-level definitions, be they function or classdefinitions. One blank line between method definitions and between the classline and the first method. No blank line following a def line. Use singleblank lines as you judge appropriate within functions or methods. &lt;/a&gt; 3.6 WhitespaceFollow standard typographic rules for the use of spaces around punctuation. No whitespace inside parentheses, brackets or braces. 1Yes: spam(ham[1], &#123;eggs: 2&#125;, []) 1No: spam( ham[ 1 ], &#123; eggs: 2 &#125;, [ ] ) No whitespace before a comma, semicolon, or colon. Do use whitespace after acomma, semicolon, or colon, except at the end of the line. 123Yes: if x == 4: print(x, y) x, y = y, x 123No: if x == 4 : print(x , y) x , y = y , x No whitespace before the open paren/bracket that starts an argument list,indexing or slicing. 1Yes: spam(1) 1No: spam (1) 1Yes: dict['key'] = list[index] 1No: dict ['key'] = list [index] Surround binary operators with a single space on either side for assignment(=), comparisons (==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not), andBooleans (and, or, not). Use your better judgment for the insertion of spacesaround arithmetic operators (+, -, *, /, //, %, **, @). 1Yes: x == 1 1No: x&lt;1 Never use spaces around = when passing keyword arguments or defining a defaultparameter value, with one exception: when a type annotation ispresent, _do_ use spaces around the = for the defaultparameter value. 12Yes: def complex(real, imag=0.0): return Magic(r=real, i=imag)Yes: def complex(real, imag: float = 0.0): return Magic(r=real, i=imag) 12No: def complex(real, imag = 0.0): return Magic(r = real, i = imag)No: def complex(real, imag: float=0.0): return Magic(r = real, i = imag) Don’t use spaces to vertically align tokens on consecutive lines, since itbecomes a maintenance burden (applies to :, #, =, etc.): 12345678Yes: foo = 1000 # comment long_name = 2 # comment that should not be aligned dictionary = &#123; 'foo': 1, 'long_name': 2, &#125; 12345678No: foo = 1000 # comment long_name = 2 # comment that should not be aligned dictionary = &#123; 'foo' : 1, 'long_name': 2, &#125; &lt;/a&gt; 3.7 Shebang LineMost .py files do not need to start with a #! line. Start the main file of aprogram with#!/usr/bin/python with an optional single digit 2 or 3 suffix perPEP-394. This line is used by the kernel to find the Python interpreter, but is ignoredby Python when importing modules. It is only necessary on a file that will beexecuted directly. &lt;/a&gt; 3.8 Comments and DocstringsBe sure to use the right style for module, function, method docstrings andinline comments. &lt;/a&gt; 3.8.1 DocstringsPython uses _docstrings_ to document code. A docstring is a string that is thefirst statement in a package, module, class or function. These strings can beextracted automatically through the __doc__ member of the object and are usedby pydoc.(Try running pydoc on your module to see how it looks.) Always use the threedouble-quote &quot;&quot;&quot; format for docstrings (per PEP257).A docstring should be organized as a summary line (one physical line) terminatedby a period, question mark, or exclamation point, followed by a blank line,followed by the rest of the docstring starting at the same cursor position asthe first quote of the first line. There are more formatting guidelines fordocstrings below. &lt;/a&gt; 3.8.2 ModulesEvery file should contain license boilerplate. Choose the appropriateboilerplate for the license used by the project (for example, Apache 2.0, BSD,LGPL, GPL) &lt;/a&gt; 3.8.3 Functions and MethodsIn this section, “function” means a method, function, or generator. A function must have a docstring, unless it meets all of the following criteria: not externally visible very short obvious A docstring should give enough information to write a call to the functionwithout reading the function’s code. The docstring should be descriptive(&quot;&quot;&quot;Fetches rows from a Bigtable.&quot;&quot;&quot;) rather than imperative(&quot;&quot;&quot;Fetch rows from a Bigtable.&quot;&quot;&quot;). A docstring should describe thefunction’s calling syntax and its semantics, not its implementation. For trickycode, comments alongside the code are more appropriate than using docstrings. A method that overrides a method from a base class may have a simple docstringsending the reader to its overridden method’s docstring, such as &quot;&quot;&quot;See base class.&quot;&quot;&quot;. The rationale is that there is no need to repeat in many placesdocumentation that is already present in the base method’s docstring. However,if the overriding method’s behavior is substantially different from theoverridden method, or details need to be provided (e.g., documenting additionalside effects), a docstring with at least those differences is required on theoverriding method. Certain aspects of a function should be documented in special sections, listedbelow. Each section begins with a heading line, which ends with a colon.Sections should be indented two spaces, except for the heading. Args:: List each parameter by name. A description should follow the name, and beseparated by a colon and a space. If the description is too long to fit on asingle 80-character line, use a hanging indent of 2 or 4 spaces (beconsistent with the rest of the file).The description should include required type(s) if the code does not containa corresponding type annotation.If a function accepts *foo (variable length argument lists) and/or **bar(arbitrary keyword arguments), they should be listed as *foo and **bar. Returns: (or Yields: for generators): Describe the type and semantics of the return value. If the function onlyreturns None, this section is not required. It may also be omitted if thedocstring starts with Returns or Yields (e.g.&quot;&quot;&quot;Returns row from Bigtable as a tuple of strings.&quot;&quot;&quot;) and the openingsentence is sufficient to describe return value. Raises:: List all exceptions that are relevant to the interface. 1234567891011121314151617181920212223242526272829def fetch_bigtable_rows(big_table, keys, other_silly_variable=None): """Fetches rows from a Bigtable. Retrieves rows pertaining to the given keys from the Table instance represented by big_table. Silly things may happen if other_silly_variable is not None. Args: big_table: An open Bigtable Table instance. keys: A sequence of strings representing the key of each table row to fetch. other_silly_variable: Another optional variable, that has a much longer name than the other args, and which does nothing. Returns: A dict mapping keys to the corresponding table row data fetched. Each row is represented as a tuple of strings. For example: &#123;'Serak': ('Rigel VII', 'Preparer'), 'Zim': ('Irk', 'Invader'), 'Lrrr': ('Omicron Persei 8', 'Emperor')&#125; If a key from the keys argument is missing from the dictionary, then that row was not found in the table. Raises: IOError: An error occurred accessing the bigtable.Table object. """ &lt;/a&gt; 3.8.4 ClassesClasses should have a docstring below the class definition describing the class.If your class has public attributes, they should be documented here in anAttributes section and follow the same formatting as afunction’s Args section. 123456789101112131415161718class SampleClass(object): """Summary of class here. Longer class information.... Longer class information.... Attributes: likes_spam: A boolean indicating if we like SPAM or not. eggs: An integer count of the eggs we have laid. """ def __init__(self, likes_spam=False): """Inits SampleClass with blah.""" self.likes_spam = likes_spam self.eggs = 0 def public_method(self): """Performs operation blah.""" &lt;/a&gt; 3.8.5 Block and Inline CommentsThe final place to have comments is in tricky parts of the code. If you’re goingto have to explain it at the next codereview, you should comment itnow. Complicated operations get a few lines of comments before the operationscommence. Non-obvious ones get comments at the end of the line. 123456# We use a weighted dictionary search to find out where i is in# the array. We extrapolate position based on the largest num# in the array and the array size and then do binary search to# get the exact number.if i &amp; (i-1) == 0: # True if i is 0 or a power of 2. To improve legibility, these comments should be at least 2 spaces away from thecode. On the other hand, never describe the code. Assume the person reading the codeknows Python (though not what you’re trying to do) better than you do. 12# BAD COMMENT: Now go through the b array and make sure whenever i occurs# the next element is i+1 &lt;/a&gt; 3.8.6 Punctuation, Spelling and GrammarPay attention to punctuation, spelling, and grammar; it is easier to readwell-written comments than badly written ones. Comments should be as readable as narrative text, with proper capitalization andpunctuation. In many cases, complete sentences are more readable than sentencefragments. Shorter comments, such as comments at the end of a line of code, cansometimes be less formal, but you should be consistent with your style. Although it can be frustrating to have a code reviewer point out that you areusing a comma when you should be using a semicolon, it is very important thatsource code maintain a high level of clarity and readability. Properpunctuation, spelling, and grammar help with that goal. &lt;/a&gt; 3.9 ClassesIf a class inherits from no other base classes, explicitly inherit fromobject. This also applies to nested classes. 123456789101112Yes: class SampleClass(object): pass class OuterClass(object): class InnerClass(object): pass class ChildClass(ParentClass): """Explicitly inherits from another class already.""" 12345678No: class SampleClass: pass class OuterClass: class InnerClass: pass Inheriting from object is needed to make properties work properly in Python 2and can protect your code from potential incompatibility with Python 3. It alsodefines special methods that implement the default semantics of objectsincluding __new__, __init__, __delattr__, __getattribute__,__setattr__, __hash__, __repr__, and __str__. &lt;/a&gt; 3.10 StringsUse the format method or the % operator for formatting strings, even whenthe parameters are all strings. Use your best judgement to decide between +and % (or format) though. 123456Yes: x = a + b x = '%s, %s!' % (imperative, expletive) x = '&#123;&#125;, &#123;&#125;'.format(first, second) x = 'name: %s; score: %d' % (name, n) x = 'name: &#123;&#125;; score: &#123;&#125;'.format(name, n) x = f'name: &#123;name&#125;; score: &#123;n&#125;' # Python 3.6+ 1234No: x = '%s%s' % (a, b) # use + in this case x = '&#123;&#125;&#123;&#125;'.format(a, b) # use + in this case x = first + ', ' + second x = 'name: ' + name + '; score: ' + str(n) Avoid using the + and += operators to accumulate a string within a loop.Since strings are immutable, this creates unnecessary temporary objects andresults in quadratic rather than linear running time. Instead, add eachsubstring to a list and &#39;&#39;.join the list after the loop terminates (or, writeeach substring to a io.BytesIO buffer). 12345Yes: items = ['&lt;table&gt;'] for last_name, first_name in employee_list: items.append('&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;' % (last_name, first_name)) items.append('&lt;/table&gt;') employee_table = ''.join(items) 1234No: employee_table = '&lt;table&gt;' for last_name, first_name in employee_list: employee_table += '&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;' % (last_name, first_name) employee_table += '&lt;/table&gt;' Be consistent with your choice of string quote character within a file. Pick &#39;or &quot; and stick with it. It is okay to use the other quote character on astring to avoid the need to \\ escape within the string. gpylint enforcesthis. 1234Yes: Python('Why are you hiding your eyes?') Gollum("I'm scared of lint errors.") Narrator('"Good!" thought a happy Python reviewer.') 1234No: Python("Why are you hiding your eyes?") Gollum('The lint. It burns. It burns us.') Gollum("Always the great lint. Watching. Watching.") Prefer &quot;&quot;&quot; for multi-line strings rather than &#39;&#39;&#39;. Projects may choose touse &#39;&#39;&#39; for all non-docstring multi-line strings if and only if they also use&#39; for regular strings. Docstrings must use &quot;&quot;&quot; regardless. Note that it isoften cleaner to use implicit line joining since multi-line strings do not flowwith the indentation of the rest of the program: 123Yes:print("This is much nicer.\n" "Do it this way.\n") 1234 No: print("""This is pretty ugly.Don't do this.""") &lt;/a&gt; 3.11 Files and SocketsExplicitly close files and sockets when done with them. Leaving files, sockets or other file-like objects open unnecessarily has manydownsides: They may consume limited system resources, such as file descriptors. Codethat deals with many such objects may exhaust those resources unnecessarilyif they’re not returned to the system promptly after use. Holding files open may prevent other actions such as moving or deletingthem. Files and sockets that are shared throughout a program may inadvertently beread from or written to after logically being closed. If they are actuallyclosed, attempts to read or write from them will throw exceptions, makingthe problem known sooner. Furthermore, while files and sockets are automatically closed when the fileobject is destructed, tying the lifetime of the file object to the state of thefile is poor practice: There are no guarantees as to when the runtime will actually run the file’sdestructor. Different Python implementations use different memory managementtechniques, such as delayed Garbage Collection, which may increase theobject’s lifetime arbitrarily and indefinitely. Unexpected references to the file, e.g. in globals or exception tracebacks,may keep it around longer than intended. The preferred way to manage files is using the “with”statement: 123with open("hello.txt") as hello_file: for line in hello_file: print(line) For file-like objects that do not support the “with” statement, usecontextlib.closing(): 12345import contextlibwith contextlib.closing(urllib.urlopen("http://www.python.org/")) as front_page: for line in front_page: print(line) &lt;/a&gt; 3.12 TODO CommentsUse TODO comments for code that is temporary, a short-term solution, orgood-enough but not perfect. A TODO comment begins with the string TODO in all caps and a parenthesizedname, e-mail address, or other identifierof the person or issue with the best context about the problem. This is followedby an explanation of what there is to do. The purpose is to have a consistent TODO format that can be searched to findout how to get more details. A TODO is not a commitment that the personreferenced will fix the problem. Thus when you create aTODO, it is almost always your namethat is given. 12# TODO(kl@gmail.com): Use a "*" here for string repetition.# TODO(Zeke) Change this to use relations. If your TODO is of the form “At a future date do something” make sure that youeither include a very specific date (“Fix by November 2009”) or a very specificevent (“Remove this code when all clients can handle XML responses.”). &lt;/a&gt; 3.13 Imports formattingImports should be on separate lines. E.g.: 12Yes: import os import sys 1No: import os, sys Imports are always put at the top of the file, just after any module commentsand docstrings and before module globals and constants. Imports should begrouped from most generic to least generic: Python standard library imports. For example: 1import sys third-partymodule or package imports. For example: 1import tensorflow as tf Code repositorysub-package imports. For example: 1from otherproject.ai import mind Deprecated: application-specific imports that are part of the sametop levelsub-package as this file. For example: 1from myproject.backend.hgwells import time_machine You may find older Google Python Style code doing this, but it is no longer required. **New code is encouraged not to bother with this.** Simply treat application-specific sub-package imports the same as other sub-package imports. Within each grouping, imports should be sorted lexicographically, ignoring case,according to each module’s full package path. Code may optionally place a blankline between import sections. 1234567891011121314151617181920import collectionsimport queueimport sysfrom absl import appfrom absl import flagsimport bs4import cryptographyimport tensorflow as tffrom book.genres import scififrom myproject.backend.hgwells import time_machinefrom myproject.backend.state_machine import main_loopfrom otherproject.ai import bodyfrom otherproject.ai import mindfrom otherproject.ai import soul# Older style code may have these imports down here instead:#from myproject.backend.hgwells import time_machine#from myproject.backend.state_machine import main_loop &lt;/a&gt; 3.14 StatementsGenerally only one statement per line. However, you may put the result of a test on the same line as the test only ifthe entire statement fits on one line. In particular, you can never do so withtry/except since the try and except can’t both fit on the same line, andyou can only do so with an if if there is no else. 123Yes: if foo: bar(foo) 1234567891011No: if foo: bar(foo) else: baz(foo) try: bar(foo) except ValueError: baz(foo) try: bar(foo) except ValueError: baz(foo) &lt;/a&gt; 3.15 Access ControlIf an accessor function would be trivial, you should use public variablesinstead of accessor functions to avoid the extra cost of function calls inPython. When more functionality is added you can use property to keep thesyntax consistent. On the other hand, if access is more complex, or the cost of accessing thevariable is significant, you should use function calls (following theNaming guidelines) such as get_foo() andset_foo(). If the past behavior allowed access through a property, do notbind the new accessor functions to the property. Any code still attempting toaccess the variable by the old method should break visibly so they are madeaware of the change in complexity. &lt;/a&gt; 3.16 Namingmodule_name,package_name,ClassName,method_name,ExceptionName,function_name,GLOBAL_CONSTANT_NAME,global_var_name,instance_var_name,function_parameter_name,local_var_name. Function names, variable names, and filenames should be descriptive; eschewabbreviation. In particular, do not use abbreviations that are ambiguous orunfamiliar to readers outside your project, and do not abbreviate by deletingletters within a word. Always use a .py filename extension. Never use dashes. &lt;/a&gt; 3.16.1 Names to Avoid single character names except for counters or iterators. You may use “e” asan exception identifier in try/except statements. dashes (-) in any package/module name __double_leading_and_trailing_underscore__ names (reserved by Python) &lt;/a&gt; 3.16.2 Naming Convention “Internal” means internal to a module, or protected or private within aclass. Prepending a single underscore (_) has some support for protecting modulevariables and functions (not included with from module import *). Whileprepending a double underscore (__ aka “dunder”) to an instance variableor method effectively makes the variable or method private to its class(using name mangling) we discourage its use as it impacts readability andtestability and isn’t really private. Place related classes and top-level functions together in amodule.Unlike Java, there is no need to limit yourself to one class per module. Use CapWords for class names, but lower_with_under.py for module names.Although there are some old modules named CapWords.py, this is nowdiscouraged because it’s confusing when the module happens to be named aftera class. (“wait — did I write import StringIO or from StringIO import StringIO?”) Underscores may appear in unittest method names starting with test toseparate logical components of the name, even if those components useCapWords. One possible pattern is test&lt;MethodUnderTest&gt;_&lt;state&gt;; forexample testPop_EmptyStack is okay. There is no One Correct Way to nametest methods. &lt;/a&gt; 3.16.3 File NamingPython filenames must have a .py extension and must not contain dashes (-).This allows them to be imported and unittested. If you want an executable to beaccessible without the extension, use a symbolic link or a simple bash wrappercontaining exec &quot;$0.py&quot; &quot;$@&quot;. &lt;/a&gt; 3.16.4 Guidelines derived from Guido’s Recommendations Type Public Internal Packages lower_with_under Modules lower_with_under _lower_with_under Classes CapWords _CapWords Exceptions CapWords Functions lower_with_under() _lower_with_under() Global/Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER Global/Class Variables lower_with_under _lower_with_under Instance Variables lower_with_under _lower_with_under (protected) Method Names lower_with_under() _lower_with_under() (protected) Function/Method Parameters lower_with_under Local Variables lower_with_under While Python supports making things private by using a leading double underscore__ (aka. “dunder”) prefix on a name, this is discouraged. Prefer the use of asingle underscore. They are easier to type, read, and to access from smallunittests. Lint warnings take care of invalid access to protected members. &lt;/a&gt; 3.17 MainEven a file meant to be used as an executable should be importable and a mereimport should not have the side effect of executing the program’s mainfunctionality. The main functionality should be in a main() function. In Python, pydoc as well as unit tests require modules to be importable. Yourcode should always check if __name__ == &#39;__main__&#39; before executing your mainprogram so that the main program is not executed when the module is imported. 12345def main(): ...if __name__ == '__main__': main() All code at the top level will be executed when the module is imported. Becareful not to call functions, create objects, or perform other operations thatshould not be executed when the file is being pydoced. &lt;/a&gt; 3.18 Function lengthPrefer small and focused functions. We recognize that long functions are sometimes appropriate, so no hard limit isplaced on function length. If a function exceeds about 40 lines, think aboutwhether it can be broken up without harming the structure of the program. Even if your long function works perfectly now, someone modifying it in a fewmonths may add new behavior. This could result in bugs that are hard to find.Keeping your functions short and simple makes it easier for other people to readand modify your code. You could find long and complicated functions when working withsome code. Do not be intimidated by modifying existing code: if working with sucha function proves to be difficult, you find that errors are hard to debug, oryou want to use a piece of it in several different contexts, consider breakingup the function into smaller and more manageable pieces. &lt;/a&gt; 3.19 Type Annotations&lt;/a&gt; 3.19.1 General Rules Familiarize yourself with PEP-484. In methods, only annotate self, or cls if it is necessary for proper typeinformation. e.g., @classmethod def create(cls: Type[T]) -&gt; T: return cls() If any other variable or a returned type should not be expressed, use Any. You are not required to annotate all the functions in a module. At least annotate your public APIs. Use judgment to get to a good balance between safety and clarity on theone hand, and flexibility on the other. Annotate code that is prone to type-related errors (previous bugs orcomplexity). Annotate code that is hard to understand. Annotate code as it becomes stable from a types perspective. In manycases, you can annotate all the functions in mature code without losingtoo much flexibility. &lt;/a&gt; 3.19.2 Line BreakingTry to follow the existing indentation rules. After annotating, many function signatures will become “one parameter per line”. 12345def my_method(self, first_var: int, second_var: Foo, third_var: Optional[Bar]) -&gt; int: ... Always prefer breaking between variables, and not for example between variablenames and type annotations. However, if everything fits on the same line,go for it. 12def my_method(self, first_var: int) -&gt; int: ... If the combination of the function name, the last parameter, and the return typeis too long, indent by 4 in a new line. 123def my_method( self, first_var: int) -&gt; Tuple[MyLongType1, MyLongType1]: ... When the return type does not fit on the same line as the last parameter, thepreferred way is to indent the parameters by 4 on a new line and align theclosing parenthesis with the def. 12345Yes:def my_method( self, **kw_args: Optional[MyLongType]) -&gt; Dict[OtherLongType, MyLongType]: ... pylint allows you to move the closing parenthesis to a new line and alignwith the opening one, but this is less readable. 12345No:def my_method(self, **kw_args: Optional[MyLongType] ) -&gt; Dict[OtherLongType, MyLongType]: ... As in the examples above, prefer not to break types. However, sometimes they aretoo long to be on a single line (try to keep sub-types unbroken). 1234567def my_method( self, first_var: Tuple[List[MyLongType1], List[MyLongType2]], second_var: List[Dict[ MyLongType3, MyLongType4]]) -&gt; None: ... If a single name and type is too long, consider using analias for the type. The last resort is to break after thecolon and indent by 4. 123456Yes:def my_function( long_variable_name: long_module_name.LongTypeName,) -&gt; None: ... 123456No:def my_function( long_variable_name: long_module_name. LongTypeName,) -&gt; None: ... &lt;/a&gt; 3.19.3 Forward DeclarationsIf you need to use a class name from the same module that is not yet defined —for example, if you need the class inside the class declaration, or if you use aclass that is defined below — use a string for the class name. 1234class MyClass(object): def __init__(self, stack: List["MyClass"]) -&gt; None: &lt;/a&gt; 3.19.4 Default ValuesAs perPEP-008, usespaces around the = _only_ for arguments that have both a type annotation anda default value. 123Yes:def func(a: int = 0) -&gt; int: ... 123No:def func(a:int=0) -&gt; int: ... &lt;/a&gt; 3.19.5 NoneTypeIn the Python type system, NoneType is a “first class” type, and for typingpurposes, None is an alias for NoneType. If an argument can be None, ithas to be declared! You can use Union, but if there is only one other type,use Optional. Use explicit Optional instead of implicit Optional. Earlier versions of PEP484 allowed a: Text = None to be interpretted as a: Optional[Text] = None,but that is no longer the preferred behavior. 12345Yes:def func(a: Optional[Text], b: Optional[Text] = None) -&gt; Text: ...def multiple_nullable_union(a: Union[None, Text, int]) -&gt; Text ... 12345No:def nullable_union(a: Union[None, Text]) -&gt; Text: ...def implicit_optional(a: Text = None) -&gt; Text: ... &lt;/a&gt; 3.19.6 Type AliasesYou can declare aliases of complex types. The name of an alias should beCapWorded. If the alias is used only in this module, it should be_Private. For example, if the name of module together with the type is too long: 12_ShortName = module_with_long_name.TypeWithLongNameComplexMap = Mapping[Text, List[Tuple[int, int]]] Other examples are complex nested types and multiple return variables from afunction (as a tuple). &lt;/a&gt; 3.19.7 Ignoring TypesYou can disable type checking on a line with the special comment# type: ignore. pytype has a disable option for specific errors (similar to lint): 1# pytype: disable=attribute-error &lt;/a&gt; 3.19.8 Typing internal variablesIf an internal variable has a type that is hard or impossible to infer, you cansupply it as a special comment: 1a = SomeUndecoratedFunction() # type: Foo &lt;/a&gt; 3.19.9 Tuples vs ListsUnlike Lists, which can only have a single type, Tuples can have either a singlerepeated type or a set number of elements with different types. The latter iscommonly used as return type from a function. 123a = [1, 2, 3] # type: List[int]b = (1, 2, 3) # type: Tuple[int, ...]c = (1, "2", 3.5) # type: Tuple[int, Text, float] &lt;/a&gt; 3.19.10 TypeVarThe Python type system hasgenerics. The factoryfunction TypeVar is a common way to use them. Example: 12345from typing import List, TypeVarT = TypeVar("T")...def next(l: List[T]) -&gt; T: return l.pop() A TypeVar can be constrained: 123AddableType = TypeVar("AddableType", int, float, Text)def add(a: AddableType, b: AddableType) -&gt; AddableType: return a + b A common predefined type variable in the typing module is AnyStr. Use it formultiple annotations that can be bytes or unicode and must all be the sametype. 12345from typing import AnyStrdef check_length(x: AnyStr) -&gt; AnyStr: if len(x) &lt;= 42: return x raise ValueError() &lt;/a&gt; 3.19.11 String typesThe proper type for annotating strings depends on what versions of Python thecode is intended for. For Python 3 only code, prefer to use str. Text is also acceptable. Beconsistent in using one or the other. For Python 2 compatible code, use Text. In some rare cases, str may makesense; typically to aid compatiblity when the return types aren’t the samebetween the two Python versions. Avoid using unicode: it doesn’t exist inPython 3. The reason this discreprency exists is because str means different thingsdepending on the Python version. 123No:def py2_code(x: str) -&gt; unicode: ... For code that deals with binary data, use bytes. 12def deals_with_binary_data(x: bytes) -&gt; bytes: ... For Python 2 compatible code that processes text data (str or unicode inPython 2, str in Python 3), use Text. For Python 3 only code that processtext data, prefer str. 123456from typing import Text...def py2_compatible(x: Text) -&gt; Text: ...def py3_only(x: str) -&gt; str: ... If the type can be either bytes or text, use Union, with the appropriate texttype. 123456from typing import Text, Union...def py2_compatible(x: Union[bytes, Text]) -&gt; Union[bytes, Text]: ...def py3_only(x: Union[bytes, str]) -&gt; Union[bytes, str]: ... If all the string types of a function are always the same, for example if thereturn type is the same as the argument type in the code above, useAnyStr. Writing it like this will simplify the process of porting the code to Python 3. &lt;/a&gt; 3.19.12 Imports For TypingFor classes from the typing module, always import the class itself. You areexplicitly allowed to import multiple specific classes on one line from thetyping module. Ex: 1from typing import Any, Dict, Optional Given that this way of importing from typing adds items to the localnamespace, any names in typing should be treated similarly to keywords, andnot be defined in your Python code, typed or not. If there is a collisionbetween a type and an existing name in a module, import it usingimport x as y. 1from typing import Any as AnyType &lt;/a&gt; 3.19.13 Conditional ImportsUse conditional imports only in exceptional cases where the additional importsneeded for type checking must be avoided at runtime. This pattern isdiscouraged; alternatives such as refactoring the code to allow top levelimports should be preferred. Imports that are needed only for type annotations can be placed within anif TYPE_CHECKING: block. Conditionally imported types need to be referenced as strings, to beforward compatible with Python 3.6 where the annotation expressions areactually evaluated. Only entities that are used solely for typing should be defined here; thisincludes aliases. Otherwise it will be a runtime error, as the module willnot be imported at runtime. The block should be right after all the normal imports. There should be no empty lines in the typing imports list. Sort this list as if it were a regular imports list. 1234import typingif typing.TYPE_CHECKING: import sketchdef f(x: "sketch.Sketch"): ... &lt;/a&gt; 3.19.14 Circular DependenciesCircular dependencies that are caused by typing are code smells. Such code is agood candidate for refactoring. Although technically it is possible to keepcircular dependencies, the build system will not let youdo so because each module has to depend on the other. Replace modules that create circular dependency imports with Any. Set analias with a meaningful name, and use the real type name fromthis module (any attribute of Any is Any). Alias definitions should be separatedfrom the last import by one line. 1234567from typing import Anysome_mod = Any # some_mod.py imports this module....def my_method(self, var: some_mod.SomeType) -&gt; None: ... &lt;/a&gt; 3.19.15 GenericsWhen annotating, prefer to specify type parameters for generic types; otherwise,the generics’ parameters will be assumed to be Any. 12def get_names(employee_ids: List[int]) -&gt; Dict[int, Any]: ... 123456# These are both interpreted as get_names(employee_ids: List[Any]) -&gt; Dict[Any, Any]def get_names(employee_ids: list) -&gt; Dict: ...def get_names(employee_ids: List) -&gt; Dict: ... If the best type parameter for a generic is Any, make it explicit, butremember that in many cases TypeVar might be moreappropriate: 12def get_names(employee_ids: List[Any]) -&gt; Dict[Any, Text]: """Returns a mapping from employee ID to employee name for given IDs.""" 123T = TypeVar('T')def get_names(employee_ids: List[T]) -&gt; Dict[T, Text]: """Returns a mapping from employee ID to employee name for given IDs.""" 4 Parting WordsBE CONSISTENT. If you’re editing code, take a few minutes to look at the code around you anddetermine its style. If they use spaces around all their arithmetic operators,you should too. If their comments have little boxes of hash marks around them,make your comments have little boxes of hash marks around them too. The point of having style guidelines is to have a common vocabulary of coding sopeople can concentrate on what you’re saying rather than on how you’re sayingit. We present global style rules here so people know the vocabulary, but localstyle is also important. If code you add to a file looks drastically differentfrom the existing code around it, it throws readers out of their rhythm whenthey go to read it. Avoid this.]]></content>
      <categories>
        <category>Python</category>
        <category>Style Guide</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Reproduce</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「吴恩达机器学习」（三）]]></title>
    <url>%2Fposts%2F2218408717.html</url>
    <content type="text"><![CDATA[「吴恩达机器学习」（三） 逻辑回归 逻辑回归(Logistic Regression)分类问题在分类问题中，你要预测的变量 $y$ 是离散的值，我们将学习一种叫做逻辑回归 (Logistic Regression) 的算法，这是目前最流行使用最广泛的一种学习算法。 在分类问题中，我们尝试预测的是结果是否属于某一个类（例如正确或错误）。分类问题的例子有：判断一封电子邮件是否是垃圾邮件；判断一次金融交易是否是欺诈；之前我们也谈到了肿瘤分类问题的例子，区别一个肿瘤是恶性的还是良性的。 这个算法的性质是：它的输出值永远在0到 1 之间。 顺便说一下，逻辑回归算法是分类算法，我们将它作为分类算法使用。有时候可能因为这个算法的名字中出现了“回归”使你感到困惑，但逻辑回归算法实际上是一种分类算法，它适用于标签 $y$ 取值离散的情况，如：1 0 0 1。 假说表示逻辑回归模型 $h_{\theta}=g(\theta^Tx)$ &amp; $g(z)=\frac{1}{1+e^{-z} }$ =&gt; $h_{\theta}=\frac{1}{1+e^{-\theta^Tx} }$ 对模型的理解： $g(z)=\frac{1}{1+e^{-z} }$。 $h_\theta (x)$的作用是，对于给定的输入变量，根据选择的参数计算输出变量=1的可能性（estimated probablity）即$h_\theta(x)=P( y=1|x;\theta )$ 例如，如果对于给定的$x$，通过已经确定的参数计算得出$h_\theta (x)=0.7$，则表示有70%的几率$y$为正向类，相应地$y$为负向类的几率为1-0.7=0.3。 判定边界 e.g. $h_{\theta}=g(\theta_0+\theta_1x_1+\theta_2x_2)$,其中$\theta=\left[\begin{matrix} -3 &amp; 1 &amp; 1\end{matrix}\right]^T$]]></content>
      <categories>
        <category>Machine Learning</category>
        <category>Andrew NG</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「吴恩达机器学习」（二）]]></title>
    <url>%2Fposts%2F3374618719.html</url>
    <content type="text"><![CDATA[「吴恩达机器学习」（二） 多变量线性回归 多变量线性回归多维特征目前为止，我们探讨了单变量/特征的回归模型，现在我们对房价模型增加更多的特征，例如房间数楼层等，构成一个含有多个变量的模型，模型中的特征为$( x_1,x_2,…,x_n )$。 增添更多特征后，我们引入一系列新的注释： $n$ 代表特征的数量 $x^{( i )}$代表第 $i$ 个训练实例，是特征矩阵中的第$i$行，是一个向量（vector）。 比方说，上图的 ${x}^{(2)}\text{=}\begin{bmatrix} 1416\\ 3\\ 2\\ 40 \end{bmatrix}$， ${x}_{j}^{( i )}$代表特征矩阵中第 $i$ 行的第 $j$ 个特征，也就是第 $i$ 个训练实例的第 $j$ 个特征。 如上图的$x_{2}^{( 2 )}=3,x_{3}^{( 2 )}=2$， 支持多变量的假设 $h$ 表示为：$h_{\theta}( x )=\theta_0+\theta_1x_1+\theta_2x_2+…+\theta_nx_n$， 这个公式中有$n+1$个参数和$n$个变量，为了使得公式能够简化一些，引入$x_{0}=1$，则公式转化为：$h_{\theta} ( x )=\theta_0x_0+\theta_1x_1+\theta_2x_2+…+\theta_nx_n$ 此时模型中的参数是一个$n+1$维的向量，任何一个训练实例也都是$n+1$维的向量，特征矩阵$X$的维度是 $m*(n+1)$。 因此公式可以简化为：$h_{\theta} ( x )=\theta^TX$，其中上标$T$代表矩阵转置。 多变量梯度下降如何利用梯度下降处理多元线性回归 与单变量线性回归类似，在多变量线性回归中，我们也构建一个代价函数，则这个代价函数是所有建模误差的平方和，即： J(\theta_0,\theta_1,...,\theta_n)=\frac{1}{2m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2 梯度下降法实践1-特征缩放以房价问题为例，假设我们使用两个特征，房屋的尺寸和房间的数量，尺寸的值为 0-2000平方英尺，而房间数量的值则是0-5，以两个参数分别为横纵坐标，绘制代价函数的等高线图能，看出图像会显得很扁，梯度下降算法需要非常多次的迭代才能收敛。 解决的方法是尝试将所有特征的尺度都尽量缩放到-1到1之间。 最简单的方法是令：$x_n=\frac{x_n-\mu_n}{S_n}$，其中 $\mu_n$是平均值，$S_n$是标准差。 使用特征缩放可以使梯度下降的速度变得很快，让梯度下降收敛所需的循环次数更少。 梯度下降法实践2-学习率 如何确定梯度下降是否正确 如何选取学习率$\alpha$ 代价函数应该在每次循环后降低，表明梯度下降正确 梯度下降算法收敛所需要的迭代次数根据模型的不同而不同，我们不能提前预知，我们可以绘制迭代次数和代价函数的图表来观测算法在何时趋于收敛。 梯度下降算法的每次迭代受到学习率的影响，如果学习率$\alpha$过小，则达到收敛所需的迭代次数会非常高；如果学习率$\alpha$过大，每次迭代可能不会减小代价函数，可能会越过局部最小值导致无法收敛。 通常可以考虑尝试这些学习率（2倍递增）： \alpha=0.001，0.03，0.01，0.1，0.3，1，3，10特征和多项式回归 $x_1=frontage$（临街宽度），$x_2=depth$（纵向深度），$x=frontage*depth=area$（面积），则： $h_{\theta}(x)=\theta_0+\theta_1x$。 线性回归并不适用于所有数据，有时我们需要曲线来适应我们的数据，比如一个二次方模型：$h_{\theta}(x)=\theta_0+\theta_1x_1+\theta_2x_x^2$ 或者三次方模型： $h_{\theta}(x)=\theta_0+\theta_1x_1+\theta_2x_2^2+\theta_3x_3^3$。 通常我们需要先观察数据然后再决定准备尝试怎样的模型。 另外，我们可以令： $x_2=x_2^2,x_3=x_3^3$，从而将模型转化为线性回归模型。 根据函数图形特性，我们还可以使： $h_{\theta}(x)=\theta_0+\theta_1(size)+\theta_2(size)^2$ 或者: $h_{\theta}(x)=\theta_0+\theta_1(size)+\theta_2\sqrt{size}$ 注：如果我们采用多项式回归模型，在运行梯度下降算法前，特征缩放非常有必要。 正规方程到目前为止，我们都在使用梯度下降算法，但是对于某些线性回归问题，正规方程方法是更好的解决方案。提供了一种求$\theta$的解析求法，所以与其使用迭代法求解，我们可以一次性求解$\theta$的最优值。 直观的理解： 对向量中的每一个变量求偏导，当等于0的时候求其变量值，这样就能得到一组向量。 正规方程不需要进行归一化，但是梯度下降时需要的。 \theta=(X^TX)^{-1}X^Ty梯度下降与正规方程的比较： 梯度下降 正规方程 需要选择学习率$\alpha$ 不需要 需要多次迭代 一次运算得出 适用于各种类型的模型 只适用于线性模型，不适合逻辑回归模型等其他模型 当特征数量$n$大时也能较好适用 需要计算$( X^TX )^{-1}$ 如果特征数量n较大则运算代价大，因为矩阵逆的计算时间复杂度为$O(n^3)$，通常来说当$n$小于10000 时还是可以接受的 总结一下，只要特征变量的数目并不大，标准方程是一个很好的计算参数$\theta $的替代方法。具体地说，只要特征变量数量小于一万，我通常使用标准方程法，而不使用梯度下降法。 随着我们要讲的学习算法越来越复杂，例如，当我们讲到分类算法，像逻辑回归算法，我们会看到，实际上对于那些算法，并不能使用标准方程法。对于那些更复杂的学习算法，我们将不得不仍然使用梯度下降法。因此，梯度下降法是一个非常有用的算法，可以用在有大量特征变量的线性回归问题。或者我们以后在课程中，会讲到的一些其他的算法，因为标准方程法不适合或者不能用在它们上。但对于这个特定的线性回归模型，标准方程法是一个比梯度下降法更快的替代算法。所以，根据具体的问题，以及你的特征变量的数量，这两种算法都是值得学习的。 正规方程及不可逆性（可选）正规方程 ( normal equation )，以及它们的不可逆性。 有些同学曾经问过我，当计算 $\theta$=inv(X&#39;X ) X&#39;y ，那对于矩阵$X’X$的结果是不可逆的情况咋办呢? 如果你懂一点线性代数的知识，你或许会知道，有些矩阵可逆，而有些矩阵不可逆。我们称那些不可逆矩阵为奇异或退化矩阵。 首先，看特征值里是否有一些多余的特征，像这些$x_1$和$x_2$是线性相关的，互为线性函数。同时，当有一些多余的特征时，可以删除这两个重复特征里的其中一个，无须两个特征同时保留，将解决不可逆性的问题。因此，首先应该通过观察所有特征检查是否有多余的特征，如果有多余的就删除掉，直到他们不再是多余的为止，如果特征数量实在太多，我会删除些 用较少的特征来反映尽可能多内容，否则我会考虑使用正规化方法。 $\theta =( X^TX )^{-1}X^Ty$ 的推导过程： $J(\theta)=\frac{1}{2m}\sum\limits_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})^2$其中：$h_{\theta}( x )=\theta^TX=\theta_0x_0+\theta_1x_1+\theta_2x_2+…+\theta_nx_n$ 将向量表达形式转为矩阵表达形式，则有$J(\theta )=\frac{1}{2}( X\theta -y)^2$ ，其中$X$为$m$行$n+1$列的矩阵（$m$为样本个数，$n$为特征个数），$\theta$为$n+1$行1列的矩阵，$y$为$m$行1列的矩阵，对$J(\theta )$进行如下变换 J(\theta )=\frac{1}{2}( X\theta -y)^T( X\theta -y ) \\=\frac{1}{2}( \theta^TX^T-y^T)(X\theta -y ) \\=\frac{1}{2}(\theta^TX^TX\theta -\theta^TX^Ty-y^TX\theta -y^Ty )接下来对$J(\theta )$偏导，需要用到以下几个矩阵的求导法则: \frac{dAB}{dB}=A^T\\ \frac{dX^TAX}{dX}=2AX所以有: \frac{\partial J( \theta )}{\partial \theta }=\frac{1}{2}(2X^TX\theta -X^Ty -(y^TX )^T-0 )\\ =\frac{1}{2}(2X^TX\theta -X^Ty -X^Ty -0\\ =X^TX\theta -X^Ty令$\frac{\partial J( \theta )}{\partial \theta }=0$, 则有$\theta =( X^TX )^{-1}X^Ty$]]></content>
      <categories>
        <category>Machine Learning</category>
        <category>Andrew NG</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「吴恩达机器学习」（一）]]></title>
    <url>%2Fposts%2F4168189520.html</url>
    <content type="text"><![CDATA[「吴恩达机器学习」（一） 什么是机器学习？ 什么是监督学习算法？ 什么是非监督学习算法？ 什么是单变量线性回归？ 线性代数知识点回顾 什么是机器学习？ Arthur Samuel(1959) 编程使计算机自己和自己玩10^1000跳棋游戏 Tom Mitchell(1998) 计算机程序从经验E中学习任务T，并用度量P来衡量性能。条件是它由P定义的关于T的性能随着经验E而提高。 经验E=自己玩10^1000次跳棋 任务T=玩跳棋 性能度量P=与新对手玩跳棋时赢的概率 邮件系统学习标记垃圾邮件 学习算法 supervised learning 我们教计算机如何做一件事情 给标准答案 unsupervised learning 计算机自己学习 others reinforcement learning recommender systems 对应用学习算法的实用性建议（木匠） 如何去使用这些工具（机器学习算法） 监督学习Example predict housing prices 直线拟合 二次函数或者二次多项式 监督学习指的就是我们给学习算法一个数据集。这个数据集由“正确答案”组成。在房价的例子中，我们给了一系列房子的数据，我们给定数据集中每个样本的正确价格，即它们实际的售价然后运用学习算法，算出更多的正确答案。比如你朋友那个新房子的价格。用术语来讲，这叫做回归问题。我们试着推测出一个连续值的结果，即房子的价格。 一般房子的价格会记到美分，所以房价实际上是一系列离散的值，但是我们通常又把房价看成实数，看成是标量，所以又把它看成一个连续的数值。 breast cancer ​ Malignant or benign？-&gt;(0,1) ​ 这类机器学习的问题就在于，你能否估算出肿瘤是恶性的或是良性的概率。用术语来讲，这是一个分类问题。 ​ 分类指的是，我们试着推测出离散的输出值：0或1良性或恶性，而事实上在分类问题中，输出可能不止两个值。比如说可能有三种乳腺癌，所以你希望预测离散输出0、1、2、3。0 代表良性，这也是分类问题，属于多分类问题。可以用另外一种形式来表示（O表示malignant，X表示bengin）。 多特征输入 例如年龄、tumor大小、malignant or bengin…… 良性区域or恶性区域 如何处理这些无穷多数量的特征？如何存储？你电脑的内存肯定不够用。我们以后会讲一个算法，叫支持向量机，里面有一个巧妙的数学技巧，能让计算机处理无限多个特征。想象一下，我没有写下这两种和右边的三种特征，而是在一个无限长的列表里面，一直写一直写不停的写，写下无限多个特征，事实上，我们能用算法来处理它们。 测验现在来个小测验：假设你经营着一家公司，你想开发学习算法来处理这两个问题： 你有一大批同样的货物，想象一下，你有上千件一模一样的货物等待出售，这时你想预测接下来的三个月能卖多少件？ 你有许多客户，这时你想写一个软件来检验每一个用户的账户。对于每一个账户，你要判断它们是否曾经被盗过？ 那这两个问题，它们属于分类问题、还是回归问题? 问题一是一个回归问题，因为你知道，如果我有数千件货物，我会把它看成一个实数，一个连续的值。因此卖出的物品数，也是一个连续的值。 问题二是一个分类问题，因为我会把预测的值，用 0 来表示账户未被盗，用 1 表示账户曾经被盗过。所以我们根据账号是否被盗过，把它们定为0 或 1，然后用算法推测一个账号是 0 还是 1，因为只有少数的离散值，所以我把它归为分类问题。 以上就是监督学习的内容。 总结这节课我们介绍了监督学习。其基本思想是，我们数据集中的每个样本都有相应的“正确答案”。再根据这些样本作出预测，就像房子和肿瘤的例子中做的那样。我们还介绍了回归问题，即通过回归来推出一个连续的输出，之后我们介绍了分类问题，其目标是推出一组离散的结果。 无监督学习 在无监督学习中，我们已知的数据。看上去有点不一样，不同于监督学习的数据的样子，即无监督学习中没有任何的标签或者是有相同的标签或者就是没标签。所以我们已知数据集，却不知如何处理，也未告知每个数据点是什么。别的都不知道，就是一个数据集。你能从数据中找到某种结构吗？ 针对数据集，无监督学习就能判断出数据有两个不同的聚集簇。这是一个，那是另一个，二者不同。是的，无监督学习算法可能会把这些数据分成两个不同的簇。所以叫做聚类算法。 聚类应用 谷歌新闻每天都在，收集非常多，非常多的网络的新闻内容。它再将这些新闻分组，组成有关联的新闻。所以谷歌新闻做的就是搜索非常多的新闻事件，自动地把它们聚类到一起。所以，这些新闻事件全是同一主题的，所以显示到一起。 Cocktail party problem 单变量线性回归Linear Regression with One Variable 模型表示 一种可能的表达方式为： $h_\theta \left( x \right)=\theta_{0} + \theta_{1}x$ 因为只含有一个特征/输入变量，因此这样的问题叫作单变量线性回归问题。 代价函数我们将定义代价函数的概念，这有助于我们弄清楚如何把最有可能的直线与我们的数据相拟合。 在线性回归中我们有一个像这样的训练集，$m$代表了训练样本的数量，比如 $m = 47$。而我们的假设函数，也就是用来进行预测的函数，是这样的线性函数形式：$h_\theta \left( x \right)=\theta_{0}+\theta_{1}x$。 接下来我们会引入一些术语我们现在要做的便是为我们的模型选择合适的参数（parameters）$\theta_{0}$ 和 $\theta_{1}$，在房价问题这个例子中便是直线的斜率和在$y$ 轴上的截距。 我们选择的参数决定了我们得到的直线相对于我们的训练集的准确程度，模型所预测的值与训练集中实际值之间的差距（下图中蓝线所指）就是建模误差（modeling error）。 我们的目标便是选择出可以使得建模误差的平方和能够最小的模型参数。 即使得代价函数 J \left( \theta_0, \theta_1 \right) = \frac{1}{2m}\sum\limits_{i=1}^m \left( h_{\theta}(x^{(i)})-y^{(i)} \right)^{2}最小。(平方误差函数) 还有其他代价函数，不过平方误差函数对于线性回归是比较合理的。 我们绘制一个等高线图，三个坐标分别为$\theta_{0}$和$\theta_{1}$ 和$J(\theta_{0}, \theta_{1})$： 代价函数的直观理解（一）在上一个视频中，我们给了代价函数一个数学上的定义。在这个视频里，让我们通过一些例子来获取一些直观的感受，看看代价函数到底是在干什么。 简化函数，先假设截距为0，计算简单的情况。 当$\theta_1$改变时（$\theta_1=0,0.5,1,1.5,2,2.5…$），计算$J(\theta_1)$的函数图像。对于每一个$\theta_1$都有一个对应的$J(\theta_1)$，那么我们就可以画出来$J(\theta_1)$的函数图像，也就是代价函数的函数图像。为了找到一个最拟合数据的函数，需要改变$\theta_1$的值，从而使代价函数最小，也就是当$\theta_1=1$时可以拟合得到出((1,1),(2,2),(3,3))的函数。 代价函数的直观理解（二）前提：熟悉等高线图的绘制 代价函数的样子，等高线图可以更好的体现出函数图像上的点之间的关系，则可以看出在三维空间中存在一个使得$J(\theta_{0}, \theta_{1})$最小的点（碗底）。 通过这些图形，我希望你能更好地理解这些代价函数$ J$所表达的值是什么样的，它们对应的假设是什么样的，以及什么样的假设对应的点，更接近于代价函数$J$的最小值。 当然，我们真正需要的是一种有效的算法，能够自动地找出这些使代价函数$J$取最小值的参数$\theta_{0}$和$\theta_{1}$来。 我们也不希望编个程序把这些点画出来，然后人工的方法来读出这些点的数值，这很明显不是一个好办法。我们会遇到更复杂、更高维度、更多参数的情况，而这些情况是很难画出图的，因此更无法将其可视化，因此我们真正需要的是编写程序来找出这些最小化代价函数的$\theta_{0}$和$\theta_{1}$的值。 梯度下降梯度下降背后的思想是：开始时我们随机选择一个参数的组合$\left( \theta_0,\theta_1,……,\theta_n \right)$，计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合。我们持续这么做直到找到一个局部最小值（local minimum），因为我们并没有尝试完所有的参数组合，所以不能确定我们得到的局部最小值是否便是全局最小值（global minimum），选择不同的初始参数组合，可能会找到不同的局部最小值。 梯度下降是一个用来求函数最小值的算法，我们将使用梯度下降算法来求出代价函数$J(\theta_{0}, \theta_{1})$ 的最小值。 对$\theta_0$,$\theta_1$进行一些初步猜想，他们是多少并不重要，将他们全部设为0，我们不停的一点点改变$\theta_0$,$\theta_1$试图使$J(\theta_{0}, \theta_{1})$最小或者使局部最小值。 想象一下你正站立在山的这一点上，站立在你想象的公园这座红色山上，在梯度下降算法中，我们要做的就是旋转360度，看看我们的周围，并问自己要在某个方向上，用小碎步尽快下山。这些小碎步需要朝什么方向？如果我们站在山坡上的这一点，你看一下周围，你会发现最佳的下山方向，你再看看周围，然后再一次想想，我应该从什么方向迈着小碎步下山？然后你按照自己的判断又迈出一步，重复上面的步骤，从这个新的点，你环顾四周，并决定从什么方向将会最快下山，然后又迈进了一小步，并依此类推，直到你接近局部最低点的位置。 不同的起点，最终获得的局部最低点可能是不同的。 批量梯度下降（batch gradient descent）算法的公式为： 我们使用$:=$表示赋值，$=$表示判断为真的声明。 其中$\alpha$是学习率（learning rate），它决定了我们沿着能让代价函数下降程度最大的方向向下迈出的步子有多大，在批量梯度下降中，我们每一次都同时让所有的参数减去学习速率乘以代价函数的导数，同时更新$\theta_0$,$\theta_1$。 在梯度下降算法中，还有一个更微妙的问题，梯度下降中，我们要更新$\theta_0$和$\theta_1$ ，当 $j=0$ 和$j=1$时，会产生更新，所以你将更新$J\left( \theta_0 \right)$和$J\left( \theta_1 \right)$。实现梯度下降算法的微妙之处是，在这个表达式中，如果你要更新这个等式，你需要同时更新$\theta_0$和$\theta_1$，我的意思是在这个等式中，我们要这样更新： $\theta_0$:= $\theta_0$ ，并更新$\theta_1$:= $\theta_1$。 实现方法是：你应该计算公式右边的部分，通过那一部分计算出$\theta_0$和$\theta_1$的值，然后同时更新$\theta_0$和$\theta_1$。在梯度下降算法中，这是正确实现同时更新的方法。我不打算解释为什么你需要同时更新，同时更新是梯度下降中的一种常用方法。我们之后会讲到，同步更新是更自然的实现方法。当人们谈到梯度下降时，他们的意思就是同步更新。 在接下来的视频中，我们要进入这个微分项的细节之中。我已经写了出来但没有真正定义，如果你已经修过微积分课程，如果你熟悉偏导数和导数，这其实就是这个微分项： \alpha \frac{\partial }{\partial \theta_0}J(\theta_0,\theta_1) \alpha \frac{\partial }{\partial \theta_1}J(\theta_0,\theta_1)如果你不熟悉微积分，不用担心，即使你之前没有看过微积分，或者没有接触过偏导数，在接下来的视频中，你会得到一切你需要知道，如何计算这个微分项的知识。 梯度下降的直观理解 梯度下降就是为了找到代价函数梯度最小的位置，也就是极小值，每次都要使$\theta$越来越接近0。 $\alpha$作为学习率，是每次梯度下降的步长，太小容易导致梯度下降太慢，太大容易导致梯度下降错过最小值，可能无法收敛，甚至分散。 随着我接近最低点，我的导数越来越接近零，所以，梯度下降一步后，新的导数的改变会变小一点点。所以我们即使用固定的学习率$\alpha$，我们也可以最终收敛到局部最小值。 在梯度下降法中，当我们接近局部最低点时，梯度下降法会自动采取更小的幅度，这是因为当我们接近局部最低点时，很显然在局部最低时导数等于零，所以当我们接近局部最低时，导数值会自动变得越来越小，所以梯度下降将自动采取较小的幅度，这就是梯度下降的做法。所以实际上没有必要再另外减小$\alpha$。 这就是梯度下降算法，你可以用它来最小化任何代价函数$J$，不只是线性回归中的代价函数$J$。 梯度下降的线性回归在以前的视频中我们谈到关于梯度下降算法，梯度下降是很常用的算法。在这段视频中，我们要将梯度下降和代价函数结合。我们将用到此算法，并将其应用于具体的拟合直线的线性回归算法里。 \frac{\partial}{\partial \theta_j}J(\theta_0,\theta_1)=\frac{\partial}{\partial \theta_j} \frac{1}{2m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2\\ =\frac{\partial}{\partial \theta_j}J(\theta_0,\theta_1)=\frac{\partial}{\partial \theta_j} \frac{1}{2m}\sum\limits_{i=1}^m(\theta_0+\theta_1x^{(i)}-y^{(i)})^2也就是对于$j$取$0,1$时： j=0:\frac{\partial}{\partial \theta_0}J(\theta_0,\theta_1)=\frac{1}{m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)}) j=1:\frac{\partial}{\partial \theta_1}J(\theta_0,\theta_1)=\frac{1}{m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})x^{(i)}我们可以把梯度下降算法写成下面这个样子： 我们刚刚使用的算法，有时也称为批量梯度下降。实际上，在机器学习中，通常不太会给算法起名字，但这个名字”批量梯度下降”，指的是在梯度下降的每一步中，我们都用到了所有的训练样本，在梯度下降中，在计算微分求导项时，我们需要进行求和运算，所以，在每一个单独的梯度下降中，我们最终都要计算这样一个东西，这个项需要对所有$m$个训练样本求和。因此，批量梯度下降法这个名字说明了我们需要考虑所有这一”批”训练样本，而事实上，有时也有其他类型的梯度下降法，不是这种”批量”型的，不考虑整个的训练集，而是每次只关注训练集中的一些小的子集。 如果你之前学过线性代数，有些同学之前可能已经学过高等线性代数，你应该知道有一种计算代价函数$J$最小值的数值解法，不需要梯度下降这种迭代算法。在后面的课程中，我们也会谈到这个方法，它可以在不需要多步梯度下降的情况下，也能解出代价函数$J$的最小值，这是另一种称为正规方程(normal equations)的方法。实际上在数据量较大的情况下，梯度下降法比正规方程要更适用一些。 What’s next在接下来的一组视频中，我会对线性代数进行一个快速的复习回顾。 通过它们，你可以实现和使用更强大的线性回归模型。事实上，线性代数不仅仅在线性回归中应用广泛，它其中的矩阵和向量将有助于帮助我们实现之后更多的机器学习模型，并在计算上更有效率。正是因为这些矩阵和向量提供了一种有效的方式来组织大量的数据，特别是当我们处理巨大的训练集时，如果你不熟悉线性代数，如果你觉得线性代数看上去是一个复杂、可怕的概念，特别是对于之前从未接触过它的人，不必担心，事实上，为了实现机器学习算法，我们只需要一些非常非常基础的线性代数知识。通过接下来几个视频，你可以很快地学会所有你需要了解的线性代数知识。具体来说，为了帮助你判断是否有需要学习接下来的一组视频，我会讨论什么是矩阵和向量，谈谈如何加、减 、乘矩阵和向量，讨论逆矩阵和转置矩阵的概念。 线性代数回顾(Linear Algebra Review)矩阵和向量矩阵：二维数组、向量：一维数组 矩阵的维数即行数×列数 矩阵元素（矩阵项）： A=\left[\begin{matrix}1402 & 191 \\ 1371 & 821 \\ 949 & 1437 \\ 147 & 1448\end{matrix}\right]$A_{ij}$指第$i$行，第$j$列的元素。 向量是一种特殊的矩阵，只有一列，讲义中的向量一般都是列向量，如： y=\left[ \begin{matrix} 460 \\ 232 \\ 315 \\ 178 \end{matrix} \right]为四维列向量（4×1）。 一般我们默认使用1索引： 大写字母我们一般用来表示矩阵，例如矩阵$A$，小写字母用来表示数字。 加法和标量乘法矩阵的加法：行列数相等的可以加。 例如： \left[\begin{matrix}1&0 \\ 2&5 \\ 3&1\end{matrix}\right]+\left[\begin{matrix}4&0.5 \\ 2&5 \\ 0&1\end{matrix}\right]=\left[\begin{matrix}5&0.5 \\ 4&10 \\ 3&2\end{matrix}\right]矩阵的乘法：每个元素都要乘 例如： 3\times\left[\begin{matrix}1&0 \\ 2&5 \\ 3&1\end{matrix}\right]=\left[\begin{matrix}3&0 \\ 6&15 \\ 9&3\end{matrix}\right]=\left[\begin{matrix}1&0 \\ 2&5 \\ 3&1\end{matrix}\right]\times3 \left[\begin{matrix}4&0\\6&3\end{matrix}\right]/4=\frac{1}{4}\times\left[\begin{matrix}4&0\\6&3\end{matrix}\right]=\left[\begin{matrix}1&0\\\frac{3}{2}&\frac{3}{4}\end{matrix}\right]矩阵向量乘法矩阵和向量的乘法如下：$m×n$的矩阵乘以$n×1$的向量，得到的是$m×1$的向量 \left[\begin{matrix}1&3\\4&0\\2&1\end{matrix}\right]\left[\begin{matrix}1\\5\end{matrix}\right]=\left[\begin{matrix}16\\4\\7\end{matrix}\right]矩阵乘法矩阵乘法： $m×n$矩阵乘以$n×o$矩阵，变成$m×o$矩阵。 矩阵乘法的性质矩阵的乘法不满足交换律：$A×B≠B×A$ 矩阵的乘法满足结合律。即：$A×(B×C)=(A×B)×C$ 单位矩阵：在矩阵的乘法中，有一种矩阵起着特殊的作用，如同数的乘法中的1,我们称这种矩阵为单位矩阵．它是个方阵，一般用 $I$ 或者 $E$ 表示，本讲义都用 $I$ 代表单位矩阵，从左上角到右下角的对角线（称为主对角线）上的元素均为1以外全都为0。如： $AA^{-1}=A^{-1} A=I$ 对于单位矩阵，有$A\cdot I=I\cdot A=A$ 矩阵逆、转置矩阵的逆：如矩阵$A$是一个$m×m$矩阵（方阵），如果有逆矩阵，则：$AA^{-1}=A^{-1}A=I$ 矩阵的转置：设$A$为$m×n$阶矩阵（即$m$行$n$列），第$i $行$j $列的元素是$a(i,j)$，即：$A=a(i,j)$ 定义$A$的转置为这样一个$n×m$阶矩阵$B$，满足$B=a(j,i)$，即 $b (i,j)=a(j,i)$（$B$的第$i$行第$j$列元素是$A$的第$j$行第$i$列元素），记$A^T=B$。(有些书记为A’=B） 直观来看，将$A$的所有元素绕着一条从第1行第1列元素出发的右下方45度的射线作镜面反转，即得到$A$的转置。 例： \left| \begin{matrix} a& b \\ c& d \\ e& f \end{matrix} \right|^{T}=\left|\begin{matrix} a& c & e \\ b& d & f \end{matrix} \right|矩阵的转置基本性质: \left( A\pm B \right)^{T}=A^T\pm B^T\\ \left( A\times B \right)^{T}=B^{T}\times A^{T}\\\left( A^T \right)^{T}=A \\ \left( KA \right)^{T}=KA^{T}matlab中矩阵转置：直接打一撇，x=y&#39;。]]></content>
      <categories>
        <category>Machine Learning</category>
        <category>Andrew NG</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LaTeX Note]]></title>
    <url>%2Fposts%2F1260497769.html</url>
    <content type="text"><![CDATA[LaTeX NoteAuthor: JosephLau Description LaTeX Note 安装MacMacTex 安装包非常大，而且自带了很多图形应用。但是我更喜欢用命令行，而且MacTex 还有 no-gui 版本，省去安装各种缺少的包。 123456brew cask install mactex-no-gui# 添加到环境变量export PATH=/usr/local/texlive/2018/bin/x86_64-darwin:$PATH# 换源sudo tlmgr update --self --repository http://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnetsudo tlmgr install latexmk --repository http://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet 测试 1xelatex test.tex 公式数学公式 二元运算符 | 符号 | 公式 | 符号 | 公式 || ———————— | :————————: | —————- | ——————- || $\triangleleft$ | \triangleleft | $\times$ | \times || $\bigtriangleup$ | \bigtriangleup | $\div$ | \div || $\bullet$ | \bullet | $\cdot$ | \cdot || $\ast$ | \ast | $\otimes$ | \otimes || $\circ$ | \circ | $\setminus$ | \setminus | 矩阵 A=\left[\begin{matrix}1402 & 191 \\ 1371 & 821 \\ 949 & 1437 \\ 147 & 1448\end{matrix}\right] 数学公式 \frac{\partial}{\partial \theta_j}J(\theta_0,\theta_1)=\frac{\partial}{\partial \theta_j} \frac{1}{2m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2\\ =\frac{\partial}{\partial \theta_j}J(\theta_0,\theta_1)=\frac{\partial}{\partial \theta_j} \frac{1}{2m}\sum\limits_{i=1}^m(\theta_0+\theta_1x^{(i)}-y^{(i)})^2]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SMTC」0007.py]]></title>
    <url>%2Fposts%2F4089488553.html</url>
    <content type="text"><![CDATA[「SMTC」0007.pyAuthor: JosephLau Description Show me the code 第0007题 Python版 完整题目 题目第 0007 题： 有个目录，里面是你自己写过的程序，统计一下你写过多少行代码。包括空行和注释，但是要分别列出来。 思路 遍历文件夹下的文件 获取后缀名，找到py文件 遍历文件的每一行 如果是空的则说明是空行 用正则匹配#注释符号 统计行数输出 Solution123456789101112131415161718192021222324252627282930313233343536# -*- coding: utf-8 -*-import osimport redef parse_code(filesPath): if not os.path.isdir(filesPath): return # 正则匹配# exp_re = re.compile('^#.*') fileList = os.listdir(filesPath) print('&#123;0&#125;\t&#123;1&#125;\t&#123;2&#125;\t&#123;3&#125;'.format('fileName', 'all_lines', 'space_lines', 'exp_lines')) for file in fileList: filePath = os.path.join(filesPath, file) if os.path.isfile(filePath) and os.path.splitext(filePath)[1] == '.py': with open(filePath) as code: all_lines = 0 space_lines = 0 exp_lines = 0 for line in code.readlines(): all_lines += 1 # 空行 if line.strip() == '': space_lines += 1 # 注释 exp = exp_re.findall(line.strip()) if exp: exp_lines += 1 print('&#123;0&#125;\t\t&#123;1&#125;\t\t&#123;2&#125;\t\t&#123;3&#125;'.format( file, all_lines, space_lines, exp_lines))if __name__ == "__main__": parse_code('./SMTC')]]></content>
      <categories>
        <category>Python</category>
        <category>SMTC</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>SMTC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Her」]]></title>
    <url>%2Fposts%2F800396456.html</url>
    <content type="text"><![CDATA[「Her」 新的一年，宝贝儿我们一起加油哦！]]></content>
  </entry>
  <entry>
    <title><![CDATA[2019猪年快乐]]></title>
    <url>%2Fposts%2F1470630020.html</url>
    <content type="text"><![CDATA[**2019㊗️大家🐷年大吉！** 附上代码，欢迎Fork]]></content>
  </entry>
  <entry>
    <title><![CDATA[「SMTC」0006.py]]></title>
    <url>%2Fposts%2F1266467788.html</url>
    <content type="text"><![CDATA[「SMTC」0006.pyAuthor: JosephLau Description Show me the code 第0006题 Python版 完整题目 题目第 0006 题： 你有一个目录，放了你一个月的日记，都是 txt，为了避免分词的问题，假设内容都是英文，请统计出你认为每篇日记最重要的词。 思路 首先英文可以避免分词的问题，中文可能就需要引入终止词 需要对日记进行清洗，去除掉标点符号等 对于每篇日记最重要的词，应该是除了正常使用的代词外的词频最高的名词或者形容词 这就可以用到第0004题中的Solution Solution123456789101112131415161718192021222324252627282930313233343536# -*- coding: utf-8 -*-import osdef GetTF(filesPath): if not os.path.isdir(filesPath): return files=os.listdir(filesPath) for file in files: filePath=os.path.join(filesPath,file) # 判断是否为文件且文件后缀名是否为.txt # 去除其他文件的影响 if os.path.isfile(filePath) and os.path.splitext(filePath)[1]=='.txt': with open(filePath) as text: content=text.read() # 去除标点符号 for char in '-.,\n': content=content.replace(char, ' ') content=content.lower() wordList=content.split() wordDic=&#123;&#125; # 去除无用词 exceptWord=['the','a','to','and','of'] for word in wordList: if word in exceptWord: continue if word in wordDic: wordDic[word]+=1 else: wordDic[word]=1 # 倒序排序 res=sorted(wordDic.items(),key=lambda t: t[1],reverse=True) print("the most important word in &#123;0&#125; is &#123;1&#125;".format(filePath,res[0][0]))if __name__ == "__main__": GetTF('/Users/lau/Documents/Coding/Python/SMTC/source/0006') Result： 123the most important word in /Users/lau/Documents/Coding/Python/SMTC/source/0006/3.txt is languagethe most important word in /Users/lau/Documents/Coding/Python/SMTC/source/0006/2.txt is basedthe most important word in /Users/lau/Documents/Coding/Python/SMTC/source/0006/1.txt is programming Q&amp;A os.path.splitext(path) Split the pathname path into a pair (root, ext) such that root + ext == path, and ext is empty or begins with a period and contains at most one period. Leading periods on the basename are ignored; splitext(&#39;.cshrc&#39;) returns(&#39;.cshrc&#39;, &#39;&#39;).]]></content>
      <categories>
        <category>Python</category>
        <category>SMTC</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>SMTC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python Library]]></title>
    <url>%2Fposts%2F3101691907.html</url>
    <content type="text"><![CDATA[Python LibraryAuthor: JosephLau Description 汇总使用过的Python库 简单记一下模块功能以及函数原型 Pillow官方文档 ImageModule Open, rotate, and display an image (using the default viewer) PIL.Image.open(fp, mode=&#39;r’)[source] Opens and identifies the given image file. This is a lazy operation; this function identifies the file, but the file remains open and the actual image data is not read from the file until you try to process the data (or call the load()method). See new(). See File Handling in Pillow. | Parameters: | fp – A filename (string), pathlib.Path object or a file object. The file object must implement read(), seek(), and tell() methods, and be opened in binary mode.mode – The mode. If given, this argument must be “r”. || —————- | —————————————————————————————— || Returns: | An Image object. || Raises: | IOError – If the file cannot be found, or the image cannot be opened and identified. | ImageDrawModule The ImageDraw module provides simple 2D graphics for Image objects. You can use this module to create new images, annotate or retouch existing images, and to generate graphics on the fly for web use. classPIL.ImageDraw.Draw(im, mode=None) Creates an object that can be used to draw in the given image. Note that the image will be modified in place. Parameters: im The image to draw in.mode – Optional mode to use for color values. For RGB images, this argument can be RGB or RGBA (to blend the drawing into the image). For all other modes, this argument must be the same as the image mode. If omitted, the mode defaults to the mode of the image. PIL.ImageDraw.ImageDraw.text(xy, text, fill=None, font=None, anchor=None, spacing=0, align=&quot;left&quot;, direction=None, features=None) Draws the string at the given position. xy – Top left corner of the text. text – Text to be drawn. If it contains any newline characters, the text is passed on to multiline_text() fill – Color to use for the text. font – An ImageFont instance. spacing – If the text is passed on to multiline_text(), the number of pixels between lines. align – If the text is passed on to multiline_text(), “left”, “center” or “right”. direction Direction of the text. It can be ‘rtl’ (right to left), ‘ltr’ (left to right) or ‘ttb’ (top to bottom). Requires libraqm. New in version 4.2.0. features A list of OpenType font features to be used during text layout. This is usually used to turn on optional font features that are not enabled by default, for example ‘dlig’ or ‘ss01’, but can be also used to turn off default font features for example ‘-liga’ to disable ligatures or ‘-kern’ to disable kerning. To get all supported features, seehttps://docs.microsoft.com/en-us/typography/opentype/spec/featurelistRequires libraqm. New in version 4.2.0. ImageFontModule The ImageFont module defines a class with the same name. Instances of this class store bitmap fonts, and are used with the PIL.ImageDraw.Draw.text() method. PIL.ImageFont.truetype(font=None, size=10, index=0, encoding=&#39;&#39;, layout_engine=None) Load a TrueType or OpenType font from a file or file-like object, and create a font object. This function loads a font object from the given file or file-like object, and creates a font object for a font of the given size. This function requires the _imagingft service. font – A filename or file-like object containing a TrueType font. Under Windows, if the file is not found in this filename, the loader also looks in Windows fonts/directory. size – The requested size, in points. index – Which font face to load (default is first available face). encoding – Which font encoding to use (default is Unicode). Common encodings are “unic” (Unicode), “symb” (Microsoft Symbol), “ADOB” (Adobe Standard), “ADBE” (Adobe Expert), and “armn” (Apple Roman). See the FreeType documentation for more information. layout_engine – Which layout engine to use, if available:ImageFont.LAYOUT_BASIC or ImageFont.LAYOUT_RAQM. collections Counter A counter tool is provided to support convenient and rapid tallies. For example: 12345678910111213&gt;&gt;&gt; # Tally occurrences of words in a list&gt;&gt;&gt; cnt = Counter()&gt;&gt;&gt; for word in [&apos;red&apos;, &apos;blue&apos;, &apos;red&apos;, &apos;green&apos;, &apos;blue&apos;, &apos;blue&apos;]:... cnt[word] += 1&gt;&gt;&gt; cntCounter(&#123;&apos;blue&apos;: 3, &apos;red&apos;: 2, &apos;green&apos;: 1&#125;)&gt;&gt;&gt; # Find the ten most common words in Hamlet&gt;&gt;&gt; import re&gt;&gt;&gt; words = re.findall(r&apos;\w+&apos;, open(&apos;hamlet.txt&apos;).read().lower())&gt;&gt;&gt; Counter(words).most_common(10)[(&apos;the&apos;, 1143), (&apos;and&apos;, 966), (&apos;to&apos;, 762), (&apos;of&apos;, 669), (&apos;i&apos;, 631), (&apos;you&apos;, 554), (&apos;a&apos;, 546), (&apos;my&apos;, 514), (&apos;hamlet&apos;, 471), (&apos;in&apos;, 451)] most_common([n]) Return a list of the n most common elements and their counts from the most common to the least. If n is omitted or None, most_common() returns all elements in the counter. Elements with equal counts are ordered arbitrarily: 12&gt;&gt;&gt; Counter(&apos;abracadabra&apos;).most_common(3)[(&apos;a&apos;, 5), (&apos;r&apos;, 2), (&apos;b&apos;, 2)] rebs4BeautifulSoup使用BeautifulSoup解析这段代码,能够得到一个 BeautifulSoup 的对象,并能按照标准的缩进格式的结构输出: 1234from bs4 import BeautifulSoupsoup = BeautifulSoup(html_doc, 'html.parser')print(soup.prettify()) 几个简单的浏览结构化数据的方法: 12345678910111213141516171819202122232425262728soup.title# &lt;title&gt;The Dormouse's story&lt;/title&gt;soup.title.name# u'title'soup.title.string# u'The Dormouse's story'soup.title.parent.name# u'head'soup.p# &lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;soup.p['class']# u'title'soup.a# &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;soup.find_all('a')# [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,# &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,# &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]soup.find(id="link3")# &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt; 从文档中找到所有标签的链接: 12345for link in soup.find_all('a'): print(link.get('href')) # http://example.com/elsie # http://example.com/lacie # http://example.com/tillie 从文档中获取所有文字内容: 1print(soup.get_text()) Beautiful Soup支持Python标准库中的HTML解析器,还支持一些第三方的解析器,其中一个是 lxml .根据操作系统不同,可以选择下列方法来安装lxml: 123$ apt-get install Python-lxml$ easy_install lxml$ pip install lxml 另一个可供选择的解析器是纯Python实现的 html5lib , html5lib的解析方式与浏览器相同,可以选择下列方法来安装html5lib: 123$ apt-get install Python-html5lib$ easy_install html5lib$ pip install html5lib 下表列出了主要的解析器,以及它们的优缺点: 解析器 使用方法 优势 劣势 Python标准库 BeautifulSoup(markup,&quot;html.parser&quot;) Python的内置标准库执行速度适中文档容错能力强 Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差 lxml HTML 解析器 BeautifulSoup(markup,&quot;lxml&quot;) 速度快文档容错能力强 需要安装C语言库 lxml XML 解析器 BeautifulSoup(markup,[&quot;lxml-xml&quot;]) BeautifulSoup(markup,&quot;xml&quot;) 速度快唯一支持XML的解析器 需要安装C语言库 html5lib BeautifulSoup(markup,&quot;html5lib&quot;) 最好的容错性以浏览器的方式解析文档生成HTML5格式的文档 速度慢不依赖外部扩展 The Worksheet Class The worksheet class represents an Excel worksheet. It handles operations such as writing data to cells or formatting worksheet layout. A worksheet object isn’t instantiated directly. Instead a new worksheet is created by calling the add_worksheet() method from a Workbook() object: 12345678workbook = xlsxwriter.Workbook('filename.xlsx')worksheet1 = workbook.add_worksheet()worksheet2 = workbook.add_worksheet()worksheet1.write('A1', 123)workbook.close() worksheet.write() write(row, col, *args) Write generic data to a worksheet cell. | Parameters: | row – The cell row (zero indexed).col – The cell column (zero indexed).*args – The additional args that are passed to the sub methods such as number, string and cell_format. || —————- | —————————————————————————————— || Returns: | 0: Success. || Returns: | -1: Row or column is out of worksheet bounds. || Returns: | Other values from the called write methods. | Here are some examples: 1234567worksheet.write(0, 0, 'Hello') # write_string()worksheet.write(1, 0, 'World') # write_string()worksheet.write(2, 0, 2) # write_number()worksheet.write(3, 0, 3.00001) # write_number()worksheet.write(4, 0, '=SIN(PI()/4)') # write_formula()worksheet.write(5, 0, '') # write_blank()worksheet.write(6, 0, None) # write_blank() Excel makes a distinction between data types such as strings, numbers, blanks, formulas and hyperlinks. To simplify the process of writing data to an XlsxWriter file the write() method acts as a general alias for several more specific methods: write_string() write_number() write_blank() write_formula() write_datetime() write_boolean() write_url() EnumerateEnumerate is a built-in function of Python. Its usefulness can not be summarized in a single line. Yet most of the newcomers and even some advanced programmers are unaware of it. It allows us to loop over something and have an automatic counter. Here is an example: 12for counter, value in enumerate(some_list): print(counter, value) And there is more! enumerate also accepts an optional argument which makes it even more useful. 123456789my_list = [&apos;apple&apos;, &apos;banana&apos;, &apos;grapes&apos;, &apos;pear&apos;]for c, value in enumerate(my_list, 1): print(c, value)# Output:# 1 apple# 2 banana# 3 grapes# 4 pear The optional argument allows us to tell enumerate from where to start the index. You can also create tuples containing the index and list item using a list. Here is an example: 1234my_list = ['apple', 'banana', 'grapes', 'pear']counter_list = list(enumerate(my_list, 1))print(counter_list)# Output: [(1, 'apple'), (2, 'banana'), (3, 'grapes'), (4, 'pear')]]]></content>
      <categories>
        <category>Python</category>
        <category>Library</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SMTC」0000.py]]></title>
    <url>%2Fposts%2F1847041040.html</url>
    <content type="text"><![CDATA[「SMTC」0000.pyAuthor: JosephLau Description Show me the code 第0000题 Python版 完整题目 题目第 0000 题：将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 类似于图中效果： 思路利用Pillow模块中提供的ImageDraw在图片上画图形或者文字。 首先打开图片，使用Image.open()，在这之前需要导入pillow模块库，import PIL。 123# Creates an object that can be used to draw in the given image.# PIL.ImageDraw.Draw(im, mode=None)imgDraw = ImageDraw.Draw(image) 设置填充字体以及颜色，获取图片大小，好设置填充位置 123456# 颜色fillColor = '#ff0000'# 大小width, height = image.size# 字体myFont = ImageFont.truetype('/Library/Fonts/Tahoma.ttf', size=width//10) 接着imgDraw.text((width-100, 0), &#39;hello&#39;, *fill*=fillColor, *font*=myFont)，填充数字或者单词。 保存图片完成。 Solution123456789101112131415161718192021222324252627282930# -*- coding:utf-8 -*-import PILfrom PIL import Imagefrom PIL import ImageDrawfrom PIL import ImageFontdef add_num(imgName): # 打开图片 image = Image.open(imgName) # Creates an object that can be used to draw in the given image. # PIL.ImageDraw.Draw(im, mode=None) imgDraw = ImageDraw.Draw(image) # 颜色 fillColor = '#ff0000' # 大小 width, height = image.size # 字体 # 使用中文字体时才可以渲染中文 myFont = ImageFont.truetype( '/Library/Fonts/Songti.ttc', size=width//10) imgDraw.text((width-100, 0), u'你好', fill=fillColor, font=myFont) # image.show() image.save('/Users/lau/Documents/Coding/Python/SMTC/0000/result.jpg') return 0if __name__ == "__main__": add_num('/Users/lau/Documents/Coding/Python/SMTC/0000/0000.jpeg') 原图： 效果图： Q&amp;A ModuleNotFoundError: No module named ‘PIL’ 由于pillow模块未安装，所以需要使用pip(3)安装 pip3 install Pillow /usr/local/bin/python3 -m pip install -U pylint --user Pylint 是什么 ImageDraw 官方文档 找不到图片 相对路径找不到时，试试绝对路径。 如果要加汉字呢？编码问题怎么解决？ 换个中文字体 指定utf-8编码]]></content>
      <categories>
        <category>Python</category>
        <category>SMTC</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>SMTC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Show Me The Code]]></title>
    <url>%2Fposts%2F724513738.html</url>
    <content type="text"><![CDATA[Show Me The CodeAuthor: JosephLau Description Python 练习册，每天一个小程序 Fromshow me the code Talk is cheap. Show me the code. —Linus Torvalds 第 0000 题： 将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 类似于图中效果 解答 第 0001 题： 做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？ 解答 123456789101112131415161718192021222324252627282930import mysql.connectorimport randomimport stringimport mysql.connectorforSelect = string.ascii_letters + string.digitsdef gen_code(count, length): for x in range(count): Re = "" for y in range(length): Re += random.choice(forSelect) yield Redef save_code(): conn = mysql.connector.connect(user='root', password='l', database='test') cursor = conn.cursor() codes = gen_code(200, 20) for code in codes: cursor.execute("INSERT INTO `code`(`code`) VALUES(%s)", params=[code]) conn.commit() cursor.close()if __name__ == '__main__': save_code() 第 0002 题: 将 0001 题生成的 200 个激活码（或者优惠券）保存到 MySQL 关系型数据库中。 解答 123456789101112131415161718192021222324252627282930import mysql.connectorimport randomimport stringimport mysql.connectorforSelect = string.ascii_letters + string.digitsdef gen_code(count, length): for x in range(count): Re = "" for y in range(length): Re += random.choice(forSelect) yield Redef save_code(): conn = mysql.connector.connect(user='root', password='l', database='test') cursor = conn.cursor() codes = gen_code(200, 20) for code in codes: cursor.execute("INSERT INTO `code`(`code`) VALUES(%s)", params=[code]) conn.commit() cursor.close()if __name__ == '__main__': save_code() 第 0003 题： 将 0001 题生成的 200 个激活码（或者优惠券）保存到 Redis 非关系型数据库中。 解答 123456789101112131415161718192021222324252627import redisimport randomimport stringforSelect = string.ascii_letters + string.digitsdef gen_code(count, length): for x in range(count): Re = "" for y in range(length): Re += random.choice(forSelect) yield Redef save_code(): r = redis.Redis(host='127.0.0.1', port='6379', password='linyii') codes = gen_code(200, 20) p = r.pipeline() for code in codes: p.sadd('code', code) p.execute() return r.scard('code')if __name__ == '__main__': save_code() 第 0004 题： 任一个英文的纯文本文件，统计其中的单词出现的个数。 解答 1234567891011121314151617181920212223242526272829303132333435363738394041from collections import CounterText = """bands which have connected them with another, and to assume among the powers of the earth, the separate and equal station to which the Laws of Nature and of Nature's God entitle them, a decent respect to the opinions of mankind requires that they should declare the causes which impel them to the separation. We hold these truths to beself-evident, that all men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.--That to secure these rights, Governments are instituted among Men, deriving their just powers from the consent of the governed, --That whenever any Form of Government becomes destructive of these ends, it is the Right of the People to alter or to abolish it, and to institute new Government, laying its foundation on such principles and organizing its powers in such form, as to them shall seem most likely to effect their Safety and Happiness. """# cleanfor char in '-.,\n': Text = Text.replace(char, ' ')Text = Text.lower()word_list = Text.split()# solution 1res = Counter(word_list).most_common()# solution 2# 使用字典，key-value，单词与个数一一对应d = &#123;&#125;for word in word_list: # 找到个数然后+1，没有就默认0然后+1 # dict.get(key, default = None) # key − This is the Key to be searched in the dictionary. # default − This is the Value to be returned in case key does not exist. # This method return a value for the given key. If key is not available, then returns default value None. d[word] = d.get(word, 0)+1# 使用列表为了排序word_freq = []for key, value in d.items(): word_freq.append((value, key))word_freq.sort(reverse=True)# solution 3# 不使用get()方法d = &#123;&#125;for word in word_list: if word not in d: d[word] = 0 d[word] += 1word_freq = []for key, value in d.items(): word_freq.append((value, key))word_freq.sort(reverse=True) 第 0005 题： 你有一个目录，装了很多照片，把它们的尺寸变成都不大于 iPhone5 分辨率的大小。 解答 12345678910111213141516from PIL import Imageimport ospath='/Users/lau/Pictures'resPath='/Users/lau/Desktop'if not os.path.isdir(resPath): os.mkdir(resPath)for fileName in os.listdir(path): # mac系统会出现.DS_Store文件，会报错，所以简单的办法就是 # 去这个文件夹删除隐藏文件 picPath=os.path.join(path,fileName) print(picPath) with Image.open(picPath) as im: im.thumbnail((1366,640)) im.save(resPath+'/f_'+fileName,'jpeg') 第 0006 题： 你有一个目录，放了你一个月的日记，都是 txt，为了避免分词的问题，假设内容都是英文，请统计出你认为每篇日记最重要的词。 解答 第 0007 题： 有个目录，里面是你自己写过的程序，统计一下你写过多少行代码。包括空行和注释，但是要分别列出来。 解答 第 0008 题： 一个HTML文件，找出里面的正文。 解答 123456789101112131415161718192021# -*- coding: utf-8 -*-from bs4 import BeautifulSoupimport osdef html_body(filesPath): if not os.path.isdir(filesPath): return filesList = os.listdir(filesPath) for file in filesList: filePath = os.path.join(filesPath, file) if os.path.isfile(filePath) and os.path.splitext(filePath)[1] == '.html': with open(filePath) as fileHtml: text = BeautifulSoup(fileHtml, 'lxml') content = text.getText().strip('\n') print(content)if __name__ == "__main__": html_body('./SMTC/source/0008') 第 0009 题： 一个HTML文件，找出里面的链接。 解答 12345678910111213141516171819202122232425# -*- coding: utf-8 -*-from bs4 import BeautifulSoupimport osdef html_link(filesPath): if not os.path.isdir(filesPath): return filesList = os.listdir(filesPath) links = [] for file in filesList: filePath = os.path.join(filesPath, file) if os.path.isfile(filePath) and os.path.splitext(filePath)[1] == '.html': with open(filePath) as fileHtml: text = BeautifulSoup(fileHtml, 'lxml') # 找到a标签 for link in text.find_all('a'): # 获取链接 links.append(link.get('href')) print(links)if __name__ == "__main__": html_link('./SMTC/source/0008') 第 0010 题： 使用 Python 生成类似于下图中的字母验证码图片 阅读资料 解答 1234567891011121314151617181920212223242526272829303132333435363738394041# -*- coding: utf-8 -*-# 第 0010 题：使用 Python 生成类似于下图中的字母验证码图片from PIL import Image, ImageDraw, ImageFont, ImageFilterimport randomdef randomLetter(): # 大写字母65-90 # 数字转字符 return chr(random.randint(65, 90))def randomColor(argc): if argc == 1: return (random.randint(64, 255), random.randint(64, 255), random.randint(64, 255)) else: return (random.randint(0, 100), random.randint(0, 100), random.randint(0, 100))def gen_codepic(savePath): width = 60*4 height = 60 img = Image.new('RGB', (width, height), (255, 255, 255)) # 字体 font = ImageFont.truetype( '/Library/Fonts/Songti.ttc', 36) imgDraw = ImageDraw.Draw(img) for x in range(width): for y in range(height): imgDraw.point((x, y), fill=randomColor(1)) for index in range(4): imgDraw.text((60*index+20, 5), randomLetter(), font=font, fill=randomColor(2)) img = img.filter(ImageFilter.BLUR) img.save(savePath+'codepic.jpg', 'JPEG')if __name__ == "__main__": gen_codepic('./SMTC/source/0010/') 第 0011 题： 敏感词文本文件 filtered_words.txt，里面的内容为以下内容，当用户输入敏感词语时，则打印出 Freedom，否则打印出 Human Rights。 1234567891011北京程序员公务员领导牛比牛逼你娘你妈lovesexjiangge 解答 12345678910111213141516171819202122# -*- coding: utf-8 -*-# 敏感词文本文件 filtered_words.txt，里面的内容为以下内容，当用户输入敏感词语时，则打印出 Freedom，否则打印出 Human Rights。import osdef Freedom(filesPath): if not os.path.isdir(filesPath): return fileList=os.listdir(filesPath) for file in fileList: filePath=os.path.join(filesPath,file) if os.path.isfile(filePath) and os.path.split(filePath)[1]=='filtered_words.txt': with open(filePath) as text: text=text.read().split('\n') getInput=input('input:') if getInput in text: print('Freedom') else: print('Human Rights')if __name__ == "__main__": Freedom('./SMTC/source/0011') 第 0012 题： 敏感词文本文件 filtered_words.txt，里面的内容 和 0011题一样，当用户输入敏感词语，则用 星号 替换，例如当用户输入「北京是个好城市」，则变成「*是个好城市」。 解答 1234567891011121314151617181920212223# -*- coding: utf-8 -*-# 敏感词文本文件 filtered_words.txt，里面的内容 和 0011题一样，当用户输入敏感词语，则用 星号 * 替换，例如当用户输入「北京是个好城市」，则变成「**是个好城市」。import osdef Freedom(filePath): word_filter = set() with open(filePath+'filtered_words.txt') as f: for word in f.readlines(): word_filter.add(word.strip()) while True: s = input('input:') if s == 'exit': return for w in word_filter: if w in s: s = s.replace(w, '*'*len(w)) print(s)if __name__ == "__main__": Freedom('./SMTC/source/0011/') 第 0013 题： 用 Python 写一个爬图片的程序，爬 这个链接里的日本妹子图片 :-) 参考代码 解答 12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding: utf-8 -*-# 用 Python 写一个爬图片的程序，爬这个链接里的日本妹子图片(http://tieba.baidu.com/p/2166231880) :-)import requestsimport urllib.requestfrom bs4 import BeautifulSoupimport osdef spy_pic(url, savePath, header): response = requests.get(url, headers=header) content = BeautifulSoup(response.content, 'lxml') img_tag = content.find_all('img') img_link = [] for i in img_tag: if i.get('pic_type') == '0': img_link.append(i.get('src')) index = 0 if not os.path.exists(savePath): os.mkdir(savePath) for link in img_link: pic_html = requests.get(link) picPath = savePath+str(index+1)+'.'+link.split('.')[-1] with open(picPath, 'wb') as pic: pic.write(pic_html.content) pic.flush pic.close() print('第&#123;0&#125;张图片抓取完成'.format(index+1)) index += 1 print('抓取完成！')if __name__ == "__main__": reqHeader = &#123; 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7', 'Cookie': 'TIEBA_USERTYPE=7b00a4223cb9934b1b9270ad; wise_device=0; bdshare_firstime=1549795215089; Hm_lvt_98b9d8c2fd6608d564bf2ac2ae642948=1549795215; Hm_lvt_287705c8d9e2073d13275b18dbd746dc=1549795216; Hm_lpvt_98b9d8c2fd6608d564bf2ac2ae642948=1549847500; Hm_lpvt_287705c8d9e2073d13275b18dbd746dc=1549847500; BAIDUID=48130036CAF55267908C2180103698DC:FG=1; cflag=13%3A3; BDUSS=HN6WUx-aGVQMGlNR0NlcEhCd0pjUkJVQXpBbWFxY3hYTjZNfmozdjV6RFlkb2hjQVFBQUFBJCQAAAAAAAAAAAEAAAAZhpwmbmljZWxpdXppAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANjpYFzY6WBcO; TIEBAUID=35f770fc8e0ac33633210842; STOKEN=42c9d0d4dc2e420802cf269968ec38e4101a2a5d7f095a603f36b0261f413597', 'Host': 'tieba.baidu.com', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.96 Safari/537.36' &#125; spy_pic('http://tieba.baidu.com/p/2166231880', './SMTC/source/0013/', reqHeader ) 效果展示 参考 【Python爬虫系列】使用requests爬取图片 小说爬虫 第 0014 题： 纯文本文件 student.txt为学生信息, 里面的内容（包括花括号）如下所示： 12345&#123; &quot;1&quot;:[&quot;张三&quot;,150,120,100], &quot;2&quot;:[&quot;李四&quot;,90,99,95], &quot;3&quot;:[&quot;王五&quot;,60,66,68]&#125; 请将上述内容写到 student.xls 文件中，如下图所示： 阅读资料 腾讯游戏开发 XML 和 Excel 内容相互转换 解答 123456789101112131415161718192021222324# -*- coding: utf-8 -*-# 纯文本文件 student.txt为学生信息, 里面的内容（包括花括号）如下所示from xlwt import Workbookimport jsondef xml2exl(filePath): with open(filePath+'student.txt', 'r') as dic: content = json.load(dic) workbook = Workbook() sheet = workbook.add_sheet('student', cell_overwrite_ok=True) # 输出元素序号 for index, (key, values) in enumerate(content.items()): # sheet.write(row, col, *args) # 输入第一列数据 sheet.write(index, 0, key) for i, value in enumerate(values): # 输入每一行第二列开始的数据 sheet.write(index, i+1, value) workbook.save(filePath+'student.xls')if __name__ == "__main__": xml2exl('./SMTC/source/0014/') 第 0015 题： 12345&#123; &quot;1&quot; : &quot;上海&quot;, &quot;2&quot; : &quot;北京&quot;, &quot;3&quot; : &quot;成都&quot;&#125; 请将上述内容写到 city.xls 文件中，如下图所示： 解答 1234567891011121314151617181920212223# -*- coding: utf-8 -*-# 纯文本文件 city.txt为城市信息, 里面的内容（包括花括号）如下所示：from xlwt import Workbookimport jsondef xml2exl(filePath): with open(filePath+'city.txt', 'r') as f: content = json.load(f) workBook = Workbook() sheet = workBook.add_sheet('city', cell_overwrite_ok=True) # enumerate可以分开词语 for index, (key, value) in enumerate(content.items()): sheet.write(index, 0, key) # 与上一题不同的是 # 这题中的value只有一列值 # 不需要使用enumerate sheet.write(index, 1, value) workBook.save(filePath+'city.xls')if __name__ == "__main__": xml2exl('./SMTC/source/0015/') 第 0016 题： 纯文本文件 numbers.txt, 里面的内容（包括方括号）如下所示： 12345[ [1, 82, 65535], [20, 90, 13], [26, 809, 1024]] 请将上述内容写到 numbers.xls 文件中，如下图所示： 解答 12345678910111213141516171819# -*- coding: utf-8 -*-# 纯文本文件 numbers.txt, 里面的内容（包括方括号）from xlwt import Workbookimport jsondef json2xls(filePath): with open(filePath+'numbers.txt', 'r') as f: content = json.load(f) workbook = Workbook() sheet = workbook.add_sheet('numbers', cell_overwrite_ok=True) for row, list in enumerate(content): for col, value in enumerate(list): sheet.write(row, col, value) workbook.save(filePath+'numbers.xls')if __name__ == "__main__": json2xls('./SMTC/source/0016/') 第 0017 题： 将 第 0014 题中的 student.xls 文件中的内容写到 student.xml 文件中，如 下所示： 1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;root&gt;&lt;students&gt;&lt;!-- 学生信息表 &quot;id&quot; : [名字, 数学, 语文, 英文]--&gt;&#123; &quot;1&quot; : [&quot;张三&quot;, 150, 120, 100], &quot;2&quot; : [&quot;李四&quot;, 90, 99, 95], &quot;3&quot; : [&quot;王五&quot;, 60, 66, 68]&#125;&lt;/students&gt;&lt;/root&gt; 解答 12345678910111213141516171819202122232425262728# -*- coding: utf-8 -*-# 将 第 0014 题中的 student.xls 文件中的内容写到 student.xml 文件中from xml.dom.minidom import Documentimport xlrddef xls2xml(filePath): doc = Document() root = doc.createElement('root') doc.appendChild(root) students = doc.createElement('students') root.appendChild(students) comment = doc.createComment('学生信息表\n\t\t"id" : [名字, 数学, 语文, 英文]\n\t\t') students.appendChild(comment) content = xlrd.open_workbook(filePath+'student.xls') sheet = content.sheet_by_index(0) nrows = sheet.nrows sheet_content = dict() for i in range(nrows): sheet_content[str(sheet.cell(i, 0).value)] = sheet.row_values(i)[1:] students.appendChild(doc.createTextNode(str(sheet_content))) with open(filePath+'student.xml', 'w') as student_xml: student_xml.write(doc.toprettyxml())if __name__ == "__main__": xls2xml('./SMTC/source/0014/') 第 0018 题： 将 第 0015 题中的 city.xls 文件中的内容写到 city.xml 文件中，如下 所示： 12345678910111213&lt;?xmlversion=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;root&gt;&lt;cities&gt;&lt;!-- 城市信息--&gt;&#123; &quot;1&quot; : &quot;上海&quot;, &quot;2&quot; : &quot;北京&quot;, &quot;3&quot; : &quot;成都&quot;&#125;&lt;/cities&gt;&lt;/root&gt; 解答 12345678910111213141516171819202122232425262728# -*- coding: utf-8 -*-# 将 第 0015 题中的 city.xls 文件中的内容写到 city.xml 文件中from xml.dom.minidom import Documentimport xlrddef xls2xml(filePath): doc = Document() root = doc.createElement('root') doc.appendChild(root) cities = doc.createElement('cities') root.appendChild(cities) comment = doc.createComment('\n\t\t城市信息\n\t\t') cities.appendChild(comment) content = xlrd.open_workbook(filePath+'city.xls', 'r') sheet = content.sheet_by_index(0) nrows = sheet.nrows sheet_content = dict() for i in range(nrows): sheet_content[sheet.cell(i, 0).value] = sheet.row_values(i)[1:] cities.appendChild(doc.createTextNode(str(sheet_content))) with open(filePath+'city.xml', 'w') as f: f.write(doc.toprettyxml())if __name__ == "__main__": xls2xml('./SMTC/source/0015/') 第 0019 题： 将 第 0016 题中的 numbers.xls 文件中的内容写到 numbers.xml 文件中，如下 所示： 123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;root&gt;&lt;numbers&gt;&lt;!-- 数字信息--&gt;[ [1, 82, 65535], [20, 90, 13], [26, 809, 1024]]&lt;/numbers&gt;&lt;/root&gt; 解答 123456789101112131415161718192021222324252627# -*- coding: utf-8 -*-# 将 第 0016 题中的 numbers.xls 文件中的内容写到 numbers.xml 文件中from xml.dom.minidom import Documentimport xlrddef xls2xml(filePath): doc = Document() root = doc.createElement('root') doc.appendChild(root) numbers = doc.createElement('numbers') root.appendChild(numbers) numbers.appendChild(doc.createComment('\n\t\t数字信息\n\t\t')) content = xlrd.open_workbook(filePath+'numbers.xls') sheet = content.sheet_by_index(0) nrows = sheet.nrows sheet_list = list() for i in range(nrows): sheet_list.append(sheet.row_values(i)) numbers.appendChild(doc.createTextNode(str(sheet_list))) with open(filePath+'numbers.xml', 'w') as f: f.write(doc.toprettyxml())if __name__ == "__main__": xls2xml('./SMTC/source/0016/') 第 0020 题： 登陆中国联通网上营业厅 后选择「自助服务」 —&gt; 「详单查询」，然后选择你要查询的时间段，点击「查询」按钮，查询结果页面的最下方，点击「导出」，就会生成类似于 2014年10月01日～2014年10月31日通话详单.xls 文件。写代码，对每月通话时间做个统计。 解答 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# -*- coding: utf-8 -*-import timeimport reimport xlrddef str2sec(str): sec = 0 time_re = re.compile(r'(\d+)(\D+)') time_list = time_re.findall(str) for time_item in time_list: if time_item[1] == '秒': sec += int(time_item[0]) elif time_item[1] == '分': sec += int(time_item[0]) * 60 elif time_item[1] == '小时': sec += int(time_item[0]) * 3600 return secdef sec2str(sec): h = sec // 3600 m = sec % 3600 // 60 s = sec % 60 return '%s小时%s分%s秒' % (h, m, s)def minidata(): all_time = 0 # 使用总时间（秒） start_time = time.mktime(time.strptime('2018-09-01', '%Y-%m-%d')) end_time = time.mktime(time.strptime('2018-10-01', '%Y-%m-%d')) data = xlrd.open_workbook('./SMTC/source/0020/2018年09月语音通信.xls') table = data.sheet_by_index(0) nrows = table.nrows for i in range(nrows): if i == 0: continue this_time = time.mktime(time.strptime( table.row_values(i)[2], '%Y-%m-%d %H:%M:%S')) if this_time &gt;= start_time and this_time &lt; end_time: all_time += str2sec(table.row_values(i)[3]) print('总时间:'+sec2str(all_time))if __name__ == "__main__": minidata() 第 0021 题： 通常，登陆某个网站或者 APP，需要使用用户名和密码。密码是如何加密后存储起来的呢？请使用 Python 对密码加密。 阅读资料 用户密码的存储与 Python 示例 阅读资料 Hashing Strings with Python 阅读资料 Python’s safest method to store and retrieve passwords from a database 解答 1234567891011121314151617181920212223242526272829# -*- coding: utf-8 -*-import osfrom hashlib import sha256from hmac import HMACdef encrypt_passwd(password, salt=None): if salt is None: salt = os.urandom(8) assert 8 == len(salt) assert isinstance(salt, bytes) assert isinstance(password, str) if isinstance(password, str): password = password.encode('utf-8') assert isinstance(password, bytes) for i in range(10): password = HMAC(password, salt, sha256).digest() # print('password:', password) return salt+passworddef validate_passwd(hashed, input): return hashed == encrypt_passwd(input, hashed[:8])if __name__ == "__main__": hashed = encrypt_passwd('123456') print(validate_passwd(hashed, '123456')) 第 0022 题： iPhone 6、iPhone 6 Plus 早已上市开卖。请查看你写得 第 0005 题的代码是否可以复用。 第 0023 题： 使用 Python 的 Web 框架，做一个 Web 版本 留言簿 应用。 阅读资料：Python 有哪些 Web 框架 第 0024 题： 使用 Python 的 Web 框架，做一个 Web 版本 TodoList 应用。 第 0025 题： 使用 Python 实现：对着电脑吼一声,自动打开浏览器中的默认网站。 123例如，对着笔记本电脑吼一声“百度”，浏览器自动打开百度首页。关键字：Speech to Text 参考思路：1：获取电脑录音—&gt;WAV文件 python record wav 2：录音文件—&gt;文本 123STT: Speech to TextSTT API Google API 3:文本—&gt;电脑命令]]></content>
      <categories>
        <category>Uncategoried</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python Note]]></title>
    <url>%2Fposts%2F1999510617.html</url>
    <content type="text"><![CDATA[Python 「Python简明教程」&amp;&amp; JosephLau Description Python个人笔记 持续更新 简介 之所以，我们把Python，蟒蛇，作为此计算机语言的名字，是有其历史典故的： Python语言的创始人，吉多·范罗苏姆（Guido van Rossum）在1989年圣诞节期间，在阿姆斯特丹，为了打发圣诞节的无趣，决心开发一个新的脚本解释程序，而在给自己新创造的计算机语言起名字的时候，由于其是，自于七十年代风靡全球的英国六人喜剧团体，巨蟒剧团（Monty Python）的忠实粉丝，所以，就把此计算机语言的名字叫做：Python。 Python是一种脚本语言、解释性语言「无需编译源码，可直接运行」、交互性语言、面向对象的语言。 代码缩进决定了Python代码的逻辑关系，而不仅仅是为了好看 安装Mac下安装非常简单，一条命令：brew install python3，只不过有时候需要更新Homebrew，比较耗费时间。 如果你没有Homebrew，使用/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;安装完成后，再安装Python。 遇到的问题与解决方案 pip3 install和pip3 list 出现问题 12345678910111213141516171819202122Exception:Traceback (most recent call last): File "/usr/local/lib/python3.7/site-packages/pip/_vendor/pkg_resources/__init__.py", line 2584, in version return self._version File "/usr/local/lib/python3.7/site-packages/pip/_vendor/pkg_resources/__init__.py", line 2691, in __getattr__ raise AttributeError(attr)AttributeError: _versionDuring handling of the above exception, another exception occurred:Traceback (most recent call last): File "/usr/local/lib/python3.7/site-packages/pip/_internal/cli/base_command.py", line 179, in main status = self.run(options, args) File "/usr/local/lib/python3.7/site-packages/pip/_internal/commands/list.py", line 148, in run self.output_package_listing(packages, options) File "/usr/local/lib/python3.7/site-packages/pip/_internal/commands/list.py", line 205, in output_package_listing data, header = format_for_columns(packages, options) File "/usr/local/lib/python3.7/site-packages/pip/_internal/commands/list.py", line 271, in format_for_columns row = [proj.project_name, proj.version] File "/usr/local/lib/python3.7/site-packages/pip/_vendor/pkg_resources/__init__.py", line 2589, in version raise ValueError(tmpl % self.PKG_INFO, self)ValueError: ("Missing 'Version:' header and/or METADATA file", Unknown [unknown version] (/usr/local/lib/python3.7/site-packages)) 解决方法： 目前还不知道是因为什么原因引起的 不过找到了解决办法 https://stackoverflow.com/questions/54410773/pip3-list-failed-completely-and-returing-error This was pretty difficult to solve, but I thing the gest of it is that if there are any folders in site-packages which have a - at the beginning, they are causing it. 12cd /usr/local/lib/python3.7/site-packagesrm -rf ./-ip-19.0.1.dist-info 提高效率正则表达式lambda基础字符串与基本规则 字符串 单引号与双引号作用相同、三引号‘’&#39;/“&quot;”用来指定多行字符串。 更多用法： 123456789101112131415# 这是一个字符串对象name = 'Swaroop'if name.startswith('Swa'): print('Yes, the string starts with "Swa"')if 'a' in name: print('Yes, it contains the string "a"')if name.find('war') != -1: print('Yes, it contains the string "war"')delimiter = '_*_'mylist = ['Brazil', 'Russia', 'India', 'China']print(delimiter.join(mylist)) 输出： 12345$ python ds_str_methods.pyYes, the string starts with &quot;Swa&quot;Yes, it contains the string &quot;a&quot;Yes, it contains the string &quot;war&quot;Brazil_*_Russia_*_India_*_China 格式化：format() 例如： 1234567891011121314151617181920age = 20name = 'Swaroop'print('&#123;0&#125; was &#123;1&#125; years old when he wrote this book'.format(name, age))print('Why is &#123;0&#125; playing with that python?'.format(name))# 输出：Swaroop was 20 years old when he wrote this bookWhy is Swaroop playing with that python?# 对于浮点数 '0.333' 保留小数点(.)后三位print('&#123;0:.3f&#125;'.format(1.0/3))# 使用下划线填充文本，并保持文字处于中间位置# 使用 (^) 定义 '___hello___'字符串长度为 11print('&#123;0:_^11&#125;'.format('hello'))# 基于关键词输出 'Swaroop wrote A Byte of Python' print('&#123;name&#125; wrote &#123;book&#125;'.format(name='Swaroop', book='A Byte of Python'))# 输出：0.333___hello___Swaroop wrote A Byte of Python print() 由于我们正在讨论格式问题，就要注意 print 总是会以一个不可见的“新一行”字符（\n）结尾，因此重复调用 print将会在相互独立的一行中分别打印。为防止打印过程中出现这一换行符，你可以通过 end指定其应以空白结尾： 12print('a', end='')print('b', end='') 输出结果如下： 1ab 或者你通过 end 指定以空格结尾： 123print('a', end=' ')print('b', end=' ')print('c') 输出结果如下： 1a b c end 参数用在print函数中，目的是打印一行并允许下一次打印在同一行继续。这是一个让 print 能够不在打印的末尾打印出\n（新行换行符）符号的小窍门。 转义字符：\ 以及：在一个字符串中，一个放置在末尾的反斜杠表示字符串将在下一行继续，但不会添加新的一行。 如果你需要指定一些未经过特殊处理的字符串，比如转义序列，那么你需要在字符串前增加 r 或 R 来指定一个原始（Raw）字符串。 在处理正则表达式时应全程使用原始字符串。否则，将会有大量 Backwhacking 需要处理。举例说明的话，反向引用可以通过 &#39;\\1&#39; 或 r&#39;\1&#39; 来实现。 命名规则 变量是标识符的一个例子。标识符（Identifiers） 是为 某些东西 提供的给定名称。在你命名标识符时，你需要遵守以下规则： 第一个字符必须是字母表中的字母（大写 ASCII 字符或小写 ASCII 字符或 Unicode 字符）或下划线（_）。 标识符的其它部分可以由字符（大写 ASCII 字符或小写 ASCII 字符或 Unicode 字符）、下划线（_）、数字（0~9）组成。 标识符名称区分大小写。例如，myname 和 myName 并不等同。要注意到前者是小写字母 n 而后者是大写字母 N。 有效 的标识符名称可以是 i 或 name_2_3 ，无效 的标识符名称可能是 2things，this is spaced out，my-name 和 &gt;a1b2_c3。 缩进 使用四个空格来缩进。这是来自 Python 语言官方的建议。好的编辑器会自动为你完成这一工作。请确保你在缩进中使用数量一致的空格，否则你的程序将不会运行，或引发不期望的行为。 运算符与表达式 运算符 +（加） 两个对象相加。 3+5 则输出 8。&#39;a&#39; + &#39;b&#39; 则输出 &#39;ab&#39;。 -（减） 从一个数中减去另一个数，如果第一个操作数不存在，则假定为零。 -5.2 将输出一个负数，50 - 24 输出 26。 *（乘） 给出两个数的乘积，或返回字符串重复指定次数后的结果。 2 * 3 输出 6。&#39;la&#39; * 3 输出 &#39;lalala&#39;。 ** （乘方） 返回 x 的 y 次方。 3 ** 4 输出 81 （即 3 * 3 * 3 * 3）。 / （除） x 除以 y 13 / 3 输出 4.333333333333333。 // （整除） x 除以 y 并对结果向下取整至最接近的整数。 13 // 3 输出 4。 -13 // 3 输出 -5。 % （取模） 返回除法运算后的余数。 13 % 3 输出 1。-25.5 % 2.25 输出 1.5。 &lt;&lt; （左移） 将数字的位向左移动指定的位数。（每个数字在内存中以二进制数表示，即 0 和1） 2 &lt;&lt; 2 输出 8。 2 用二进制数表示为 10。 向左移 2 位会得到 1000 这一结果，表示十进制中的 8。 &gt;&gt; （右移） 将数字的位向右移动指定的位数。 11 &gt;&gt; 1 输出 5。 11 在二进制中表示为 1011，右移一位后输出 101 这一结果，表示十进制中的 5。 &amp; （按位与） 对数字进行按位与操作。 5 &amp; 3 输出 1。 | （按位或） 对数字进行按位或操作。 5 | 3 输出 7。 ^（按位异或） 对数字进行按位异或操作。 5 ^ 3 输出 6。 ~ （按位取反） x 的按位取反结果为 -(x+1)。 ~5 输出 -6。有关本例的更多细节可以参阅：http://stackoverflow.com/a/11810203 。 &lt; （小于） 返回 x 是否小于 y。所有的比较运算符返回的结果均为 True 或 False。请注意这些名称之中的大写字母。 5 &lt; 3 输出 False，3 &lt; 6 输出 True。 比较可以任意组成组成链接：3 &lt; 5 &lt; 7 返回 True。 &gt; （大于） 返回 x 是否大于 y。 5 &gt; 3 返回 True。如果两个操作数均为数字，它们首先将会被转换至一种共同的类型。否则，它将总是返回 False。 &lt;= （小于等于） 返回 x 是否小于或等于 y。 x = 3; y = 6; x&lt;=y 返回 True。 &gt;= （大于等于） 返回 x 是否大于或等于 y。 x = 4; y = 3; x&gt;=3 返回 True。 == （等于） 比较两个对象是否相等。 x = 2; y = 2; x == y 返回 True。 x = &#39;str&#39;; y = &#39;stR&#39;; x == y 返回 False。 x = &#39;str&#39;; y = &#39;str&#39;; x == y 返回 True。 != （不等于） 比较两个对象是否不相等。 x = 2; y = 3; x != y 返回 True。 not （布尔“非”） 如果 x 是 True，则返回 False。如果 x 是 False，则返回 True。 x = True; not x 返回 False。 and （布尔“与”） 如果 x 是 False，则 x and y 返回 False，否则返回 y 的计算值。 当 x 是 False 时，x = False; y = True; x and y 将返回 False。在这一情境中，Python 将不会计算 y，因为它已经了解 and 表达式的左侧是 False，这意味着整个表达式都将是 False 而不会是别的值。这种情况被称作短路计算（Short-circuit Evaluation）。 or（布尔“或”） 如果 x 是 True，则返回 True，否则它将返回 y 的计算值。 x = Ture; y = False; x or y 将返回 Ture。在这里短路计算同样适用。 运算顺序 下面是从 Python 参考手册 中引用而来。你最好使用圆括号操作符来对运算符与操作数进行分组，以更加明确地指定优先级。这也能使得程序更加可读。你可以阅读改变运算顺序来了解更多的细节。 lambda：Lambda 表达式 if - else ：条件表达式 or：布尔“或” and：布尔“与” not x：布尔“非” in, not in, is, is not, &lt;, &lt;=, &gt;, &gt;=, !=, ==：比较，包括成员资格测试（Membership Tests）和身份测试（Identity Tests）。 |：按位或 ^：按位异或 &amp;：按位与 &lt;&lt;, &gt;&gt;：移动 +, -：加与减 *, /, //, %：乘、除、整除、取余 +x, -x, ~x：正、负、按位取反 **：求幂 x[index], x[index:index], x(arguments...), x.attribute：下标、切片、调用、属性引用 (expressions...), [expressions...], {key: value...}, {expressions...}：表示绑定或元组、表示列表、表示字典、表示集合 控制语句 if语句 12345678910111213141516171819number = 23guess = int(input('Enter an integer : '))if guess == number: # 新块从这里开始 print('Congratulations, you guessed it.') print('(but you do not win any prizes!)') # 新块在这里结束elif guess &lt; number: # 另一代码块 print('No, it is a little higher than that') # 你可以在此做任何你希望在该代码块内进行的事情else: print('No, it is a little lower than that') # 你必须通过猜测一个大于（&gt;）设置数的数字来到达这里。print('Done')# 这最后一句语句将在# if 语句执行完毕后执行。 for 1234for i in range(1, 5): print(i)else: print('The for loop is over') while 1234567891011121314151617181920212223242526272829number = 23running = Truewhile running: guess = int(input('Enter an integer : ')) if guess == number: print('Congratulations, you guessed it.') # 这将导致 while 循环中止 running = False elif guess &lt; number: print('No, it is a little higher than that.') else: print('No, it is a little lower than that.')else: print('The while loop is over.') # 在这里你可以做你想做的任何事print('Done')# 输出Enter an integer : 50No, it is a little lower than that.Enter an integer : 22No, it is a little higher than that.Enter an integer : 23Congratulations, you guessed it.The while loop is over.Done break break 语句用以中断（Break）循环语句，也就是中止循环语句的执行，即使循环条件没有变更为 False，或队列中的项目尚未完全迭代依旧如此。 有一点需要尤其注意，如果你 中断 了一个 for 或 while 循环，任何相应循环中的 else 块都将不会被执行。 continue continue 语句用以告诉 Python 跳过当前循环块中的剩余语句，并继续该循环的下一次迭代，同样能用于 for 循环。 函数1234567def say_hello(): # 该块属于这一函数 print('hello world')# 函数结束say_hello() # 调用函数say_hello() # 再次调用函数 参数 在定义函数时给定的名称称作“形参”（Parameters），在调用函数时你所提供给函数的值称作“实参”（Arguments）。 局部变量 当你在一个函数的定义中声明变量时，它们不会以任何方式与身处函数之外但具有相同名称的变量产生关系，也就是说，这些变量名只存在于函数这一局部（Local）。这被称为变量的作用域（Scope）。所有变量的作用域是它们被定义的块，从定义它们的名字的定义点开始。 全局声明 global 语句用以声明 x 是一个全局变量——因此，当我们在函数中为 x 进行赋值时，这一改动将影响到我们在主代码块中使用的 x 的值。 你可以在同一句 global 语句中指定不止一个的全局变量，例如 global x, y, z。 模块 模块的 __name__ 每个模块都有一个名称，而模块中的语句可以找到它们所处的模块的名称。这对于确定模块是独立运行的还是被导入进来运行的这一特定目的来说大为有用。正如先前所提到的，当模块第一次被导入时，它所包含的代码将被执行。我们可以通过这一特性来使模块以不同的方式运行，这取决于它是为自己所用还是从其它从的模块中导入而来。这可以通过使用模块的 __name__ 属性来实现。 1234if __name__ == '__main__': print('This program is being run by itself')else: print('I am being imported from another module') 输出： 1234567$ python module_using_name.pyThis program is being run by itself$ python&gt;&gt;&gt; import module_using_nameI am being imported from another module&gt;&gt;&gt; Python之蝉 Python 的一大指导原则是“明了胜过晦涩”。你可以通过在 Python 中运行 import this 来了解更多内容。 12345678910111213141516171819202122&gt;&gt;&gt; import thisThe Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren&apos;t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you&apos;re Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it&apos;s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let&apos;s do more of those! 数据结构 list 12345678910111213141516171819202122# This is my shopping listshoplist = ['apple', 'mango', 'carrot', 'banana']print('I have', len(shoplist), 'items to purchase.')print('These items are:', end=' ')for item in shoplist: print(item, end=' ')print('\nI also have to buy rice.')shoplist.append('rice')print('My shopping list is now', shoplist)print('I will sort my list now')shoplist.sort()print('Sorted shopping list is', shoplist)print('The first item I will buy is', shoplist[0])olditem = shoplist[0]del shoplist[0]print('I bought the', olditem)print('My shopping list is now', shoplist) 输出： 12345678910$ python ds_using_list.pyI have 4 items to purchase.These items are: apple mango carrot bananaI also have to buy rice.My shopping list is now [&apos;apple&apos;, &apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;, &apos;rice&apos;]I will sort my list nowSorted shopping list is [&apos;apple&apos;, &apos;banana&apos;, &apos;carrot&apos;, &apos;mango&apos;, &apos;rice&apos;]The first item I will buy is appleI bought the appleMy shopping list is now [&apos;banana&apos;, &apos;carrot&apos;, &apos;mango&apos;, &apos;rice&apos;] If you want access to the index of each element within the body of a loop, use the built-in enumerate function: 1234animals = ['cat', 'dog', 'monkey']for idx, animal in enumerate(animals): print('#%d: %s' % (idx + 1, animal))# Prints "#1: cat", "#2: dog", "#3: monkey", each on its own line 元组 元组（Tuple）用于将多个对象保存到一起。你可以将它们近似地看作列表，但是元组不能提供列表类能够提供给你的广泛的功能。元组的一大特征类似于字符串，它们是不可变的，也就是说，你不能编辑或更改元组。 元组通常用于保证某一语句或某一用户定义的函数可以安全地采用一组数值，意即元组内的数值不会改变。 1234567891011121314# 我会推荐你总是使用括号# 来指明元组的开始与结束# 尽管括号是一个可选选项。# 明了胜过晦涩，显式优于隐式。zoo = ('python', 'elephant', 'penguin')print('Number of animals in the zoo is', len(zoo))new_zoo = 'monkey', 'camel', zooprint('Number of cages in the new zoo is', len(new_zoo))print('All animals in new zoo are', new_zoo)print('Animals brought from old zoo are', new_zoo[2])print('Last animal brought from old zoo is', new_zoo[2][2])print('Number of animals in the new zoo is', len(new_zoo)-1+len(new_zoo[2])) 输出： 1234567$ python ds_using_tuple.pyNumber of animals in the zoo is 3Number of cages in the new zoo is 3All animals in new zoo are (&apos;monkey&apos;, &apos;camel&apos;, (&apos;python&apos;, &apos;elephant&apos;, &apos;penguin&apos;))Animals brought from old zoo are (&apos;python&apos;, &apos;elephant&apos;, &apos;penguin&apos;)Last animal brought from old zoo is penguinNumber of animals in the new zoo is 5 字典 键值必须是唯一，你只能使用不可变的对象（如字符串）作为字典的键值，但是你可以使用可变或不可变的对象作为字典中的值。基本上这段话也可以翻译为你只能使用简单对象作为键值。 123456789101112131415161718192021222324# “ab”是地址（Address）簿（Book）的缩写ab = &#123; 'Swaroop': 'swaroop@swaroopch.com', 'Larry': 'larry@wall.org', 'Matsumoto': 'matz@ruby-lang.org', 'Spammer': 'spammer@hotmail.com'&#125;print("Swaroop's address is", ab['Swaroop'])# 删除一对键值—值配对del ab['Spammer']print('\nThere are &#123;&#125; contacts in the address-book\n'.format(len(ab)))for name, address in ab.items(): print('Contact &#123;&#125; at &#123;&#125;'.format(name, address))# 添加一对键值—值配对ab['Guido'] = 'guido@python.org'if 'Guido' in ab: print("\nGuido's address is", ab['Guido']) 输出： 12345678910$ python ds_using_dict.pySwaroop's address is swaroop@swaroopch.comThere are 3 contacts in the address-bookContact Swaroop at swaroop@swaroopch.comContact Matsumoto at matz@ruby-lang.orgContact Larry at larry@wall.orgGuido's address is guido@python.org A dictionary stores (key, value) pairs, similar to a Map in Java or an object in Javascript. You can use it like this: 12345678910d = &#123;'cat': 'cute', 'dog': 'furry'&#125; # Create a new dictionary with some dataprint(d['cat']) # Get an entry from a dictionary; prints "cute"print('cat' in d) # Check if a dictionary has a given key; prints "True"d['fish'] = 'wet' # Set an entry in a dictionaryprint(d['fish']) # Prints "wet"# print(d['monkey']) # KeyError: 'monkey' not a key of dprint(d.get('monkey', 'N/A')) # Get an element with a default; prints "N/A"print(d.get('fish', 'N/A')) # Get an element with a default; prints "wet"del d['fish'] # Remove an element from a dictionaryprint(d.get('fish', 'N/A')) # "fish" is no longer a key; prints "N/A" 序列操作 123456789101112131415161718192021222324shoplist = ['apple', 'mango', 'carrot', 'banana']name = 'swaroop'# Indexing or 'Subscription' operation ## 索引或“下标（Subscription）”操作符 #print('Item 0 is', shoplist[0])print('Item 1 is', shoplist[1])print('Item 2 is', shoplist[2])print('Item 3 is', shoplist[3])print('Item -1 is', shoplist[-1])print('Item -2 is', shoplist[-2])print('Character 0 is', name[0])# Slicing on a list #print('Item 1 to 3 is', shoplist[1:3])print('Item 2 to end is', shoplist[2:])print('Item 1 to -1 is', shoplist[1:-1])print('Item start to end is', shoplist[:])# 从某一字符串中切片 #print('characters 1 to 3 is', name[1:3])print('characters 2 to end is', name[2:])print('characters 1 to -1 is', name[1:-1])print('characters start to end is', name[:]) 输出： 123456789101112131415Item 0 is appleItem 1 is mangoItem 2 is carrotItem 3 is bananaItem -1 is bananaItem -2 is carrotCharacter 0 is sItem 1 to 3 is [&apos;mango&apos;, &apos;carrot&apos;]Item 2 to end is [&apos;carrot&apos;, &apos;banana&apos;]Item 1 to -1 is [&apos;mango&apos;, &apos;carrot&apos;]Item start to end is [&apos;apple&apos;, &apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]characters 1 to 3 is wacharacters 2 to end is aroopcharacters 1 to -1 is waroocharacters start to end is swaroop 集合 集合（Set）是简单对象的无序集合（Collection）。当集合中的项目存在与否比起次序或其出现次数更加重要时，我们就会使用集合。说明集合里的元素是不重复的。 通过使用集合，你可以测试某些对象的资格或情况，检查它们是否是其它集合的子集，找到两个集合的交集，等等。 引用——涉及到深拷贝浅拷贝的问题 1234567891011121314151617181920212223print('Simple Assignment')shoplist = ['apple', 'mango', 'carrot', 'banana']# mylist 只是指向同一对象的另一种名称mylist = shoplist# 我购买了第一项项目，所以我将其从列表中删除del shoplist[0]print('shoplist is', shoplist)print('mylist is', mylist)# 注意到 shoplist 和 mylist 二者都# 打印出了其中都没有 apple 的同样的列表，以此我们确认# 它们指向的是同一个对象print('Copy by making a full slice')# 通过生成一份完整的切片制作一份列表的副本mylist = shoplist[:]# 删除第一个项目del mylist[0]print('shoplist is', shoplist)print('mylist is', mylist)# 注意到现在两份列表已出现不同 输出： 1234567$ python ds_reference.pySimple Assignmentshoplist is [&apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]mylist is [&apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]Copy by making a full sliceshoplist is [&apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]mylist is [&apos;carrot&apos;, &apos;banana&apos;] 要记住列表的赋值语句不会创建一份副本。你必须使用切片操作来生成一份序列的副本。 面向对象编程类与对象是面向对象编程的两个主要方面。一个类（Class）能够创建一种新的类型（Type），其中对象（Object）就是类的实例（Instance）。可以这样来类比：你可以拥有类型 int 的变量，也就是说存储整数的变量是 int 类的实例（对象）。 对象可以使用属于它的普通变量来存储数据。这种从属于对象或类的变量叫作字段（Field）。对象还可以使用属于类的函数来实现某些功能，这种函数叫作类的方法（Method）。这两个术语很重要，它有助于我们区分函数与变量，哪些是独立的，哪些又是属于类或对象的。总之，字段与方法通称类的属性（Attribute）。 字段有两种类型——它们属于某一类的各个实例或对象，或是从属于某一类本身。它们被分别称作实例变量（Instance Variables）与类变量（Class Variables）。 通过 class 关键字可以创建一个类。这个类的字段与方法可以在缩进代码块中予以列出。 self 类方法与普通函数只有一种特定的区别——前者必须多加一个参数在参数列表开头，这个名字必须添加到参数列表的开头，但是你不用在你调用这个功能时为这个参数赋值，Python 会为它提供。这种特定的变量引用的是对象本身，按照惯例，它被赋予 self 这一名称。 Python 中的 self 相当于 C++ 中的 this 指针以及 Java 与 C# 中的 this 引用。 __init__ __init__ 方法会在类的对象被实例化（Instantiated）时立即运行。这一方法可以对任何你想进行操作的目标对象进行初始化（Initialization）操作。这里你要注意在 init 前后加上的双下划线。 类变量与对象变量 每个对象都通过 self.__class__ 属性来引用它的类。 类方法与对象方法与变量是对应的，通过对应的变量引用。我们使用装饰器（Decorator）将 how_many 方法标记为类方法。 所有类成员（包括数据成员）都是公开的，并且 Python 中所有的方法都是虚拟的（Virtual）。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# coding=UTF-8class Robot: """表示有一个带有名字的机器人。""" # 一个类变量，用来计数机器人的数量 population = 0 def __init__(self, name): """初始化数据""" self.name = name print("(Initializing &#123;&#125;)".format(self.name)) # 当有人被创建时，机器人 # 将会增加人口数量 Robot.population += 1 def die(self): """我挂了。""" print("&#123;&#125; is being destroyed!".format(self.name)) Robot.population -= 1 if Robot.population == 0: print("&#123;&#125; was the last one.".format(self.name)) else: print("There are still &#123;:d&#125; robots working.".format( Robot.population)) def say_hi(self): """来自机器人的诚挚问候 没问题，你做得到。""" print("Greetings, my masters call me &#123;&#125;.".format(self.name)) @classmethod def how_many(cls): """打印出当前的人口数量""" print("We have &#123;:d&#125; robots.".format(cls.population))droid1 = Robot("R2-D2")droid1.say_hi()Robot.how_many()droid2 = Robot("C-3PO")droid2.say_hi()Robot.how_many()print("\nRobots can do some work here.\n")print("Robots have finished their work. So let's destroy them.")droid1.die()droid2.die()Robot.how_many() 输出： 12345678910111213141516$ python oop_objvar.py(Initializing R2-D2)Greetings, my masters call me R2-D2.We have 1 robots.(Initializing C-3PO)Greetings, my masters call me C-3PO.We have 2 robots.Robots can do some work here.Robots have finished their work. So let&apos;s destroy them.R2-D2 is being destroyed!There are still 1 robots working.C-3PO is being destroyed!C-3PO was the last one.We have 0 robots. 继承 面向对象编程的一大优点是对代码的重用（Reuse），重用的一种实现方法就是通过继承（Inheritance）机制。继承最好是想象成在类之间实现类型与子类型（Type and Subtype）关系的工具。 SchoolMember 类会被称作基类（Base Class）或是超类（Superclass）。Teacher 和 Student 类会被称作派生类（Derived Classes）或是子类（Subclass）。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# coding=UTF-8class SchoolMember: '''代表任何学校里的成员。''' def __init__(self, name, age): self.name = name self.age = age print('(Initialized SchoolMember: &#123;&#125;)'.format(self.name)) def tell(self): '''告诉我有关我的细节。''' print('Name:"&#123;&#125;" Age:"&#123;&#125;"'.format(self.name, self.age), end=" ")class Teacher(SchoolMember): '''代表一位老师。''' def __init__(self, name, age, salary): SchoolMember.__init__(self, name, age) self.salary = salary print('(Initialized Teacher: &#123;&#125;)'.format(self.name)) def tell(self): SchoolMember.tell(self) print('Salary: "&#123;:d&#125;"'.format(self.salary))class Student(SchoolMember): '''代表一位学生。''' def __init__(self, name, age, marks): SchoolMember.__init__(self, name, age) self.marks = marks print('(Initialized Student: &#123;&#125;)'.format(self.name)) def tell(self): SchoolMember.tell(self) print('Marks: "&#123;:d&#125;"'.format(self.marks))t = Teacher('Mrs. Shrividya', 40, 30000)s = Student('Swaroop', 25, 75)# 打印一行空白行print()members = [t, s]for member in members: # 对全体师生工作 member.tell() 输出： 12345678$ python oop_subclass.py(Initialized SchoolMember: Mrs. Shrividya)(Initialized Teacher: Mrs. Shrividya)(Initialized SchoolMember: Swaroop)(Initialized Student: Swaroop)Name:&quot;Mrs. Shrividya&quot; Age:&quot;40&quot; Salary: &quot;30000&quot;Name:&quot;Swaroop&quot; Age:&quot;25&quot; Marks: &quot;75&quot; 需要注意到的是：因为我们在 Teacher 和 Student 子类中定义了 __init__ 方法，Python 不会自动调用基类 SchoolMember 的构造函数，你必须自己显式地调用它。 相反，如果我们没有在一个子类中定义一个 __init__ 方法，Python 将会自动调用基类的构造函数。 当我们调用父类的方法时，子类可以看作是父类的实例。 输入与输出 输入 12345678910111213def reverse(text): return text[::-1]def is_palindrome(text): return text == reverse(text)something = input("Enter text: ")if is_palindrome(something): print("Yes, it is a palindrome")else: print("No, it is not a palindrome") 输出： 1234567891011$ python3 io_input.pyEnter text: sirNo, it is not a palindrome$ python3 io_input.pyEnter text: madamYes, it is a palindrome$ python3 io_input.pyEnter text: racecarYes, it is a palindrome 文件 你可以通过创建一个属于 file 类的对象并适当使用它的 read、readline、write 方法来打开或使用文件，并对它们进行读取或写入。读取或写入文件的能力取决于你指定以何种方式打开文件。最后，当你完成了文件，你可以调用 close 方法来告诉 Python 我们已经完成了对该文件的使用。 12345678910111213141516171819202122232425262728poem = '''\Programming is funWhen the work is doneif you wanna make your work also fun: use Python!'''# 打开文件以编辑（'w'riting）f = open('poem.txt', 'w')# 向文件中编写文本f.write(poem)# 关闭文件f.close()# 如果没有特别指定，# 将假定启用默认的阅读（'r'ead）模式f = open('poem.txt')while True: line = f.readline() # 零长度指示 EOF if len(line) == 0: break # 每行（`line`）的末尾 # 都已经有了换行符 #因为它是从一个文件中进行读取的 print(line, end='')# 关闭文件f.close() 输出： 12345$ python3 io_using_file.pyProgramming is funWhen the work is doneif you wanna make your work also fun: use Python! 我们使用内置的 open 函数并指定文件名以及我们所希望使用的打开模式来打开一个文件。打开模式可以是阅读模式（&#39;r&#39;），写入模式（&#39;w&#39;）和追加模式（&#39;a&#39;）。我们还可以选择是通过文本模式（&#39;t&#39;）还是二进制模式（&#39;b&#39;）来读取、写入或追加文本。实际上还有其它更多的模式可用，help(open) 会给你有关它们的更多细节。在默认情况下，open() 会将文件视作文本（text）文件，并以阅读（read）模式打开它。 Pickle Python 提供了一个叫作 Pickle 的标准模块，通过它你可以将任何纯 Python 对象存储到一个文件中，并在稍后将其取回。这叫作持久地（Persistently）存储对象。 123456789101112131415161718192021import pickle# 我们存储相关对象的文件的名称shoplistfile = 'shoplist.data'# 需要购买的物品清单shoplist = ['apple', 'mango', 'carrot']# 准备写入文件f = open(shoplistfile, 'wb')# 转储对象至文件pickle.dump(shoplist, f)f.close()# 清除 shoplist 变量del shoplist# 重新打开存储文件f = open(shoplistfile, 'rb')# 从文件中载入对象storedlist = pickle.load(f)print(storedlist) 输出： 12$ python io_pickle.py[&apos;apple&apos;, &apos;mango&apos;, &apos;carrot&apos;] 要想将一个对象存储到一个文件中，我们首先需要通过 open 以写入（write）二进制（binary）模式打开文件，然后调用 pickle 模块的 dump 函数。这一过程被称作封装（Pickling）。 接着，我们通过 pickle 模块的 load 函数接收返回的对象。这个过程被称作拆封（Unpickling）。 Unicode——Important 截止到现在，当我们编写或使用字符串、读取或写入某一文件时，我们用到的只是简单的英语字符。 注意：如果你正在使用 Python 2，我们又希望能够读写其它非英语语言，我们需要使用 unicode 类型，它全都以字母 u 开头，例如 u&quot;hello world&quot;。 12345678&gt;&gt;&gt; "hello world"'hello world'&gt;&gt;&gt; type("hello world")&lt;class 'str'&gt;&gt;&gt;&gt; u"hello world"'hello world'&gt;&gt;&gt; type(u"hello world")&lt;class 'str'&gt; 当我们阅读或写入某一文件或当我们希望与互联网上的其它计算机通信时，我们需要将我们的 Unicode 字符串转换至一个能够被发送和接收的格式，这个格式叫作“UTF-8”。我们可以在这一格式下进行读取与写入，只需使用一个简单的关键字参数到我们的标准 open 函数中： 123456789# encoding=utf-8import iof = io.open("abc.txt", "wt", encoding="utf-8")f.write(u"Imagine non-English language here")f.close()text = io.open("abc.txt", encoding="utf-8").read()print(text) 它是如何工作的 现在你可以忽略 import 语句，我们会在模块章节章节探讨有关它的更多细节。 每当我们诸如上面那番使用 Unicode 字面量编写一款程序时，我们必须确保 Python 程序已经被告知我们使用的是 UTF-8，因此我们必须将 # encoding=utf-8 这一注释放置在我们程序的顶端。4 我们使用 io.open 并提供了“编码（Encoding）”与“解码（Decoding）”参数来告诉 Python 我们正在使用 Unicode。 你可以阅读以下文章来了解有关这一话题的更多内容： “The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets” Python Unicode Howto Pragmatic Unicode talk by Nat Batchelder 异常 处理异常 如果你的程序中出现了一些无效的语句该怎么办？Python 将会对此进行处理，举起（Raises）1它的小手来告诉你哪里出现了一个错误（Error）。 我们可以通过使用 try..except 来处理异常状况。一般来说我们会把通常的语句放在 try 代码块中，将我们的错误处理器代码放置在 except 代码块中。 12345678try: text = input('Enter something --&gt; ')except EOFError: print('Why did you do an EOF on me?')except KeyboardInterrupt: print('You cancelled the operation.')else: print('You entered &#123;&#125;'.format(text)) 输出： 1234567891011# Press ctrl + d$ python exceptions_handle.pyEnter something --&gt; Why did you do an EOF on me?# Press ctrl + c$ python exceptions_handle.pyEnter something --&gt; ^CYou cancelled the operation.$ python exceptions_handle.pyEnter something --&gt; No exceptionsYou entered No exceptions 抛出异常 你可以通过 raise 语句来引发一次异常，具体方法是提供错误名或异常名以及要抛出（Thrown）异常的对象。 你能够引发的错误或异常必须是直接或间接从属于 Exception（异常） 类的派生类。 12345678910111213141516171819202122# encoding=UTF-8class ShortInputException(Exception): '''一个由用户定义的异常类''' def __init__(self, length, atleast): Exception.__init__(self) self.length = length self.atleast = atleasttry: text = input('Enter something --&gt; ') if len(text) &lt; 3: raise ShortInputException(len(text), 3) # 其他工作能在此处继续正常运行except EOFError: print('Why did you do an EOF on me?')except ShortInputException as ex: print(('ShortInputException: The input was ' + '&#123;0&#125; long, expected at least &#123;1&#125;') .format(ex.length, ex.atleast))else: print('No exception was raised.') 输出： 1234567$ python exceptions_raise.pyEnter something --&gt; aShortInputException: The input was 1 long, expected at least 3$ python exceptions_raise.pyEnter something --&gt; abcNo exception was raised. 假设你正在你的读取中读取一份文件。你应该如何确保文件对象被正确关闭，无论是否会发生异常？这可以通过 finally 块来完成。 123456789101112131415161718192021222324import sysimport timef = Nonetry: f = open("poem.txt") # 我们常用的文件阅读风格 while True: line = f.readline() if len(line) == 0: break print(line, end='') sys.stdout.flush() print("Press ctrl+c now") # 为了确保它能运行一段时间 time.sleep(2)except IOError: print("Could not find file poem.txt")except KeyboardInterrupt: print("!! You cancelled the reading from the file.")finally: if f: f.close() print("(Cleaning up: Closed the file)") 输出： 12345$ python exceptions_finally.pyProgramming is funPress ctrl+c now^C!! You cancelled the reading from the file.(Cleaning up: Closed the file) with语句 在 try 块中获取资源，然后在 finally 块中释放资源是一种常见的模式。因此，还有一个 with 语句使得这一过程可以以一种干净的姿态得以完成。 123with open("poem.txt") as f: for line in f: print(line, end='') 程序输出的内容应与上一个案例所呈现的相同。本例的不同之处在于我们使用的是 open 函数与 with 语句——我们将关闭文件的操作交由 with open 来自动完成。 在幕后发生的事情是有一项 with 语句所使用的协议（Protocol）。它会获取由 open 语句返回的对象，在本案例中就是“thefile”。 它总会在代码块开始之前调用 thefile.__enter__ 函数，并且总会在代码块执行完毕之后调用 thefile.exit。 标准库 日志模块 如果你想将一些调试（Debugging）信息或一些重要的信息储存在某个地方，以便你可以检查你的程序是否如你所期望那般运行，应该怎么做？你应该如何将这些信息“储存在某个地方”？这可以通过 logging 模块来实现。 123456789101112131415161718192021222324import osimport platformimport loggingif platform.platform().startswith('Windows'): logging_file = os.path.join(os.getenv('HOMEDRIVE'), os.getenv('HOMEPATH'), 'test.log')else: logging_file = os.path.join(os.getenv('HOME'), 'test.log')print("Logging to", logging_file)logging.basicConfig( level=logging.DEBUG, format='%(asctime)s : %(levelname)s : %(message)s', filename=logging_file, filemode='w',)logging.debug("Start of the program")logging.info("Doing something")logging.warning("Dying now") 输出： 1234567$ python stdlib_logging.pyLogging to /Users/swa/test.log$ cat /Users/swa/test.log2014-03-29 09:27:36,660 : DEBUG : Start of the program2014-03-29 09:27:36,660 : INFO : Doing something2014-03-29 09:27:36,660 : WARNING : Dying now 我们使用了三款标准库中的模块——os 模块用以和操作系统交互，platform 模块用以获取平台——操作系统——的信息，logging 模块用来记录（Log）信息。 Python每周模块 标准库中还有许多模块值得探索，例如一些用以调试（Debugging）的模块， 处理命令行选项的模块，正则表达式（Regular Expressions）模块 等等等等。 进一步探索标准库的最好方法是阅读由 Doug Hellmann 撰写的优秀的 Python Module of the Week 系列（你还可以阅读它的实体书或是阅读 Python 官方文档）。 其他 Python 2 与 Python 3 的不同 请参阅： “Six” library Porting to Python 3 Redux by Armin Python 3 experience by PyDanny Official Django Guide to Porting to Python 3 Discussion on What are the advantages to python 3.x? Q&amp;A Purpose of #!/usr/bin/python3 Answer: #!/usr/bin/python3 is a shebang line. A shebang line defines where the interpreter is located. In this case, the python3 interpreter is located in /usr/bin/python3. A shebang line could also be a bash, ruby, perl or any other scripting languages’ interpreter, for example: #!/bin/bash. Without the shebang line, the operating system does not know it’s a python script, even if you set the execution flag on the script and run it like ./script.py. To make the script run by default in python3, either invoke it as python3 script.py or set the shebang line. You can use #!/usr/bin/env python3 for portability across different systems in case they have the language interpreter installed in different locations. What is the use of “assert” in Python? The assert statement exists in almost every programming language. It helps detect problems early in your program, where the cause is clear, rather than later as a side-effect of some other operation. When you do… 1assert condition you’re telling the program to test that condition, and immediately trigger an error if the condition is false. In Python, it’s roughly equivalent to this: 12if not condition: raise AssertionError() Try it in the Python shell: 12345&gt;&gt;&gt; assert True # nothing happens&gt;&gt;&gt; assert FalseTraceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;AssertionError Assertions can include an optional message, and you can disable them when running the interpreter. To print a message if the assertion fails: 1assert False, "Oh no! This assertion failed!" Do not use parenthesis to call assert like a function. It is a statement. If you do assert(condition, message) you’ll be running the assert with a (condition, message) tuple as first parameter. As for disabling them, when running python in optimized mode, where __debug__ is False, assert statements will be ignored. Just pass the -O flag: 1python -O script.py See here for the relevant documentation. You use == when comparing values and is when comparing identities.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Settings of iTerm2 on Mac]]></title>
    <url>%2Fposts%2F141487065.html</url>
    <content type="text"><![CDATA[Mac终端iTerm 2配置Author: 以乐之名 「from 简书」 Description 完成配置后的iTerm 2具备功能： 语法高亮 命令Tab补全 自动提示 Git相关功能 安装 下载iTerm2 解压后安装iTerm2并打开 设为Mac默认终端 123chsh -s /bin/zsh# 如果想修改回默认dash，同样使用chsh命令即可：chsh -s /bin/bash 配置美化 配色方案 123git clone https://github.com/altercation/solarizedcd solarized/iterm2-colors-solarized/open . 在打开的finder窗口中，双击Solarized Dark.itermcolors和Solarized Light.itermcolors即可安装明暗两种配色，再次进入iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets中根据个人喜好选择这两种配色中的一种即可： oh-my-zsh github：https://github.com/robbyrussell/oh-my-zsh 官方提供 curl 和 wget 两种安装方式 curl 安装： sh -c ``&quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; wget安装： sh -c ``&quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot; iTerm 2主题 用vim编辑~/.zshrc，将zsh主题修改为“agnoster”，ZSH_THEME=&quot;agnoster&quot;，之后使用command+Q或source ~/.zshrc，是配置文件生效。 路径前缀的XX@XX太长，缩短：编辑~/.oh-my-zsh/themes/agnoster.zsh-theme主体文件，将里面的build_prompt下的prompt_context字段在前面加#注释掉即可 安装PowerLine powerline官网：http://powerline.readthedocs…. 安装powerline的方式依然简单，也只需要一条命令： 1pip install powerline-status --user 没有安装pip的同学可能会碰到zsh: command not found: pip，使用命令安装pip即可： 1sudo easy_install pip 安装后再次执行安装powerline的命令即可。 安装PowerFonts 安装字体库需要首先将项目git clone至本地，然后执行源码中的install.sh。 123456# git clonegit clone https://github.com/powerline/fonts.git --depth=1# cd to foldercd fonts# run install shell./install.sh 安装好字体库之后，我们来设置iTerm2的字体，具体的操作是iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text，在Font区域选中Change Font，然后找到Meslo LG字体。有L、M、S可选，看个人喜好： 自动提示与命令补全 1234cd ~/.oh-my-zsh/custom/pluginsgit clone git://github.com/zsh-users/zsh-autosuggestionsvim ~/.zshrc# 加上plugins=(zsh-autosuggestions) PS：当你重新打开终端时可能看不到变化，可能你的字体颜色太淡了，我们把其改亮一些： 12345cd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions`vim zsh-autosuggestions.zsh# 修改内容ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=10'source zsh-autosuggestions.zsh 语法高亮效果 这是oh my zsh的一个插件，安装方式与theme大同小异： 123cd ~/.oh-my-zsh/custom/plugins/git clone https://github.com/zsh-users/zsh-syntax-highlighting.gitvi ~/.zshrc 这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上： 请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。 然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh并保存文件。 执行命令使刚才的修改生效：source ~/.zshrc。]]></content>
      <categories>
        <category>Macintosh</category>
        <category>Application</category>
        <category>iTerm 2</category>
      </categories>
      <tags>
        <tag>Macintosh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Homebrew for Mac]]></title>
    <url>%2Fposts%2F1430094892.html</url>
    <content type="text"><![CDATA[Homebrew for MacAuthor: JosephLau Description Homebrew简介，安装与使用 简介本文严重抄袭此文章 Homebrew 官方网站 Homebrew是一个包管理器，用于安装Apple没有预装但你需要的UNIX工具。（比如著名的wget）。 Homebrew会将软件包安装到独立目录(/usr/local/Cellar)，并将其文件软链接至/usr/local。 Homebrew不会将文件安装到它本身目录之外，所以您可将Homebrew安装到任意位置。 Homebrew使macOS更完整。使用gem来安装gems、用brew来安装那些依赖包。 wget是一个从网络上自动下载文件的自由工具，支持通过 HTTP、HTTPS、FTP 三个最常见的 TCP/IP协议下载，并可以使用HTTP代理。&quot;wget&quot; 这个名称来源于 “World Wide Web” 与 “get” 的结合。 安装 安装XCode或者Command Line Tools for Xcode。Xcode可以从AppStore里下载安装，Command Line Tools for Xcode需要在终端中输入以下代码运行安装： 1xcode-select --install 安装Homebrew。将以下命令粘贴至终端 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 脚本会在执行前暂停，并说明将它将做什么。 安装完成以后，需要运行brew doctor命令检测下是否有什么冲突的地方（如没有卸载MacPorts等等） Homebrew安装成功后，会自动创建目录/usr/local/Cellar来存放Homebrew安装的程序。 移除Homebrew。将以下命令粘贴至终端 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot; 基本使用1234567891011121314151617181920212223242526272829303132// 搜索包brew search mysql// 安装包brew install mysql// 查看包信息，比如目前的版本，依赖，安装后注意事项等brew info mysql// 卸载包brew uninstall wget// 显示已安装的包brew list// 查看brew的帮助brew –help// 更新， 这会更新 Homebrew 自己brew update// 检查过时（是否有新版本），这会列出所有安装的包里，哪些可以升级brew outdatedbrew outdated mysql// 升级所有可以升级的软件们brew upgradebrew upgrade mysql// 清理不需要的版本极其安装包缓存brew cleanupbrew cleanup mysql 扩展：Homebrew Cask你已经感受到了使用Homebrew安装命令行程序的便利。那么接下来，我们将通过Homebrew Cask优雅、简单、快速的安装和管理OS X图形界面程序，比如Google Chrome和Dropbox。 安装1brew install caskroom/cask/brew-cask 使用基本用法与brew相同，只不过在brew后面加了一个cask单词。 12345// 安装软件brew cask install google-chrome// 卸载软件brew cask uninstall google-chrome 其他JDK 8 can be downloaded from Oracle’s JDK Page. 1234567// 安装Bazelbrew install bazel// 查看Bazel版本bazel version// 提示需要安装java JDK 移除JAVA JDK 1234sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.pluginsudo rm -fr /Library/PreferencesPanes/JavaControlPanel.prefPanesudo rm -fr ~/Library/Application\ Support/Javasudo rm -rf /Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk]]></content>
      <categories>
        <category>Macintosh</category>
        <category>Application</category>
        <category>Homebrew</category>
      </categories>
      <tags>
        <tag>Macintosh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows Note]]></title>
    <url>%2Fposts%2F4105617365.html</url>
    <content type="text"><![CDATA[Windows NoteAuthor: JosephLau Description 此文用来记录平时使用Windows遇到的问题与心得. 本文长期更新. 重装电脑 UWP 网易云音乐 OneNote QuickLook Applications Coding Intellij IDEA Git Notepad++ Java Python3 Office Fun Tim WeChat PotPlayer Chrome Tools 7-zip SSR v2rayN Notion Picgo IDM 迅雷 Pandownload Rainmeter Typora Others Hexo Blog]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[V2Ray Tutorial]]></title>
    <url>%2Fposts%2F4208935620.html</url>
    <content type="text"><![CDATA[V2Ray TutorialAuthor: JosephLau Description v2ray是一个代理平台，能够配置多种协议，有很多的玩法、用法（动态端口、mKCP、Mux等等）。更多的内容请查看V2Ray官网。 平台支持V2Ray 在以下平台中可用： Windows 7 及之后版本（x86 / amd64）； Mac OS X 10.10 Yosemite 及之后版本（amd64）； Linux 2.6.23 及之后版本（x86 / amd64 / arm / arm64 / mips64 / mips）； 包括但不限于 Debian 7 / 8、Ubuntu 12.04 / 14.04 及后续版本、CentOS 6 / 7、Arch Linux； FreeBSD (x86 / amd64)； OpenBSD (x86 / amd64)； Dragonfly BSD (amd64)； Windows平台V2RayN 是 PC 平台一个对新手比较友好的 V2Ray GUI 客户端。 下载V2Ray Github Release Github 分流 Homebrew Arch Linux Snapcraft 压缩包均为 zip 格式，找到对应平台的压缩包，下载解压。 下载V2RayN Github Release 解压，将解压出来的 v2rayN.exe 和 zh-Hans 文件夹全部复制到之前下载并解压出来的 v2ray-windows-xx 文件夹目录中。 傻瓜式配置应用双击1234567891011121314151617181920212223242526272829303132![](https://i.loli.net/2019/04/30/5cc8337eb9ec5.jpg)点击订阅-订阅设置，在url栏填写订阅地址，并选择确定。![](https://i.loli.net/2019/04/30/5cc8338623338.jpg)### 注意事项- 如果发生**应用占用CPU过高**，建议更换本地监听端口，在参数设置-基础设置中进行更改。更改后建议重启服务或者重启设备；- 连不上就换一个服务器试一试；- 客户端允许最多50个同时使用，月流量50G，仅供科学上网使用- **v2ray要求系统时间准确,如果连接不上,请检查系统的时间是否准确**；- 服务器模式 - 全局：全部流量走国外服务器 - PAC：跳过大陆IP，其他走国外服务器 - 直连：不走国外服务器![](https://i.loli.net/2019/04/30/5cc8338b028e0.jpg)### Enjoy it!![](https://i.loli.net/2019/04/30/5cc83390a7d28.jpg)## Mac平台- [GitHub](https://github.com/Cenmrev/V2RayX/releases)下载- 我是通过Homebrew-Cask直接安装 brew cask install v2rayx ``` 配置(我这里导入链接突然不起作用) 将自己的节点信息输入进去并保存,切换服务器,Load Core即可使用. Linux平台配置较为复杂以及使用率较低，就不再赘述。]]></content>
      <categories>
        <category>V2Ray</category>
      </categories>
      <tags>
        <tag>V2Ray</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker Tutorial]]></title>
    <url>%2Fposts%2F2887120666.html</url>
    <content type="text"><![CDATA[Docker TutorialAuthor: JosephLau Description 此文用来记录平时使用Git遇到的问题与心得. 本文长期更新. 安装Docker注册Docker ID下载文件 查看是否安装成功 123456$ docker version# or$ docker info# 运行hello-world# 本地没有image文件会先从library拉取$ docker container run hello-world 123456789101112131415161718192021# resultHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the "hello-world" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/ 使用技巧image Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。 image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。 12345678# 列出本机的所有 image 文件。$ docker image ls# 删除 image 文件$ docker image rm [imageName]# 从libaray拉取image$ docker image pull library/hello-world# 或者$ docker image pull hello-world 容器 image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。 12345678910# 列出本机正在运行的容器$ docker container ls# 列出本机所有容器，包括终止运行的容器$ docker container ls --all# 删除容器$ docker container rm [containerID]# 安装运行 Ubuntu 的 image$ docker container run -it ubuntu bash# 终止容器,强行立即终止$ docker container kill [containID] 其他1234# 启动已经生成、已经停止运行的容器文件。# docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。$ docker container start [containerID]$ docker container stop [containerID] 12# 查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。$ docker container logs [containerID] 12# 进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。$ docker container exec -it [containerID] /bin/bash 12# 从正在运行的 Docker 容器里面，将文件拷贝到本机。$ docker container cp [containID]:[/path/to/file] .]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Macintosh Note]]></title>
    <url>%2Fposts%2F1565465933.html</url>
    <content type="text"><![CDATA[Macintosh NoteAuthor: JosephLau Description 此文用来记录平时使用Mac遇到的问题与心得. 本文长期更新. 系统快捷键123456789# 查看当前文件路径option+command+c = alt+win+c# 截图## 保存截图文件command+shift+3 #全屏command+shift+4 #自由## 不保存截图文件control+command+shift+3 #全屏control+command+shift+4 #自由 必备软件 Google Chrome QQ VS Code iTerm 2 TickTick V2RayX LastPass Typora IntelliJ IDEA WeChat XMind Zen The Unarchiver Tuxera NTFS for Mac Sequel Pro iStat Menus CleanMyMac X SSD开启TRIM支持打开终端应用，并输入下面命令即可： 1sudo trimforce enable 可以在系统报告里查看是否开启： 字体渲染次像素抗锯齿打开 【终端】应用，输入下面命令，全局启用 次像素抗锯齿 渲染： 1defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO 设置字体 次像素抗锯齿 级别 (类似 Linux 的 hintstyle 微调样式) 的命令： 1defaults -currentHost write -globalDomain AppleFontSmoothing -int 3 查看设置后的选项值： 12345$ defaults read -g CGFontRenderingFontSmoothingDisabled0$ defaults -currentHost read -globalDomain AppleFontSmoothing3 然后重新登录Mac账户后生效 修改完后 【系统偏好设置】—&gt; 【通用】最下面的 【使用平滑字体】选项： iTerm 2安装配置详细设置请看这篇文章 安装Homebrew ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)” 首先下载 iTerm 2 安装oh-my-zsh curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh 安装Powerline 使用agnoster主题 下载agnoster主题 到下载的工程里面运行install文件,主题将安装到~/.oh-my-zsh/themes目录下 设置该主题 进入~/.zshrc打开.zshrc文件，然后将ZSH_THEME后面的字段改为agnoster。ZSH_THEME=&quot;agnoster&quot;（agnoster即为要设置的主题） 增加代码高亮效果 cd到.zshrc所在目录 下载工程文件 git clone git://github.com/zsh-users/zsh-syntax-highlighting.git 打开.zshrc文件，在最后添加下面内容 source /.../zsh-syntax-highlighting/zsh-syntax-highlighting.zsh cd ~/.oh-my-zsh/custom/plugins 再次打开.zshrc文件，在最后面添加下面内容 plugins=(zsh-syntax-highlighting) 其他 默认使用zsh: chsh -s /bin/zsh 取消显示计算机名 在~/.oh-my-zsh/themes路径下找到agnoster.zsh-theme文件，将里面的build_prompt下的prompt_context字段在注释掉即可。 跳板机互传文件 由于使用跳板机，所以这里需要使用lrzsz 注意lrzsz与expect连接方式不能共存，容易出现假死 如果需要免输入密码登录，建议使用sshpass方式进行连接远程服务器 安装lrzsz brew install lrzsz 配置lrzsz 在/usr/local/bin 目录下创建两个文件iterm2-recv-zmodem.sh， iterm2-send-zmodem.sh iterm2-recv-zmodem.sh 12345678910111213141516171819202122232425262728#!/bin/bash# Author: Matt Mastracci (matthew@mastracci.com)# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script# licensed under cc-wiki with attribution required # Remainder of script public domainosascript -e 'tell application "iTerm2" to version' &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTermif [[ $NAME = "iTerm" ]]; then FILE=`osascript -e 'tell application "iTerm" to activate' -e 'tell application "iTerm" to set thefile to choose folder with prompt "Choose a folder to place received files in"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"`else FILE=`osascript -e 'tell application "iTerm2" to activate' -e 'tell application "iTerm2" to set thefile to choose folder with prompt "Choose a folder to place received files in"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"`fiif [[ $FILE = "" ]]; then echo Cancelled. # Send ZModem cancel echo -e \\x18\\x18\\x18\\x18\\x18 sleep 1 echo echo \# Cancelled transferelse cd "$FILE" /usr/local/bin/rz -E -e -b sleep 1 echo echo echo \# Sent \-\&gt; $FILEfi iterm2-send-zmodem.sh 12345678910111213141516171819202122232425#!/bin/bash# Author: Matt Mastracci (matthew@mastracci.com)# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script# licensed under cc-wiki with attribution required # Remainder of script public domainosascript -e 'tell application "iTerm2" to version' &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTermif [[ $NAME = "iTerm" ]]; then FILE=`osascript -e 'tell application "iTerm" to activate' -e 'tell application "iTerm" to set thefile to choose file with prompt "Choose a file to send"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"`else FILE=`osascript -e 'tell application "iTerm2" to activate' -e 'tell application "iTerm2" to set thefile to choose file with prompt "Choose a file to send"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"`fiif [[ $FILE = "" ]]; then echo Cancelled. # Send ZModem cancel echo -e \\x18\\x18\\x18\\x18\\x18 sleep 1 echo echo \# Cancelled transferelse /usr/local/bin/sz "$FILE" -e -b sleep 1 echo echo \# Received $FILEfi 将文件写好后保存好，使用如下命令添加权限 chmod a+x iterm2-* 配置iTerm2 点击 iTerm2 的设置界面 Perference-&gt; Profiles -&gt; Default -&gt; Advanced -&gt; Triggers 的 Edit 按钮 1234567Regular expression: rz waiting to receive.\*\*B0100Action: Run Silent CoprocessParameters: /usr/local/bin/iterm2-send-zmodem.shRegular expression: \*\*B00000000000000Action: Run Silent CoprocessParameters: /usr/local/bin/iterm2-recv-zmodem.sh Typora偏好设置截图 「注」iPic需要在App Store中提前下载好。 快捷键12345678910111213141516171819标题：#最大标题：command + 1 或者：#大标题：command + 2 或者：##标准标题：command + 3 或者：###中标题：command + 4 或者：####小标题：command + 5 或者：#####插入表格：command + T插入代码：command + Alt +c 行间公式 command + Alt + b段落：command + 0竖线: command + Alt +q有序列表（1. 2.）: 输入数字+“.”之后输入空格 或者：command + Alt + o 黑点标记: command + Alt + u 隔离线: shift + command + -超链接：command + Alt + l插入链接：command +k下划线：command +u 加粗：command +b搜索：command +f 主题使用vue主题，并且修改Macintosh HD⁩ ▸ ⁨Users⁩ ▸ ⁨lau⁩ ▸ ⁨Library⁩ ▸ ⁨Application Support⁩ ▸ ⁨abnerworks.Typora⁩ ▸ ⁨themes⁩⁩ ▸ ⁨vue.css，调整写作区显示宽度 123456#write &#123; max-width: 85%; margin: 0 auto; padding: 10%; padding-top: 5%;&#125; V2RayX暂时弃用 GitHub下载 通过Homebrew-Cask直接安装 brew cask install v2rayx 配置 将自己的节点信息输入进去并保存,切换服务器,Load Core即可使用. Sequel Pro配置自带格式化工具123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156# check for empty STDINSQL=$(cat)if [ -z "$SQL" ]; then echo "No SQL statements passed." exit $SP_BUNDLE_EXIT_SHOW_AS_TEXT_TOOLTIPfi# check if connected to the internet and if server is upconnected=$(/sbin/ping -t 8 -c 1 -on www.dpriver.com 2&gt; /dev/null | grep '69\.5\.11\.169' | wc -l)if [ $connected -eq "0" ]; then echo "&lt;font color=red&gt;You are probably not connected to the internet or http://www.dpriver.com/ server is down.&lt;/font&gt;" exit $SP_BUNDLE_EXIT_SHOW_AS_HTML_TOOLTIPfi# show info alert about sending the SQL statements to an online serviceif [ ! -e infoShowed ]; then touch infoShowed osascript -e 'tell app "Sequel Pro" to display dialog "This command will send the SQL statement(s) - unencrypted - to an online service (http://www.dpriver.com). Please consider this before sending confidential data!\n\nThis message will only be displayed once." with icon caution' 2&gt; 1 if [ `cat 1 | wc -c` -ne 0 ]; then rm -f 1 exit $SP_BUNDLE_EXIT_NONE fi rm -f 1fi# send SQL to www.dpriver.com and replace the formatted SQL string in first responder; if a parser error occurred# show error message and try to jump to the errorcat &lt;&lt;HTML&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;&lt;html&gt;&lt;head&gt; &lt;base href="http://www.dpriver.com/pp/"&gt; &lt;title&gt;Connecting www.dpriver.com&lt;/title&gt; &lt;script&gt; function lookForResult() &#123; if(document.all.outputsql.value.length &gt; 8) &#123; if(document.all.errorhint.style.display == "inline") &#123; var errormes = document.all.outputsql.value; var re = /.*?\(\d+\s*,\s*(\d+)\).*/; re.exec(errormes); var pos = parseInt(RegExp.\$1) - 1; re = /.*?(\d+).*/; re.exec('$SP_SELECTED_TEXT_RANGE'); var offset = parseInt(RegExp.\$1); pos = pos + offset; alert(document.all.outputsql.value); window.system.setSelectedTextRange(pos+''); &#125; else &#123; var txt = document.all.outputsql.value; var len = txt.length; window.system.setSelectedTextRange('$SP_SELECTED_TEXT_RANGE'); window.system.insertText(txt.slice(0,len-2)); &#125; window.system.closeHTMLOutputWindow(); &#125; else &#123; setTimeout("lookForResult()",50); &#125; &#125; function waitForResult() &#123; window.system.suppressExceptionAlert(); setTimeout("lookForResult()",50); &#125; &lt;/script&gt; &lt;script language="JavaScript" type="text/javascript" src="pp.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body onload='window.resizeTo(300,200);SQLFMT.format(document.all.sp_submit);waitForResult()'&gt;&lt;div id="retvalues"&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;Copyright &amp;copy; 2001-2010 Gudu Software&lt;br&gt;All Rights Reserved&lt;br&gt;&lt;a href="mailto:support@dpriver.com"&gt;Contact US&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p align=right&gt;Please wait…&lt;/p&gt;&lt;div class="page-container-1" style="display:none;"&gt; &lt;div id="container"&gt; &lt;div id="wrapper"&gt; &lt;div id="content"&gt; &lt;form id="SqlFmtForm" name="frm_sqlformat" method="post" action="/cgi-bin/ppserver" onsubmit="return false;"&gt; &lt;div id="secondpanel"&gt; &lt;div id="sp_database"&gt; &lt;label class="desc" style="display:inline;"&gt;Database&lt;/label&gt; &lt;select name="dbvendor"&gt; &lt;option value="mysql" selected&gt;MySQL&lt;/option&gt; &lt;/select&gt; &lt;label class="desc" style="display:inline;padding:0 0 0px 40px; border:0px solid;"&gt;Output:&lt;/label&gt; &lt;select name="outputfmt"&gt; &lt;option value="SQL" selected&gt;SQL(Text)&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="sqlpanel"&gt; &lt;div id="sp_inputsql"&gt; &lt;textarea id ="inputsql" name="inputsql" cols="1" rows="1" wrap="off"&gt; $SQL &lt;/textarea&gt; &lt;/div&gt; &lt;div id="sp_submit"&gt; &lt;input type="button" id="btnformat" name="print" value="Format SQL" onclick="SQLFMT.format(this)" value="Format SQL"&gt; &lt;label style="display:none;"&gt;(Time used: &lt;span id="timestamp"&gt;0&lt;/span&gt; seconds)&lt;/label&gt; &lt;/div&gt; &lt;div id="sp_submit" style="text-align:left;"&gt; &lt;/div&gt; &lt;label id="errorhint" class="desc" style="color:#DF0000 !important;display:none;"&gt; Can't format input sql, make sure there is no syntax error and select correct database. &lt;a href="" style="display:none;"&gt;OR Report a bug of this sql beautifier&lt;/a&gt; &lt;/label&gt; &lt;iframe id="ioutputsql" &gt;&lt;/iframe&gt; &lt;div id="sp_outputsql" style="display:none;"&gt; &lt;textarea id = "outputsql" name="outputsql" cols="80" rows="15" wrap="off" &gt; &lt;/textarea&gt; &lt;/div&gt; &lt;div id="sp_errormsg" style="display:none;"&gt; Error message goes to here! &lt;/div&gt; &lt;/div&gt; &lt;div id="formatoptions"&gt; &lt;select name="keywordcs"&gt; &lt;option value="Uppercase" selected &gt;Uppercase&lt;/option&gt; &lt;option value="Lowercase" &gt;Lowercase&lt;/option&gt; &lt;option value="InitCap" &gt;InitCap&lt;/option&gt; &lt;option value="Unchanged" &gt;Unchanged&lt;/option&gt; &lt;/select&gt; &lt;select name="identifiercs"&gt; &lt;option value="Uppercase" &gt;Uppercase&lt;/option&gt; &lt;option value="Lowercase" selected &gt;Lowercase&lt;/option&gt; &lt;option value="InitCap" &gt;InitCap&lt;/option&gt; &lt;option value="Unchanged" &gt;Unchanged&lt;/option&gt; &lt;option value="initcapeachword" &gt;Init cap each word&lt;/option&gt; &lt;/select&gt; &lt;select name="functioncs"&gt; &lt;option value="Uppercase" &gt;Uppercase&lt;/option&gt; &lt;option value="Lowercase" &gt;Lowercase&lt;/option&gt; &lt;option value="InitCap" selected &gt;InitCap&lt;/option&gt; &lt;option value="Unchanged" &gt;Unchanged&lt;/option&gt; &lt;/select&gt; &lt;input type="radio" name="lnbrwithcomma" value="after" checked &gt; After &lt;input type="radio" name="lnbrwithcomma" value="before" &gt; Before &lt;input type="radio" name="lnbrwithcomma" value= "beforewithspace" &gt; Before with space &lt;input type="radio" name="liststyle" value="stack" checked&gt;Stacked &lt;input type="radio" name="liststyle" value="nostack"&gt;Not Stacked &lt;input type="radio" name="salign" value="sleft" checked&gt; Align left &lt;input type="radio" name="salign" value="sright" &gt; Align right &lt;input type="checkbox" name="andorunderwhere" value="yes" checked&gt; And/Or under Where &lt;input type="checkbox" name="removelnbr" value="no" checked&gt; Remove Linebreak before beautify &lt;input type="checkbox" name="trimquotechar" value="yes"&gt; Trim Quoted Char of Each Line quoted char of eachline: &lt;input type="text" name="quotechar" value= "&amp;#34" size = 5 &gt; &lt;input type="checkbox" name="compactmode" value="yes"&gt; Compact the output of sql output &lt;input type="text" name="maxlenincm" value= "80" size = 5 &gt; &lt;/div&gt; &lt;input type="hidden" name="clientid" value="dpriver-9094-8133-2031" /&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;HTML 调整Launchpad图标大小123456# 调整每一列显示图标数量defaults write com.apple.dock springboard-rows -int 7# 调整每一行显示图标数量defaults write com.apple.dock springboard-columns -int 12# 由于修改了每一页显示图标数量，需要重启Launchpaddefaults write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock VS Code]]></content>
      <categories>
        <category>Macintosh</category>
      </categories>
      <tags>
        <tag>Macintosh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven Tutorial]]></title>
    <url>%2Fposts%2F159979374.html</url>
    <content type="text"><![CDATA[Maven TutorialAuthor: JosephLau Description Maven是一个非常有用的依赖管理工具，Maven一个很重要的作用是用来管理Jar包的. 通过maven工程可以直接从maven仓库下载需要的jar包到本地，不用再需要从外部添加，maven仓库可以是网上的镜像地址，也可以是公司内部的仓库； 通过maven可以实现对java 工程的同意管理和规范化使用； 本文主要介绍Maven的配置过程. 安装配置下载Maven官网下载Maven后, 解压到文件夹,路径名之后配置环境变量需要用到. 配置环境变量在环境变量中新建M2_HOME系统变量,路径为D:\Program Files\apache-maven-3.6.0,就是你解压的文件夹的位置. 在path系统变量中添加一个,路径为%M2_HOME%\bin, 保存后进入命令行输入mvn -version查看是否配置成功. 123456C:\Users\PmbJa&gt;mvn -versionApache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)Maven home: D:\Program Files\apache-maven-3.6.0\bin\..Java version: 1.8.0_191, vendor: Oracle Corporation, runtime: D:\Program Files\Java\jdk1.8.0_191\jreDefault locale: en_US, platform encoding: GBKOS name: "windows 10", version: "10.0", arch: "amd64", family: "windows" Maven文件夹配置进入%M2_HOME%\bin\conf文件夹下,编辑settings.xml文件,将localRepository设置为自己的M2仓库位置. 1234567 &lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; --&gt;&lt;localRepository&gt;\path\M2\Repository&lt;/localRepository&gt; 另外也可以设置镜像 123456789101112&lt;!-- mirrors | This is a list of mirrors to be used in downloading artifacts from remote repositories. | | It works like this: a POM may declare a repository to use in resolving certain artifacts. | However, this repository may have problems with heavy traffic at times, so people have mirrored | it to several places. | | That repository definition will have a unique id, so we can create a mirror reference for that | repository, to be used as an alternate download site. The mirror site will be the preferred | server for that repository. |--&gt;&lt;mirrors&gt; 配置IntelliJ IDEA集成Maven打开IntelliJ IDEA-&gt;File-&gt;Setting,搜索Maven,在下图的位置修改成上一步修改的xml文件,下面的Local repository会自动修改. Maven for Hello World 右键Projects-&gt;New-&gt;Module 选择Maven,直接下一步 设置Group,ArtifactId Finish 点击Enable Auto-Import,等待下载 项目结构 选择Project Structure 选择Modules-&gt;Web 双击Web Resource Directory,选择scr/main目录,在后面加上webapp 设置Web的描述文件的位置 设置ArtifactId 未完待续]]></content>
      <categories>
        <category>Java</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode Customised]]></title>
    <url>%2Fposts%2F322488916.html</url>
    <content type="text"><![CDATA[VSCode CustomisedAuthor: JosephLau Description VSCode. 此文用来记录VSCode 使用技巧. 本文长期更新. USER SETTINGSWindows123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&#123; "workbench.startupEditor": "newUntitledFile", "editor.minimap.enabled": false, "terminal.external.windowsExec": "C:\\Program Files\\Git\\bin\\bash.exe", "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe", "workbench.colorTheme": "One Dark Pro", "workbench.iconTheme": "vscode-icons", "diffEditor.ignoreTrimWhitespace": false, "workbench.sideBar.location": "left", "editor.wordWrap": "on", "latex-workshop.latex.tools": [ &#123; "name": "latexmk", "command": "latexmk", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "-pdf", "%DOC%" ] &#125;, &#123; "name": "xelatex", "command": "xelatex", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "%DOC%" ] &#125;, &#123; "name": "pdflatex", "command": "pdflatex", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "%DOC%" ] &#125;, &#123; "name": "bibtex", "command": "bibtex", "args": [ "%DOCFILE%" ] &#125; ], "latex-workshop.latex.recipes": [ &#123; "name": "xelatex", "tools": [ "xelatex" ] &#125;, &#123; "name": "latexmk", "tools": [ "latexmk" ] &#125;, &#123; "name": "pdflatex -&gt; bibtex -&gt; pdflatex*2", "tools": [ "pdflatex", "bibtex", "pdflatex", "pdflatex" ] &#125; ], "latex-workshop.latex.clean.enabled": true, "latex-workshop.latex.clean.fileTypes": [ "*.aux", "*.bbl", "*.blg", "*.idx", "*.ind", "*.lof", "*.lot", "*.out", "*.toc", "*.acn", "*.acr", "*.alg", "*.glg", "*.glo", "*.gls", "*.ist", "*.fls", "*.log", "*.fdb_latexmk", "*.gz" ], "latex-workshop.view.pdf.viewer": "external", "latex-workshop.view.pdf.external.command": &#123; "command": "C:/Program Files/SumatraPDF/SumatraPDF.exe", "args": [ "%PDF%" ] &#125;, "latex-workshop.view.pdf.external.synctex": &#123; "command": "SumatraPDF.exe", "args": [ "-forward-search", "%TEX%", "%LINE%", "%PDF%" ] &#125;,&#125; MacOS12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&#123; "workbench.startupEditor": "newUntitledFile", "editor.minimap.enabled": false, "workbench.colorTheme": "One Dark Pro", "workbench.iconTheme": "vscode-icons", "diffEditor.ignoreTrimWhitespace": false, "workbench.sideBar.location": "left", "editor.wordWrap": "on", "editor.fontSize": 16, "terminal.integrated.fontFamily": "Source Code Pro for Powerline", "terminal.integrated.fontSize": 16, "gitlens.views.repositories.files.layout": "list", "java.home": "/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home", "files.exclude": &#123; "**/.classpath": true, "**/.project": true, "**/.settings": true, "**/.factorypath": true &#125;, "python.jediEnabled": false, "java.errors.incompleteClasspath.severity": "ignore", "editor.suggestSelection": "first", "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue", "latex-workshop.latex.tools": [ &#123; "name": "xelatex", "command": "xelatex", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "-pdf", "%DOC%" ] &#125;, &#123; "name": "latexmk", "command": "latexmk", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "-pdf", "%DOC%" ] &#125;, &#123; "name": "pdflatex", "command": "pdflatex", "args": [ "-synctex=1", "-interaction=nonstopmode", "-file-line-error", "%DOC%" ] &#125;, &#123; "name": "bibtex", "command": "bibtex", "args": [ "%DOCFILE%" ] &#125; ], "latex-workshop.latex.recipes": [ &#123; "name": "xelatex", "tools": [ "xelatex", "xelatex" ] &#125;, &#123; "name": "pdflatex -&gt; bibtex -&gt; pdflatex*2", "tools": [ "pdflatex", "bibtex", "pdflatex", "pdflatex" ] &#125; ], "latex-workshop.view.pdf.viewer": "tab", "latex-workshop.latex.autoClean.run": "onBuilt"&#125; EXTENSIONS One Dark Pro vscode-icons ESLint GitLens LaTeX Workshop Insert Date String Windows:ctrl+shift+I MacOScommand+shift+I]]></content>
      <categories>
        <category>Applications</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>Applications</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux Note]]></title>
    <url>%2Fposts%2F2223431484.html</url>
    <content type="text"><![CDATA[Linux NoteAuthor: JosephLau Description 此文用来记录平时使用Linux遇到的问题与心得. 本文长期更新. Linux 命令 sudo 12# 为某条命令指定用户sudo -Hu user-name commond Linux 配置 Java 1234567891011# 查看JDK路径whereis javawhich java （java执行路径）echo $JAVA_HOMEecho $PATH# 配置JDK环境变量vim /etc/profileexport JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.91.x86_64export JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib Linux 发行版 Ubuntu Mint Manjaro Elementary 其他问题 双系统切换后时间不一致 原因 Windows和Ubuntu在默认情况下看待硬件时间（主板上的BOIS显示的时间）的方式不一样 Windows把系统硬件时间当作本地时间（Local time），即操作系统中显示的时间跟BIOS中显示的时间是一样的. Linux/Unix/Mac把硬件时间当作UTC（Universal Time Coordinated,协调世界时），操作系统中显示的时间是硬件时间经过换算得来. 解决方案 1234567# 更改Windows# 如果要让Windows把硬件时间当作UTC# 在CMD窗口（快捷键Win+R，输入cmd，回车）中输入如下命令，可以快速编辑注册表Reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1# 或者直接编辑注册表，打开注册表编辑器（快捷键Win+R，输入regedit，回车），并找到一下目录位置# 添加一项类型为REG_DWORD的键值，命名为RealTimeIsUniversal，值为1，重启后时间即回复正常HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/TimeZoneInformation/]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WebHook Based on Git(Using PHP)]]></title>
    <url>%2Fposts%2F182327132.html</url>
    <content type="text"><![CDATA[WebHook Based on Git(Using PHP)Author: JosephLau Description 使用Webhook实现远程服务器自动拉取更新内容 生成公钥 Git用户公钥 123ssh-keygen -t rsa -C "test@test.com"# 然后一直回车就行# 生成的文件通常是 /root/.ssh/id_rsa，如果非root用户请查看提示上的路径 单独的服务器用户公钥 12345sudo -Hu www ssh-keygen -t rsa # 服务器运行PHP的用户为www,所以Hooks文件中涉及到权限的地方都需要声明为该用户# 所以也就需要在Remote中加入该用户对应的公钥# 意思是为www用户生成公钥# 也是一直回车,中间会提示密钥存储位置 接下来将这两个公钥加入账户中,获取对仓库的权限 Hook文件创建和修改目录权限：1234# 创建目录mkdir /mnt/wwwroot/xxxx# 修改目录权限chown -R www:www /mnt/wwwroot/xxxx 用www用户创建Hook文件,声明权限1sudo -Hu www touch /data/wwwroot/xxxx/webhook.php 创建log文件夹sudo -Hu www mkdir log Hook文件内容123456789101112131415161718192021222324252627&lt;?php//git webhook 自动部署脚本//项目存放物理路径$path = "/mnt/wwwroot/www.xxxx.com";$requestBody = file_get_contents("php://input");$content = json_decode($requestBody, true);//if(empty($content))&#123;// die("sent fail");//&#125;//若是主分支且提交数大于0if ($content['ref']=='refs/heads/master' &amp;&amp; $content['total_commits_count']&gt;0) &#123; //$res = shell_exec("cd &#123;$path&#125; &amp;&amp; git fetch --all &amp;&amp; git reset --hard origin/master "); //$res = shell_exec("cd &#123;$path&#125; &amp;&amp; git add . &amp;&amp; git commit -m 'commit by svn' &amp;&amp; git pull &amp;&amp; git push 2&gt;&amp;1"); $res = shell_exec("cd &#123;$path&#125; &amp;&amp; git pull origin master "); $res_log = '-------------------------'.PHP_EOL; $res_log .= $content['user_name'] . ' 在' . date('Y-m-d H:i:s') . '向' . $content['repository']['name'] . '项目的' . $content['ref'] . '分支push了' . $content['total_commits_count'] . '个commit：' . PHP_EOL; $res_log .= $res.PHP_EOL; file_put_contents("&#123;$path&#125;/log/".date('Y-m',time()).".txt", $res_log, FILE_APPEND);&#125;?&gt; 确保你的hook文件可以访问,例如https://test.com/hook.php ,Hook文件准备完成. 配置Remote和服务器仓库 配置公钥,将之前生成的公钥文件加入到Remote仓库的SSH公钥选项中 服务器仓库 12sudo -Hu www clone git@repo_address/gittest.git /自定义文件夹# 意思是以www用户的身份clone仓库,权限属于www用户 添加WebHooks规则 在每个仓库的设置中进行设置 可以选择推送事件/标签推送事件/评论/缺陷事件/合并请求/构建事件 链接中填写外网访问服务器Hook文件的地址, 点击增加WEBHOOKS即可. 测试在本地仓库中: 1234vim test.txtgit add .git commit -m "test hook"git push 在服务器端: 12# 查看更改是否拉取到服务器vim test.txt]]></content>
      <categories>
        <category>Git</category>
        <category>WebHook</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TortoiseGit on windows tutorial]]></title>
    <url>%2Fposts%2F2835625644.html</url>
    <content type="text"><![CDATA[Tutorial of TortoiseGit on WindowsAuthor: JosephLau Description Tutorial of TortoiseGit on Windows. TortoiseGit is a Git) revision control client, implemented as a Windows shell extension and based on TortoiseSVN. It is free software released under the GNU General Public License. In Windows Explorer, besides showing context menu items for Git commands, TortoiseGit provides icon overlays that indicate the status of Git working trees and files. It also comes with the TortoiseGitMerge utility to visually compare two files and resolve conflicts. 安装 TortoiseGit 需要下载Git 以及TortoiseGit TortoiseGit 官网自带中文语言包(64位) 安装比较简单,一路Next,只需要注意下面几点: 开始安装一路Next 配置软件 勾选Run first start wizard 设置本地Git路径 设置用户名与邮箱地址 选择OpenSSh作为SSH软件工具(默认的会出现不知名错误) 在相同的页面选择Generate PuTTY key pair 点击生成,鼠标需要在空白处移动,不然进度会非常慢 把生成的密钥内容粘贴进git库中的SSH 密钥的位置(设置-SSH 公钥)并保存到本地 打开Pageant(TortoiseGit文件夹下),点击Add,将刚刚生成的文件添加进去 开始使用Clone到本地 工程文件夹下选择Git Clone,将Remote工程文件夹拉取到本地 URL中填写项目地址(SSH),Directory中填写工程所在位置,点击OK即可拉取到本地(与SVN操作大致相同) 将本地更新推送到远程 选择Git Commit… 输入Message后点击Commit 接着点击Push并勾选合适的参数推送到远程客户端 Push完成,一次本地更新结束,其他操作类似 其他功能 TortoiseGitDiff TortoiseGit选项]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Note]]></title>
    <url>%2Fposts%2F1928241614.html</url>
    <content type="text"><![CDATA[Java NoteAuthor: JosephLau Description 此文用来记录平时使用Java遇到的问题与心得. 本文长期更新. Java常用函数String indexOf() charAt() Unix 时间戳与标准时间互转1234567891011121314151617/** * Java将Unix时间戳转换成指定格式日期字符串 * @param timestampString 时间戳 如："1473048265"; * @param formats 要格式化的格式 默认："yyyy-MM-dd HH:mm:ss"; * * @return 返回结果 如："2016-09-05 16:06:42"; */// importedimport java.text.SimpleDateFormat;import java.util.Locale;import java.util.Date;public static String TimeStamp2Date(String timestampString, String formats)&#123; Long timestamp = Long.parseLong(timestampString); String _date = new SimpleDateFormat(formats, Locale.CHINA).format(new Date(timestamp)); return _date;&#125; 调用方法 TimeStamp2Date(&quot;1473048265&quot;, &quot;yyyy-MM-dd HH:mm:ss”); 1234567891011121314151617/** * 日期格式字符串转换成时间戳 * * @param dateStr 字符串日期 * @param format 如：yyyy-MM-dd HH:mm:ss * * @return */public static String Date2TimeStamp(String dateStr, String format) &#123; try &#123; SimpleDateFormat sdf = new SimpleDateFormat(format); return String.valueOf(sdf.parse(dateStr).getTime() / 1000); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return "";&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL Note]]></title>
    <url>%2Fposts%2F2102782187.html</url>
    <content type="text"><![CDATA[MySQL NoteAuthor: JosephLau Description 此文用来记录平时使用MySQL遇到的问题与心得. 本文长期更新. MySQL常用命令 为用户修改密码 1SET PASSWORD FOR &apos;Username&apos;@&apos;Host&apos; = PASSWORD(&apos;password&apos;); 创建用户 123CREATE USER Username IDENTIFIED BY &apos;password&apos;;GRANT SELECT, INSERT, UPDATE, DELETE, EXECUTE ON snatch.* TO &apos;Username&apos;@&apos;%&apos; identified by &apos;password&apos;;FLUSH PRIVILEGES; 删除用户 1Delete FROM user Where User=&apos;user-name&apos; and Host=&apos;host&apos;; MySQL遇到的问题InnoDB引擎自增id中断问题 如果在插入的过程中出现了删除的操作,那么下一条数据的自增id将跳过这个id,从而出现自增id中断的问题. 如何检查: 123456# 如果两个数不一样,那么就说明中间出现了断层SELECT COUNT(*) FROM table_name;SELECT MAX(id) FROM table_name;# 显示断层的idSELECT id FROM (SELECT id FROM table_name ORDER BY id ASC) t WHERE NOT EXISTS (SELECT 1 FROM table_name WHERE id=t.id-1); 解决办法 不适用默认自增id,自己设定id 在每次插入之前都将AUTO_INCREMENT设置为11ALTER TABLE table_name AUTO_INCREMENT=1; 查询优化limit、between等语句12345# sql-1select * FROM table_name limit index1,index2-index1;# sql-2select * FROM table_nameWHERE id BETWEEN index1 AND index2 limit 100; 数据量比较大的话,sql-2的查询效率会比sql-1高很多,在数据量比较大的情况下一般使用between语句. 查询表头信息1SHOW COLUMNS FROM snatch.`jcy_prop`;]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hackintosh for Lenovo Ideapad 700 15isk]]></title>
    <url>%2Fposts%2F3505015416.html</url>
    <content type="text"><![CDATA[Hacintash for Lenovo Ideapad 700 15iskAuthor: JosephLau Description 引言最近更换了固态硬盘，所以就有一个闲置了出来，然后就在京东上面买了一个M.2接口NGFF协议的固态硬盘盒，用来装Hackintosh. Windows 下制作MacOS安装盘准备工具 容量大于8G的U盘 etcher Lenovo Ideapad 700 15isk专用CLOVER文件 系统镜像：【黑果小兵】macOS Mojave 10.14.1 18B75 正式版 with Clover 4726原版镜像 制作安装镜像镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可 安装镜像的制作到这里就完成了,下一步,我们需要将电脑专用的EFI文件复制进刚制作好的USB磁盘的EFI分区里。 Windows下将专用的EFI文件复制到USB安装盘的EFI分区下以系统管理员身份打开cmd窗口,输入命令： 123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id=&quot;ebd0a0a2-b9e5-4433-87c0-68b6b72699c7&quot; # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad BIOS设置进入BIOS,默认开启了安全认证,UEFI引导需要关闭安全启动Secure Boot Mode方式,否则无法加载UEFI引导设备.并设置MacOS启动U盘为第一启动序列,保存并重新启动. MacOS安装第一阶段(以下为摘抄) 进入Clover主菜单 移动光标到Boot OS X Install from XiaoMiPro 10131回车 如果无法进入安装界面,需要打开啰嗦模式进行排错,具体的操作方法请参考Clover使用教程 。 开始引导MacOS系统 这个过程需要1-2分钟,耐心等待进入安装程序,出现语言选择界面 出现macOS实用工具界面,选择磁盘工具 磁盘工具选择显示所有设备:选择SSD Media,点击抹掉按钮,选择默认的Mac OS扩展(日志型),将名称修改为Macintosh HD,点击抹掉按钮 假设您的磁盘是空的且数据是已经备份过的,别怪我没提醒你!!! 抹盘成功后,它会自动生成一个200MB的EFI分区,这样做的好处是不会出现安装过程中的由于EFI分区尺寸小于200MB而引起的无法安装的错误.当然前提是你的磁盘中没有重要的数据,或者您的数据已经提前备份过了.到这里,磁盘工具的动作就已经结束了.退出磁盘工具进入安装界面,进行系统的安装了. 安装macOS进入安装界面选择继续点击同意,选择Macintosh HD 选择安装 期间,它会把USB安装盘上的安装文件预复制到要安装的系统分区里,这个过程在小米Pro的笔记本上它跑得飞快,数据复制完后,它会自动重启然后进行第二阶段的安装 第二阶段第二阶段的安装会有两种界面,一种是不进安装界面直接安装,另一种是先进入安装界面直接安装,需要注意的是,无论是哪一种界面下,安装的过程中全程是禁用鼠标和键盘的,需要你做的只是耐心等待它安装完成 安装速度取决于你的磁盘速度,第二阶段的安装已经与USB安装盘没什么关系了.macOS 10.13的安装完全区别于10.12,它不能免二次安装,甚至还需要重启多次,这些都是正常现象,请不要大惊小怪的. 系统安装完成后,重启进入系统设置向导 国家选择首先让你选择国家,这里我选择中国点击继续,设置键盘 设置键盘这里询问你是否传输信息到这台Mac 数据恢复可以从Mac或者Time Machine备份恢复 我选择现在不传输任何信息,点击继续 Apple ID登录选择是否使用您的Apple ID登录,如何想现在就登录到Apple ID,请输入Apple ID和密码登录,否则选择不登录,进入系统后也可以设置登录到iCloud,点击继续阅读条款与条件,选择同意继续出现创建电脑用户的窗口,输入用户名和密码,点击继续 创建电脑用户系统会创建初始用户用户创建成功后,弹出iCloud的正在设置用户的窗口紧接着弹出设置iClound钥匙串的设置窗口,选择稍候设置,点击继续 设置iCloud钥匙串出现快捷设置,点击继续 快捷设置自定义设置定位以及数据反馈,请根据自己的喜好进行设置 出现iCloud中的所有文件,如果你需要将文稿和桌面上的文件储存在 iCloud Drive中,请勾选,否则取消勾选,点击继续 iCloud文件同步设置出现FileVault磁盘加密,如果你需要打开 Filevault 磁盘加密,请勾选,否则取消勾选,点击继续 FileVault磁盘加密设置出现正在设置您的Mac,请稍候完成设置向导 设置向导完成 出现桌面后,整个的安装向导就完成了. 安装后的系统设置教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[macOS篇] 新的系统安装成功后，EFI还位于U盘里，总不能一直挂着U盘使用系统吧。这个时候如果你想将U盘里的EFI复制到磁盘的EFI分区里，却苦于找不到看不见EFI分区，这个时候是该让diskutil登场了。 diskutil命令的基本用法： 查看磁盘分区表1diskutil list /dev/disk0(internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 256 GB disk0 1: EFI EFI 200 MB disk0s1 2: Apple_HFS MAC 128 GB disk0s2 3: Microsoft Basic Data WIN10 127.7 GB disk0s3 /dev/disk1(internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme 16 GB disk1 1: EFI EFI 200 MB disk1s1 2: Apple_HFS Install macOS Sierra 15.8 GB disk1s2 挂载磁盘EFI分区1sudo diskutil mount disk0s1 挂载U盘EFI分区1sudo diskutil mount disk1s1 打开Finder，注意后面有个. 1open . 左侧会显示挂载了两个EFI分区，将U盘EFI目录全部复制到磁盘的EFI分区即可。 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是合并的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 完成现在就可以拔掉U盘，尽情重启啦！ 后续工作 iMessage无法使用 更改苹果三码实现 没有在苹果设备上注册过的账号一定是不可用的 之后继续尝试其他方案 网卡、蓝牙无法使用 HIDPI提高分辨率]]></content>
      <categories>
        <category>Macintosh</category>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」627. Swap Salary]]></title>
    <url>%2Fposts%2F3296282374.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 627. Swap SalaryDescriptionGiven a table salary, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table. For example: 123456| id | name | sex | salary ||----|------|-----|--------|| 1 | A | m | 2500 || 2 | B | f | 1500 || 3 | C | m | 5500 || 4 | D | f | 500 | After running your query, the above salary table should have the following rows: 123456| id | name | sex | salary ||----|------|-----|--------|| 1 | A | f | 2500 || 2 | B | m | 1500 || 3 | C | f | 5500 || 4 | D | m | 500 | Solution123# Write your MySQL query statement belowupdate salary set sex=IF(sex=&apos;f&apos;,&apos;m&apos;,&apos;f&apos;) ThinkingMySQL的东西忘得都差不多了，这些还是要定期复习一下的。话说这种判断式的语句真的非常好用啊！]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」876. Middle of the Linked List]]></title>
    <url>%2Fposts%2F3852375072.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 876. Middle of the Linked ListDescription Given a non-empty, singly linked list with head node head, return a middle node of linked list. If there are two middle nodes, return the second middle node. Examples one 12345Input: [1,2,3,4,5]Output: Node 3 from this list (Serialization: [3,4,5])The returned node has value 3. (The judge&apos;s serialization of this node is [3,4,5]).Note that we returned a ListNode object ans, such that:ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL. two 123Input: [1,2,3,4,5,6]Output: Node 4 from this list (Serialization: [4,5,6])Since the list has two middle nodes with values 3 and 4, we return the second one. Note: The number of nodes in the given list will be between 1 and 100. Solution123456789101112131415161718192021/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* middleNode(ListNode* head) &#123; ListNode *slow, *fast; slow=head;fast=head; while(fast!=NULL &amp;&amp; fast-&gt;next!=NULL) &#123; slow=slow-&gt;next; fast=fast-&gt;next-&gt;next; &#125; return slow; &#125;&#125;; Thinking其实是一个搜索的过程，正常逻辑就是遍历链表到头，获取一半的长度，截取后半部分就可以，但是由于是链表，搜索起来耗费时间空间。 可以把链表内容复制到数组，从而将目标找到。也可以设置两个指针: slow 、fast，fast移动速度为slow的两倍，那么当fast到达链表尾部时，slow此时在链表中部，返回slow指针就达到了我们的目的。]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Linked List</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」852. Peak Index in a Mountain Array]]></title>
    <url>%2Fposts%2F756872862.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 852. Peak Index in a Mountain ArrayDescription Let’s call an array A a mountain if the following properties hold: A.length &gt;= 3 There exists some 0 &lt; i &lt; A.length - 1 such that A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1] Given an array that is definitely a mountain, return any i such that A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]. Examples one 12Input: [0,1,0]Output: 1 two 12Input: [0,2,1,0]Output: 1 Note 3 &lt;= A.length &lt;= 10000 0 &lt;= A[i] &lt;= 10^6 A is a mountain, as defined above. Solution(C++)1234567891011class Solution &#123;public: int peakIndexInMountainArray(vector&lt;int&gt;&amp; A) &#123; for(int i=0;i&lt;A.size();i++) &#123; if(A[i]&gt;A[i+1]) return i; &#125; return 0; &#125;&#125;; Thinking直接根据Mountain Array的定义来确定i的位置，比较无脑的办法就是直接遍历数组。]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Binary Search</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」617. Merge Two Binary Trees]]></title>
    <url>%2Fposts%2F1733828030.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 617. Merge Two Binary TreesDescription Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree. Example1234567891011121314Input: Tree 1 Tree 2 1 2 / \ / \ 3 2 1 3 / \ \ 5 4 7 Output: Merged tree: 3 / \ 4 5 / \ \ 5 4 7 Note: The merging process must start from the root nodes of both trees. Solution C++ 12345678910111213141516171819202122/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) &#123; if(t1==NULL &amp;&amp; t2==NULL)return NULL; int tempValue=(t1==NULL?0:t1-&gt;val)+(t2==NULL?0:t2-&gt;val); TreeNode* res=new TreeNode(tempValue); res-&gt;left=mergeTrees((t1==NULL?NULL:t1-&gt;left),(t2==NULL?NULL:t2-&gt;left)); res-&gt;right=mergeTrees((t1==NULL?NULL:t1-&gt;right),(t2==NULL?NULL:t2-&gt;right)); return res; &#125;&#125;; Thinking使用递归遍历两个树，注意从头节点开始获取val]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Tree</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode Analysis]]></title>
    <url>%2Fposts%2F1393014657.html</url>
    <content type="text"><![CDATA[LeetCode Analysis LeetCode ID Name Status Difficulty Language 191 Number of 1 Bits Solved E C/C++ 386 Lexicographical Numbers Solved M C/C++ 387 First Unique Character in a String Solved E C/C++ 461 Hamming Distance Solved E C/C++ 535 Encode and Decode TinyURL Solved M C/C++ 595 Big Countries Solved E C/C++ 617 Merge Two Binary Trees Solved E C/C++ 627 Swap Salary Solved E MySQL 654 Maximum Binary Tree Solved M C/C++ 657 Judge Route Circle Solved E C/C++ 709 To Lower Case Solved E C/C++ 771 Jewels and Stones Solved E C/C++ 804 Unique Morse Code Words Solved E C/C++ 807 Max Increase to Keep City Skyline Solved M C/C++ 832 Flipping an Image Solved E C/C++ 852 Peak Index in a Mountain Array Solved E C/C++ 876 Middle of the Linked List Solved E C/C++]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-NexT博客样式自定义]]></title>
    <url>%2Fposts%2F1540132352.html</url>
    <content type="text"><![CDATA[Hexo-NexT博客样式自定义Author: JosephLau Description 默认的主题样式非常简单，但是在有些方面还有些缺陷，其实NexT主题中已经包含这些主题，我们只需要把他们启用就OK啦。 更新NexT主题12cd themes/nextgit pull 其中Blog文件夹下的_config.yml为站点配置文件，themes/next下的_config.yml为主题配置文件。 开启主页菜单打开主题配置文件，找到menu内容，将需要用到的菜单取消注释 123456789menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive # schedule: /schedule/ || calendar # sitemap: /sitemap.xml || sitemap # commonweal: /404/ || heartbeat 启用的菜单需要添加对应的页面1hexo new page "categories" 并在index.md文件中添加type: &quot;categories&quot; 添加Fork me on github在GitHub Ribbons或GitHub Corners选择一款你喜欢的挂饰，拷贝方框内的代码1&lt;a href="https://your-url" class="github-corner" aria-label="View source on Github"&gt;&lt;svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"&gt;&lt;path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"&gt;&lt;/path&gt;&lt;path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"&gt;&lt;/path&gt;&lt;path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt; 在/themes/next/layout/_layout.swig文件中，将上述代码放到&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下方。 RSS 安装插件 1npm install --save hexo-generator-feed 编辑站点配置文件，在文件末尾添加 1plugins: hexo-generate-feed 配置主题配置文件 1234# Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml //注意：有一个空格 修改底部标签样式修改\themes\next\layout\_macro\post.swig中文件，搜索rel=&quot;tag&quot;&gt;#，将#替换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;。 修改代码块自定义样式修改\themes\next\source\css\_custom\custom.styl123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 修改主题配置文件，搜索Social123456789101112# [社交平台名]: [社交地址] || [图标名称]social: GitHub: https://github.com/JacksonLeon || github E-Mail: mailto:pumbjackson@gmail.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 添加点击爱心效果给NexT主题内添加页面点击出现爱心的效果 创建js文件在/themes/next/source/js/src下新建文件clicklove.js，接着把该链接下的代码拷贝粘贴到clicklove.js文件中。代码如下： 1!function (e, t, a) &#123; function n() &#123; c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"), o(), r() &#125; function r() &#123; for (var e = 0; e &lt; d.length; e++)d[e].alpha &lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y-- , d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = "left:" + d[e].x + "px;top:" + d[e].y + "px;opacity:" + d[e].alpha + ";transform:scale(" + d[e].scale + "," + d[e].scale + ") rotate(45deg);background:" + d[e].color + ";z-index:99999"); requestAnimationFrame(r) &#125; function o() &#123; var t = "function" == typeof e.onclick &amp;&amp; e.onclick; e.onclick = function (e) &#123; t &amp;&amp; t(), i(e) &#125; &#125; function i(e) &#123; var a = t.createElement("div"); a.className = "heart", d.push(&#123; el: a, x: e.clientX - 5, y: e.clientY - 5, scale: 1, alpha: 1, color: s() &#125;), t.body.appendChild(a) &#125; function c(e) &#123; var a = t.createElement("style"); a.type = "text/css"; try &#123; a.appendChild(t.createTextNode(e)) &#125; catch (t) &#123; a.styleSheet.cssText = e &#125; t.getElementsByTagName("head")[0].appendChild(a) &#125; function s() &#123; return "rgb(" + ~~(255 * Math.random()) + "," + ~~(255 * Math.random()) + "," + ~~(255 * Math.random()) + ")" &#125; var d = []; e.requestAnimationFrame = function () &#123; return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (e) &#123; setTimeout(e, 1e3 / 60) &#125; &#125;(), n() &#125;(window, document); 修改_layout.swig在\themes\next\layout\_layout.swig文件末尾添加： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt; 添加字数统计、阅读时长Installation1$ npm install hexo-symbols-count-time --save UsageActivate this plugin in hexo’s _config.yml (which locates in the root dir of your blog) by enabled any option: 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true If symbols_count_time not specified (or commented), plugin will totally disabled. NexT themeThis plugin integrated in «NexT» and after plugin enabled in main Hexo config, you may adjust options in NexT config: 123456symbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275 Parameters AWL— Average Word Length (chars count in word). Default:4. You can check this here CN ≈ 2 EN ≈ 5 RU ≈ 6 WPM— Words Per Minute. Default:275. You can check this here Slow ≈ 200 Normal ≈ 275 Fast ≈ 350 Suffix — If time to read less then 60 minutes, added suffix as string parameter. Default: mins. Note for Chinese users: because in Chinese language average word length about ~1.5 and if you at most cases write posts in Chinese (without mixed English), recommended to set awl to 2 and wpm to 300.But if you usualy mix your posts with English, awl to 4 and wpm to 275 will be nice. 底部隐藏由Hexo强力驱动、主题打开主题配置文件，搜索footer下的powered以及theme设置为： 12enable: falseversion: false 在文章底部增加版权信息 在目录Blog/themes/next/layout/_macro/，添加文件 my-copyright.swig，内容如下： 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class=&quot;my_post_copyright&quot;&gt; &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class=&quot;copy-path&quot; title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot; aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard(&apos;.fa-clipboard&apos;); $(&quot;.fa-clipboard&quot;).click(function()&#123; clipboard.on(&apos;success&apos;, function()&#123; swal(&#123; title: &quot;&quot;, text: &apos;复制成功&apos;, icon: &quot;success&quot;, showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在Blog/themes/next/source/css/_common/components/post/添加文件my-post-copyright.styl，文件内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改Blog/themes/next/layout/_macro/post.swig，在如图位置添加以下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 在Blog/themes/next/source/css/_common/components/post/post.styl文件最后加入下面的代码： 1@import &quot;my-post-copyright&quot; 在Front-matter中加入copyright : ture： 12345678title: Hexo-NexT博客主题美化categories: - Tutorial- Hexocopyright: truedate: 2018-07-17 08:36:16updated: 2018-12-22 14:27:53tags: [Hexo, Blog, Tutorial] 配置根目录下的_config.yml文件，配置为： 123456# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://wenmobo.github.io/ //你的网站地址root: /permalink: :year/:month/:day/:title/permalink_defaults: 效果图如下所示： 自定义样式站点// 站点名字体.site-title &#123; font-size: 26px; line-height: 50px; letter-spacing: 1px;&#125;// 页面最顶部的横线.headband &#123; height: 2px; background-image: linear-gradient(90deg, #F79533 0%, #F37055 15%, #EF4E7B 30%, #A166AB 44%, #5073B8 58%, #1098AD 72%, #07B39B 86%, #6DBA82 100%);&#125;// 页面留白更改.header-inner &#123; padding-top: 0px; padding-bottom: 0px; //圆角矩形 border-radius: 15px 15px 15px 15px;&#125;// 去除在页面文章之间的分割线.posts-expand .post-eof &#123; margin: 0px; background-color: rgba(255, 255, 255, 0);&#125;// 页面底部页码.pagination .page-number.current &#123; background: #34495e; //底部页码圆形 width: 15px; border-radius: 100%; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgba(0,0,0, 0.5);&#125;.pagination .prev, .pagination .next, .pagination .page-number &#123; margin-bottom: 10px; border: none;&#125;// 去除页面底部页码上面的横线.pagination &#123; border: none; margin: 0px;&#125;// archives页面顶部文字.page-archive .archive-page-counter &#123; font-size: 18px; color: rgb(0,0,0); font-weight: bold;&#125;// archives页面时间轴左边线条第一个圆点颜色.page-archive .posts-collapse .archive-move-on &#123; top: 15px; opacity: 1; background-color: rgb(255, 255, 255); box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);&#125;//post背景.content-wrap&#123; float: right; box-sizing: border-box; padding: 40px; //width: calc(100% - 252px); // 统一背景颜色 background: #eee; min-height: 700px; box-shadow: initial; border-radius: 30px 30px 30px 30px; +tablet() &#123; width: 100%; padding: 8px; border-radius: 30px; &#125; +mobile() &#123; width: 100%; padding: 8px; min-height: auto; border-radius: 30px; &#125;&#125;//整体背景色body &#123; color: #000; //统一背景颜色 background: #eee;&#125;//上方留白去除.posts-expand &#123; padding-top: 10px;&#125;.posts-expand .post-meta &#123; margin: 5px 0px 0px 0px;&#125;.post-button &#123; margin-top: 0px;&#125;//回到顶端背景颜色.back-to-top&#123; //统一背景颜色 background: #eee;&#125;// 文章.post &#123; margin-bottom: 25px; padding: 45px 36px 36px 36px; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgb(255, 255, 255); border-radius: 15px 15px 15px 15px;&#125;// 文章``代码块的自定义样式code &#123; margin: 0px 4px; background: rgba(0,0,0,0.75) color: rgb(255,255,255);&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125;//文章标题颜色.posts-expand .post-title-link&#123; color: #000;&#125;// 文章底部跳转.post-nav-item a &#123; //color: rgb(80, 115, 184); font-weight: bold;&#125;.post-nav-item a:hover &#123; //color: rgb(161, 102, 171); font-weight: bold;&#125;// 文章内标题样式（左边的竖线）.post-body h2, h3, h4, h5, h6 &#123; border-left: 4px solid rgb(161, 102, 171); margin-left: -36px; padding-left: 32px;&#125;// 去掉图片边框.posts-expand .post-body img &#123; border: none; padding: 0px;&#125;.post-gallery .post-gallery-img img &#123; padding: 3px;&#125;// [Read More]按钮样式.post-button .btn &#123; color: #555 !important; background-color: rgb(255, 255, 255); border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); //border: none !important; transition-property: unset; padding: 3px 15px; border-radius: 16px;&#125;.post-button .btn:hover &#123; color: rgb(255,255,255) !important; border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); background-color: rgba(0,0,0,0.75); border-radius: 16px;&#125;//侧栏.sidebar&#123; //统一背景颜色 background: #eee;&#125;.sidebar-inner &#123; box-sizing: border-box; width: 240px; color: #555; background: #fff; box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12), 0 -1px 0.5px 0 rgba(0,0,0,0.09); border-radius: 15px; opacity: 0;&#125;.sidebar-inner .affix-top&#123; border-radius: 15px;&#125;// 侧栏站点作者名.site-author-name &#123; display: none;&#125;// 侧栏头像（圆形以及旋转效果）.site-author-image &#123; border: 2px solid rgb(255, 255, 255); border-radius: 100%; transition: transform 1.0s ease-out;&#125;img:hover &#123; transform: rotateZ(360deg);&#125;.posts-expand .post-body img:hover &#123; transform: initial;&#125;//归档// archives页面顶部文字.page-archive .archive-page-counter &#123; font-size: 18px; color: rgb(0,0,0); font-weight: bold;&#125;// archives页面时间轴左边线条第一个圆点颜色.page-archive .posts-collapse .archive-move-on &#123; top: 15px; opacity: 1; background-color: rgb(255, 255, 255); box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);&#125;//菜单// 菜单超链接字体大小.menu .menu-item a &#123; font-size: 14px; //圆角矩形 border-radius: 20px;&#125;// 菜单各项边距.menu .menu-item &#123; margin: 5px 15px;&#125;//选中菜单颜色以及圆角矩形.menu-item-active a, .menu .menu-item a:hover, .menu .menu-item span.exturl:hover &#123; background: #000000; color: #fff; border-radius: 20px;&#125;.menu-item-active a:after, .menu .menu-item a:hover:after, .menu .menu-item span.exturl:hover:after &#123; background-color: #fff;&#125;//其他// 自定义页脚跳动的心样式@keyframes heartAnimate &#123; 0%,100%&#123;transform:scale(1);&#125; 10%,30%&#123;transform:scale(0.9);&#125; 20%,40%,60%,80%&#123;transform:scale(1.1);&#125; 50%,70%&#123;transform:scale(1.1);&#125;&#125;#heart &#123; animation: heartAnimate 1.33s ease-in-out infinite;&#125;.with-love &#123; color: rgb(255, 113, 168);&#125;// 自定义特别的样式h2.love &#123; border-left: none; color: rgb(255, 113, 168); -webkit-text-fill-color: unset;&#125;//弃用/*位置.post-button &#123; text-align: left;&#125;*/ 文章链接唯一化也许你会数次更改文章题目或者变更文章发布时间，在默认设置下，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择。 安装插件1npm install hexo-abbrlink --save 「注」安装后，不要在 hexo s 模式下更改文章文件名，否则文章将成空白。 在站点配置文件中 permalink查找代码 permalink:，将其更改为: 1permalink: posts/:abbrlink/ # “posts/” 可自行更换 在站点配置文件中添加abbrlink添加如下代码： 1234# abbrlink configabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: dec # 进制：dec(default) and hex 选择依据： 12345678crc16 &amp; hex https://post.zz173.com/posts/66c8.htmlcrc16 &amp; dec https://post.zz173.com/posts/65535.htmlcrc32 &amp; hex https://post.zz173.com/posts/8ddf18fb.htmlcrc32 &amp; dec https://post.zz173.com/posts/1690090958.html 参考rozbo/hexo-abbrlinkhexo-abbrlink介绍Hexo插件之Hexo-UUID]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」832. Flipping an Image]]></title>
    <url>%2Fposts%2F585836704.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 832. Flipping an ImageDescription Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image.To flip an image horizontally means that each row of the image is reversed. For example, flipping [1, 1, 0] horizontally results in [0, 1, 1].To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] results in [1, 0, 0]. Examplesone1234Input: [[1,1,0],[1,0,1],[0,0,0]]Output: [[1,0,0],[0,1,0],[1,1,1]]Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]] two1234Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] Notes 1 &lt;= A.length = A[0].length &lt;= 20 0 &lt;= A[i][j] &lt;= 1 Solution1234567891011121314151617class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; flipAndInvertImage(vector&lt;vector&lt;int&gt;&gt;&amp; A) &#123; int size=A[0].size(); for(int i=0;i&lt;A.size();i++) &#123; //矩阵内顺序反转 reverse(A[i].begin(),A[i].end()); for(int j=0;j&lt;size;j++) &#123; //反转 A[i][j]=1-A[i][j]; &#125; &#125; return A; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」709. To Lower Case]]></title>
    <url>%2Fposts%2F1103497448.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 709. To Lower CaseDescription Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase. C++ Solution1234567class Solution &#123;public: string toLowerCase(string str) &#123; transform(str.begin(),str.end(),str.begin(),::tolower); return str; &#125;&#125;; STL的algorithm库给我们提供了模板函数transform可以轻松解决这个问题. 函数原型 123456789template &lt; class InputIterator, class OutputIterator, class UnaryOperator &gt; OutputIterator transform ( InputIterator first1, InputIterator last1, OutputIterator result, UnaryOperator op ); template &lt; class InputIterator1, class InputIterator2, class OutputIterator, class BinaryOperator &gt; OutputIterator transform ( InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryOperator binary_op ); 测试代码 12345678910111213141516171819202122232425#include &lt;string&gt; #include &lt;algorithm&gt; using namespace std; int main() &#123; string strA = "pmbjackson@outlook.com"; string strB = "pumbjackson@gmail.com"; printf("Before transform:\n"); printf("strA:%s \n", strA.c_str()); printf("strB:%s \n\n", strB.c_str()); transform(strA.begin(), strA.end(), strA.begin(), ::toupper); transform(strB.begin(), strB.end(), strB.begin(), ::toupper); printf("After transform to toupper:\n"); printf("strA:%s \n", strA.c_str()); printf("strB:%s \n\n", strB.c_str()); transform(strA.begin(), strA.end(), strA.begin(), ::tolower); transform(strB.begin(), strB.end(), strB.begin(), ::tolower); printf("After transform to lower:\n"); printf("strA:%s \n", strA.c_str()); printf("strB:%s \n\n", strB.c_str()); return 0; &#125; 运行结果 12345678910strA:pmbjackson@outlook.com strB:pumbjackson@gmail.com After transform to toupper: strA:PMBJACKSON@OUTLOOK.COM strB:PUMBJACKSON@GMAIL.COM After transform to lower: strA:pmbjackson@outlook.com strB:pumbjackson@gmail.com Java Solution12345class Solution &#123; public String toLowerCase(String str) &#123; return str.toLowerCase(); &#125;&#125;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>String</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django-blog]]></title>
    <url>%2Fposts%2F706331224.html</url>
    <content type="text"><![CDATA[1pip install -r requirement.txt requirement.txt 12345678910111213141516171819bootstrap-admin dj-database-url dj-static Django django-markdown django-toolbelt Markdown markdown2 pip psycopg2 Pygments pygobject python-apt pytz setuptools ssh-import-id static3 virtualenv wheel 12345678910$ django-admin.py startproject my_blog$ python manage.py startapp articleINSTALLED_APPS = ( ... 'article', #这里填写的是app的名称)ALLOWED_HOSTS = ['*']$ python manage.py runserver 0.0.0.0:2210]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Operating System Note]]></title>
    <url>%2Fposts%2F2700998608.html</url>
    <content type="text"><![CDATA[Operating System Note 页面置换算法 选择调出页面的算法就称为页面置换算法。好的页面置换算法应有较低的页面更换频率，也就是说，应将以后不会再访问或者以后较长时间内不会再访问的页面先调出。 常见的页面置换算法有：最佳置换算法、先进先出（FIFO）、最近最久未使用（LRU）、时钟（CLOCK）置换算法。 OPT 最佳置换算法所选择的被淘汰页面将是以后永不使用的，或者是在最长时间内不再被访问的页面,这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若千页面中哪个是未来最长时间内不再被访问的，因而该算法其实是无法实现。 虽然OPT算法是无法实现的，但是我们可以利用他对其他页面置换算法进行评价。]]></content>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenCV Note]]></title>
    <url>%2Fposts%2F735415811.html</url>
    <content type="text"><![CDATA[OpenCV NoteAuthor: JosephLau Description 此文用来记录平时使用OpenCV遇到的问题与心得. 本文长期更新. 安装与配置安装 这里使用VS 2017与Opencv 3.4.1为例，其他版本基本相似 下载Opencv 双击运行，安装到磁盘（Opencv安装位置下面需要用到） 等解压完成就可以了 配置系统环境变量配置 （以Windows 10为例）我的电脑-&gt;右键-&gt;属性-&gt;高级系统设置-&gt;环境变量 系统变量中找到path选择编辑 新建，内容为%Opencv%\build\x64\vc15\bin，其中%Opencv%为Opencv安装路径 VS 2017配置 创建VS 2017项目，Visual C++ -&gt; Win32 -&gt; Win32控制台应用程序 附加选项中勾上空项目，点击完成 点击视图-&gt;其他窗口-&gt;属性管理器 在你需要进行编译的环境下右键选择添加新项目属性表 例如右键Debug | x64选择添加新项目属性表，名称为Debug_64.props，保存位置默认 在通用属性 -&gt; VC++目录 -&gt; 包含目录中分别添加 123%opencv%\build\include%opencv%\build\include\opencv%opencv%\build\include\opencv2 库目录中添加%opencv%\build\x64\vc15\lib 在通用属性 -&gt; 链接器 -&gt; 输入中添加opencv_world341d.lib Release环境下的属性配置与Debug类似，不同的是在通用属性 -&gt; 链接器 -&gt; 输入中添加的是opencv_world341.lib 以后若是创建新项目，可以直接在属性管理器中相应的编译环境下右键添加现有项目属性表，添加相应的属性表 测试123456789101112131415161718#include &lt;iostream&gt; #include &lt;opencv2/core/core.hpp&gt; #include &lt;opencv2/highgui/highgui.hpp&gt; using namespace cv;int main()&#123; // 读入一张图片（test） Mat img = imread("test.jpg"); // 创建一个名为 "test"窗口 namedWindow("test"); // 在窗口中显示test imshow("test", img); // 任意按键后窗口关闭 waitKey(0); return 0;&#125;]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MATLAB Note]]></title>
    <url>%2Fposts%2F2034843354.html</url>
    <content type="text"><![CDATA[MATLAB NoteAuthor: JosephLau Description 此文用来记录平时使用MatLab遇到的问题与心得. 本文长期更新. 输出无白边图片123imshow(I,'border','tight','initialmagnification','fit');% 'border','tight'的组合功能意思是去掉图像周边空白% 'InitialMagnification','fit'组合的意思是图像填充整个figure窗口 平移、旋转、缩放、镜像 平移123456789101112131415161718192021init = imread('Fig3.tif'); % 读取图像[R, C] = size(init); % 获取图像大小res = zeros(R, C); % 构造结果矩阵。每个像素点默认初始化为0（黑色）delX = 50; % 平移量XdelY = 50; % 平移量Ytras = [1 0 delX; 0 1 delY; 0 0 1]; % 平移的变换矩阵 for i = 1 : R for j = 1 : C temp = [i; j; 1]; temp = tras * temp; % 矩阵乘法 x = temp(1, 1); y = temp(2, 1); % 变换后的位置判断是否越界 if (x &lt;= R) &amp; (y &lt;= C) &amp; (x &gt;= 1) &amp; (y &gt;= 1) res(x, y) = init(i, j); end endend;imshow(uint8(res)); % 显示图像 旋转123456789101112131415161718192021init = imread('Fig3.tif'); % 读取图像[R, C] = size(init); % 获取图像大小res = zeros( R, C); % 构造结果矩阵。每个像素点默认初始化为0（黑色）alfa = -15 * 3.1415926 / 180.0; % 旋转角度tras = [cos(alfa) -sin(alfa) 0; sin(alfa) cos(alfa) 0; 0 0 1]; % 旋转的变换矩阵for i = 1 : R for j = 1 : C temp = [i; j; 1]; temp = tras * temp;% 矩阵乘法 x = uint16(temp(1, 1)); y = uint16(temp(2, 1)); % 变换后的位置判断是否越界 if (x &lt;= R) &amp; (y &lt;= C) &amp; (x &gt;= 1) &amp; (y &gt;= 1) res(i, j) = init(x, y); end endend;imshow(uint8(res)); % 显示图像 缩放123456789101112131415161718192021init = imread('Fig3.tif'); % 读取图像[R, C] = size(init); % 获取图像大小timesX = 3; % X轴缩放量timesY = 3; % Y轴缩放量res = zeros(timesX * R, timesY * C); % 构造结果矩阵。每个像素点默认初始化为0（黑色）tras = [1/timesX 0 0; 0 1/timesY 0; 0 0 1]; % 缩放的变换矩阵 for i = 1 : timesX * R for j = 1 : timesY * C temp = [i; j; 1]; temp = tras * temp; % 矩阵乘法 x = uint8(temp(1, 1)); y = uint8(temp(2, 1)); % 变换后的位置判断是否越界 if (x &lt;= R) &amp; (y &lt;= C) &amp; (x &gt;= 1) &amp; (y &gt;= 1) res(i, j) = init(x, y); end endend;imshow(uint8(res)); % 显示图像 镜像（水平）12345678910111213init = imread('Fig3.tif');[R, C] = size(init);res = zeros(R, C);for i = 1 : R for j = 1 : C x = i; y = C - j + 1; res(x, y) = init(i, j); endendimshow(uint8(res)); Graythresh与im2bw函数 graythresh函数输入一副图像，输出就是阈值。在这个函数中，是使用最大类间方差法找到图片的一个合适的阈值（threshold）。再利用im2bw（将灰度图像转换为二值图像）函数，将找到的阈值输入，就可以把原图变为一个二值图。 12thresh = graythresh(image)img = im2bw(image, thresh)]]></content>
      <categories>
        <category>MatLab</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我脑海中的NLP]]></title>
    <url>%2Fposts%2F3866712056.html</url>
    <content type="text"><![CDATA[中华文化博大精深，汉语更是其中的代表，近年来的NLP更是有了非常多的“用武之地”。例如，语义智能分析，当女朋友问你“爱不爱我”，有的时候是“我要包包”，有的时候是“我要口红”，有的时候就是单纯的想要你的肯定的回答，这个时候NLP就可以起到救命的作用^_^。 “沟通，是人最紧迫又最困难的事。除了生存，人解决孤独、恐惧等所有精神层面的问题，都要靠沟通。”这些年机器翻译、机器写新闻甚至是机器写诗都陆续出现，机器表现出的强大的能力背后是自然语言处理对于机器与人类之间沟通的作用。 想象一下，人类与机器沟通，甚至通过机器与自然界沟通，这是一个多么宏大的愿景啊！以前看过一部电影叫做《Her》，当初看这部电影主要是因为女神斯嘉丽·约翰逊给她配的音，但是看过之后反而被这部电影所描绘的世界给吸引住了。在《Her》的世界里，人类需要做什么直接告诉“Her”就行，孤单的时候“Her”可以是一个真正懂你的“完美情人”，而不仅仅是近年来只能订闹钟、打电话、查天气的Siri、Cortana、Google Assistant、小爱同学之流。 我认为未来的人工智能，必须是能够听懂及能够一定程度上满足人类需求的“工具”，那么这个“听懂”的前提很大一部分上依赖于现在的自然语言处理，也是未来人工智能的入口。]]></content>
      <tags>
        <tag>NLP</tag>
        <tag>Program Thinking</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小说爬虫]]></title>
    <url>%2Fposts%2F247701255.html</url>
    <content type="text"><![CDATA[使用Python爬虫爬取网络小说 小说网址 https://www.uxiaoshuo.com/ 使用绝色妖娆：鬼医至尊为例（主要是女朋友想看^_^） 下面是程序代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#coding:utf-8import requestsimport threadingfrom bs4 import BeautifulSoupimport reimport osimport timeimport sysimport threadingreq_header=&#123;'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8','Accept-Encoding':'gzip, deflate, br','Accept-Language':'zh-CN,zh;q=0.9','Cookie':'UM_distinctid=162afbabff819e-03f2f082776e95-b34356b-1fa400-162afbabff9294; CNZZDATA1259019190=1993576859-1523364262-https%253A%252F%252Fwww.baidu.com%252F%7C1523364262; bookid=124629; chapterid=6510968; chaptername=%25u7B2C1%25u7AE0%2520%25u6797%25u4E2D%25u9634%25u8C0B','Host':'www.uxiaoshuo.com','Proxy-Connection':'keep-alive','Referer':'https://www.uxiaoshuo.com/','Upgrade-Insecure-Requests':'1','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'&#125;req_url_base='http://www.uxiaoshuo.com' #小说主地址def get_txt(txt_id): txt=&#123;&#125; _req_url=[] txt['title']='' txt['id']=str(txt_id) #小说编号 _req_url=txt['id'].split('.') req_url=req_url_base+ txt['id'] #根据小说编号获取小说URL print("小说编号："+req_url) try: res=requests.get(req_url, params=req_header) #获取小说第一章界面 soups=BeautifulSoup(res.text,"html.parser") #soup转化 #获取小说题目 txt['title']=soups.select('#webhtml .box_con .con_top a')[1].text #打开小说文件写入小说相关信息 fo = open('&#123;0&#125;.txt'.format(txt['title']), "ab+") #循环写入章节内容 while 1: if _req_url[-1]!='html': print(txt['title']+"全部下载成功！") break txt['c_title']=soups.select('#webhtml .box_con .zhangjieming h1')[0].text ##章节名称 txt['content']=soups.select('#webhtml .box_con .zhangjieTXT')[0] for i in txt['content'].select("script"): #去除无用内容 i.decompose() for i in txt['content'].select("div"): i.decompose() txt['content']=re.sub( '\s+', '\r\n\t', txt['content'].text).strip('\r\n') #以二进制写入章节题目 fo.write(('\n'+txt['c_title']+'\r\n').encode('UTF-8')) #以二进制写入章节内容 fo.write(('\n'+txt['content']+'\n').encode('UTF-8')) print(txt['c_title']) # print('章节名:'+txt['c_title']) # print("章节内容：\n"+txt['content']) req_url=soups.select('#webhtml .zhangjieming .bottem1 a')[3]['href'] _req_url=req_url.split('.') req_url=req_url_base+req_url res=requests.get(req_url, params=req_header) #获取下一章界面 soups=BeautifulSoup(res.text,"html.parser") #soup转化 except Exception as e: print(e) finally: returnget_txt('/124/124629/7404934.html')get_txt('/135/135169/7373986.html') 要爬取该网站内的小说，只需要将参数改成自己需要的小说就可以了]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Reptile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」657. Judge Route Circle]]></title>
    <url>%2Fposts%2F3224175457.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 657. Judge Route CircleDescription Initially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place.The move sequence is represented by a string. And each move is represent by a character. The valid robot moves are R (Right), L (Left), U (Up) and D (down). The output should be true or false representing whether the robot makes a circle. Examples One 12Input: &quot;UD&quot;Output: true Two 12Input: &quot;LL&quot;Output: false Solutions C++ Solution 1234567891011121314151617class Solution &#123;public: bool judgeCircle(string moves) &#123; int a=0; int b=0; for(char c:moves) &#123; switch(c)&#123; case 'R':a++;break; case 'L':a--;break; case 'U':b++;break; case 'D':b--;break; &#125; &#125; return a==0&amp;&amp;b==0; &#125;&#125;; Wrong Answer Solution 12345678910111213class Solution &#123;public: bool judgeCircle(string moves) &#123; int* alp=new int[26]; for(char c:moves) &#123; alp[c-'A']++; &#125; if((alp['R'-'A']==alp['L'-'A'])&amp;&amp;(alp['U'-'A'] ==alp['D'-'A']))return true; else return false; &#125;&#125;; Test Case 按道理solution应该没错的，可是不知道哪里有点问题，神经病啊！！！！！ 1RULDDLLDLRDUUUURULRURRRRLRULRLULLLRRULULDDRDLRULDRRULLUDDURDLRRUDRUDDURLLLUUDULRUDRLURRDRLLDDLLLDLRLLRUUDUURDRLDUDRUDRLUDULRLUDRLDDUULDDLDURULUDUUDDRRDUURRLRDLDLRLLDRRUUURDLULLURRRRDRRURDUURDLRRUULRURRUULULUUDURUDLRDDDDDURRRLRUDRUULUUUULDURDRULLRRRUDDDUUULUURRDRDDRLLDRLDULDLUUDRDLULLDLDDRUUUUDDRRRDLLLLURUURLRUUULRDDULUULUURDURDDDRRURLURDLLLRLULRDLDDLRDRRRRLUURRRRLDUDLLRUDLDRDLDRUULDRDULRULRRDLDLLLUDLDLULLDURUURRLLULUURLRLRDUDULLDURRUDDLDDLLUDURLLRLDLDUDLURLLDRRURRDUDLDUULDUDRRUDULLUUDURRRURLULDDLRRURULUURURRDULUULDDDUUDRLDDRLULDUDDLLLDLDURDLRLUURDDRLUDRLUDLRRLUUULLDUUDUDURRUULLDDUDLURRDDLURLDRDRUDRLDDLDULDRULUDRRDRLLUURULURRRUDRLLUURULURRLUULRDDDRDDLDRLDRLDUDRLDRLDDLDUDDURUDUDDDLRRDLUUUDUDURLRDRURUDUDDRDRRLUDURULDULDDRLDLUURUULUDRLRLRLLLLRLDRURRRUULRDURDRRDDURULLRDUDRLULRRLLLDRLRLRRDULDDUDUURLRULUUUULURULDLDRDRLDDLRLURRUULRRLDULLUULUDUDRLDUDRDLLDULURLUDDUURULDURRUURLRDRRRLDDULLLLDDRRLRRDRDLRUDUUDLRLDRDRURULDLULRRDLLURDLLDLRDRURLRUDURDRRRULURDRURLDRRRDUDUDUDURUUUUULURDUDDRRDULRDDLULRDRULDRUURRURLUDDDDLDRLDLLLLRLDRLRDRRRLLDRDRUULURLDRULLDRRDUUDLURLLDULDUUDLRRRDDUDRLDULRDLLULRRUURRRURLRRLDDUDDLULRUDULDULRDUDRLRDULRUUDDRUURUDLDRDUDDUULLUDDLLRLURURLRRULLDDDLURDRRDLLLLULLDLUDDLURLLDDRLDLLDDRDRDDUDLDURLUUUUUDLLLRLDULDDRDDDDRUDLULDRRLLLDUUUDDDRDDLLULUULRRULRUDRURDDULURDRRURUULDDDDUULLLURRRRDLDDLRLDDDRLUUDRDDRDDLUDLUUULLDLRDLURRRLRDRLURUURLULLLLRDDLLLLRUDURRLDURULURULDDRULUDRLDRLLURURRRDURURDRRUDLDDLLRRDRDDLRLRLUDUDRRUDLLDUURUURRDUDLRRLRURUDURDLRRULLDLLUDURUDDRUDULLDUDRRDDUDLLLDLRDRUURLLDLDRDDLDLLUDRDDRUUUDDULRUULRDRUDUURRRURUDLURLRDDLUULRDULRDURLLRDDDRRUDDUDUDLLDDRRUUDURDLLUURDLRULULDULRUURUDRULDRDULLULRRDDLDRDLLLDULRRDDLDRDLLRDDRLUUULUURULRULRUDULRULRUURUDUUDLDUDUUURLLURDDDUDUDLRLULDLDUDUULULLRDUDLDRUDRUULRURDDLDDRDULRLRLRRRRLRULDLLLDDRLUDLULLUUDLDRRLUDULRDRLLRRRULRLRLLUDRUUDUDDLRLDRDDDDRDLDRURULULRUURLRDLLDDRLLRUDRRDDRDUDULRUDULURRUDRDLRDUUDDLDRUDLLDDLRLULLLRUUDRRRRUULLRLLULURLDUDDURLRULULDLDRURDRLLURRDLURRURLULDLRLDUDLULLLDRDLULDLRULLLUDUDUDUDLDDDDDRDLUDUULLUDRLUURDRLULD 12output: falseexpect: true]]></content>
      <categories>
        <category>LeetCode</category>
        <category>String</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
        <tag>Circle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」387. First Unique Character in a String]]></title>
    <url>%2Fposts%2F1822856309.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 387. First Unique Character in a StringDescription Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1. Examples12345s = &quot;leetcode&quot;return 0.s = &quot;loveleetcode&quot;,return 2. Note: You may assume the string contain only lowercase letters. Solutions C++ Solution 123456789101112131415class Solution &#123;public: int firstUniqChar(string s) &#123; int* alp=new int[26]; for(char c:s) &#123; alp[c-'a']++; &#125; for(int i=0;i&lt;s.size();i++) &#123; if(alp[s[i]-'a']==1)return i; &#125; return -1; &#125;&#125;; Someting Wrong 明明测试用例是对的，但是提交就是错的，很郁闷，结果在下面发现 Note: is Run Code inconsistent with Submit Solution? If you are using global variables or C/C++, check this out.First, please check if you are using any global or static variables. They are Evil, period. If you must declare one, reset them in the first line of your called method or in the default constructor. Why? Because the judger executes all test cases using the same program instance, global/static variables affect the program state from one test case to another. See this Discuss thread for more details.Are you using C or C++? If the answer is yes, chances are your code has bugs in it which cause one of the earlier test cases to trigger an undefined behavior. See this Discuss thread for an example of undefined behavior. These bugs could be hard to debug, so good luck. Or just give up on C/C++ entirely and code in a more predictable language, like Java. Just kidding.总之很郁闷 Jave Solution 123456789101112131415class Solution &#123; public int firstUniqChar(String s) &#123; int[] alp=new int[26]; char[] arr=s.toCharArray(); for(char c:arr) &#123; alp[c-'a']++; &#125; for(int i=0;i&lt;s.length();i++) &#123; if(alp[arr[i]-'a']==1)return i; &#125; return -1; &#125;&#125; 9 ms Soluton in Java 1234567891011121314151617class Solution &#123; public int firstUniqChar(String s) &#123; int resIndex = s.length(); if(resIndex == 0) return -1; for(char c = 'a';c&lt;='z';c++)&#123; int index = s.indexOf(c); if(index!=-1 &amp;&amp; index == s.lastIndexOf(c))&#123; resIndex = Math.min(resIndex,index); &#125; &#125; return resIndex == s.length() ? -1 : resIndex; &#125;&#125;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>String</category>
        <category>Hash Table</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[双系统删除Ubuntu后出现grub rescure>解决办法]]></title>
    <url>%2Fposts%2F2711132068.html</url>
    <content type="text"><![CDATA[双系统删除Ubuntu后出现grub rescureAuthor: JosephLau Description 在笔记本电脑上安装了两个Linux系统，有一个几乎不用，所以决定把它给删除了,然后就出现了问题. 123GRUB loadingerror:unknow filesystemgrub rescue&gt; 下面几种操作会导致这种问题： 想删除Ubuntu，于是直接在Windows下删除/格式化了Ubuntu所在的分区。 调整磁盘，利用工具合并/分割/调整/删除分区，使磁盘分区数目发生了变化。 重新安装系统，把Linux安装到了新分区，原有分区已经格式化，但是没有重新安装grub2。 用Ubuntu备份工具/衍生版制造工具等，把主分区恢复成了8.X的老版本，结果老版本的grub是grub1,于是把grub2破坏掉了。 总归是由于操作者不知道grub2分为两部分，一部分（一般情况下）写在了mbr上，另一部分写在了某个分区的/boot/grub目录（如果/boot单独分区，则直接写在对应分区的/grub目录）里面。由于上述操作，致使grub2的mbr里面的那一部分找不到/grub目录里面的那一部分了（或者另一部分已经删除了）。 解决办法彻底删除grub2 已经使用此方法成功解决 适用于已经不想再使用Ubuntu，要转回Windows的人。只要有Windows启动盘（非Ghost），用它启动，至选择安装位置，不用真正安装，退出重启就可以。或者用它启动到故障修复台，运行fixboot或者fixmbr都可以。win7命令行下，则是执行： 1BootRec.exe /fixmbr /fixmbr修复mbr，/FixBoot修复启动扇区，/ScanOs检测已安装的win7，/RebuildBcd重建bcd。 重新安装、修复grub2先使用ls命令，找到Ubuntu安装在哪个分区在grub rescue&gt;下输入以下命令： 1ls 会罗列所有的磁盘分区信息，比如： 1(hd0,1),(hd0,5),(hd0,3),(hd0,2) 依次调用如下命令： X表示各个分区号码如果/boot没有单独分区，用以下命令： 1ls (hd0,X)/boot/grub 如果/boot单独分区，则用下列命令： 1ls （hd0,X)/grub 正常情况下，会列出来几百个文件，很多文件的扩展名是.mod、.lst和.img，还有一个文件是grub.cfg。假设找到（hd0,5）时，显示了文件夹中的文件，则表示Linux安装在这个分区。 如果找到了正确的grub目录，则设法临时性将grub的两部分关联起来以下是/boot没有单独分区的命令： 123grub rescue&gt;set root=(hd0,5)grub rescue&gt;set prefix=(hd0,5)/boot/grubgrub rescue&gt;insmod /boot/grub/normal.mod 以下是/boot单独分区的命令： 123grub rescue&gt;set root=(hd0,5)grub rescue&gt;set prefix=(hd0,5)/grubgrub rescue&gt;insmod /grub/normal.mod 为了显示出丢失的grub菜单，需要调用如下命令： 1grub rescue&gt;normal 如果重启后问题依旧存在，则需要进入Linux中对grub进行修复。启动起来，进入Ubuntu之后，在终端执行： 12$ sudo update-grub$ sudo grub-install /dev/sda sda是硬盘号码，千万不要指定分区号码，例如sda1，sda5等都不对。 如果找不到正确的/grub目录，则尝试寻找是否有linux核心文件，则依次在grub rescue&gt;下调用如下命令： X表示各个分区号码如果/boot没有单独分区： 1ls (hd0,X)/boot 如果/boot单独分区： 1ls （hd0,X) 找名字类似vmlinuz-3.0.0-12-generic这样的文件，这是Linux核心文件，如果找到，记下(hd0,X)中的X值。假设找到（hd0,5）时，显示了文件夹中的文件。 然后用live cd或者live usb启动，在live cd的Ubuntu终端中依次输入以下命令（sda5中的5必须改成上面记录下来数值）： 如果/boot没有单独分区： 12sudo mount /dev/sda5 /mntsudo grub-install --boot-directory=/mnt/boot /dev/sda 如果/boot单独分区： 12sudo mount /dev/sda5 /mntsudo grub-install --boot-directory=/mnt /dev/sda 然后重新启动即可。 以上这两句命令也可以解决“安装Ubuntu时grub安装位置不对，没有将grub安装到/dev/sda，造成启动时不出现Ubuntu启动项直接进入Windows”的问题，不过需要自行确定sda5中的5改成什么数字。 如果连Linux核心文件都没有，那么就得彻底重新安装找到了grub分区的目录，却找不到normal.mod这个文件，所以最后直接借助U盘里的Linux系统来完成修复了。面对这种状况的时候，最坏的打算就是重新安装系统了，可惜的就是那些辛辛苦苦收集的资料了。不过谁让自己瞎折腾的呢？这一切代价都需要自己去承担。不过索性有强大的网络，让我找到了解决的措施，在此感谢那些无私奉献的Linux爱好者辛勤的付出，是他们的存在才让生活更美好！ 参考文章Grub Rescue修复方法grub rescue修复方法Ubuntu启动问题以及Grub Rescue修复方法Grub Rescue来修复Grub 问题grub rescue模式下启动并修复Ubuntu Grub Rescue几种修复方法grub rescue修复grub rescue 模式下引导修复]]></content>
      <categories>
        <category>BUGs</category>
        <category>Linux</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」386. Lexicographical Numbers]]></title>
    <url>%2Fposts%2F784341676.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 386. Lexicographical NumbersDescription Given an integer n, return 1-n in lexicographical order. For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9]. Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000. Solution123456789101112131415161718192021222324class Solution &#123;public: vector&lt;int&gt; lexicalOrder(int n) &#123; vector&lt;int&gt; res; int cur=1; for(int i=1;i&lt;=n;i++) &#123; res.push_back(cur); if(cur*10&lt;=n) //首先判断能否直接再后面加0 cur*=10; else if(cur%10!=9&amp;&amp;(cur+1)&lt;=n) //正常情况下+1 cur++; else &#123; while((cur/10)%10==9) //处理*9_的情况，例如192(n=192)的下一个应该是(1__开头结束)2开头，而不是20 &#123; cur/=10; &#125; cur=(cur/10)+1; //这一轮个位结束，从上一位+1继续开始 &#125; &#125; return res; &#125;&#125;; Hints 字典排序(数字) 首先判断能否直接再后面加0即乘10 正常情况下直接+1 还有这一轮个位结束，回到上一位+1重新开始 处理* 9 *的特殊情况，这种情况下需要从上一个不是9的位置开始也就是循环除以10]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Sort</tag>
        <tag>Lexicographical</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」807. Max Increase to Keep City Skyline]]></title>
    <url>%2Fposts%2F3710545512.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 807. Max Increase to Keep City SkylineDescription In a 2 dimensional array grid, each value grid[i][j] represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well. At the end, the “skyline” when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city’s skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.What is the maximum total sum that the height of the buildings can be increased? Example12Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]Output: 35 Explanation123456789101112131415The grid is:[[3, 0, 8, 4], [2, 4, 5, 7], [9, 2, 6, 3], [0, 3, 1, 0]]The skyline viewed from top or bottom is: [9, 4, 8, 7]The skyline viewed from left or right is: [8, 7, 9, 3]The grid after increasing the height of buildings without affecting skylines is:gridNew = [ [8, 4, 8, 7], [7, 4, 7, 7], [9, 4, 8, 7], [3, 3, 3, 3] ] Note 1 &lt; grid.length = grid[0].length &lt;= 50. All heights grid[i][j] are in the range [0, 100]. All buildings in grid[i][j] occupy the entire grid cell: that is, they are a 1 x 1 x grid[i][j] rectangular prism. Solution12345678910111213141516171819202122232425262728293031class Solution &#123;public: int maxIncreaseKeepingSkyline(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123; int n = grid.size(); vector&lt;int&gt; col, row; //The Skyline Matrix int max; //初始化col、row数组 for (int i = 0; i &lt; n; i++) &#123; max=0; for (int j = 0; j &lt; n; j++) if(max&lt;grid[i][j])max=grid[i][j]; row.push_back(max); &#125; for (int i = 0; i &lt; n; i++) &#123; max=0; for (int j = 0; j &lt; n; j++) if(max&lt;grid[j][i])max=grid[j][i]; col.push_back(max); &#125; int res = 0; int tmp; for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; n; j++) &#123; tmp=row[i]&lt;col[j]?row[i]:col[j]; //girdNew res += tmp - grid[i][j]; //累加增加的值 &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」804. Unique Morse Code Words]]></title>
    <url>%2Fposts%2F2627122790.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 804. Unique Morse Code WordsDescription International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: &quot;a&quot; maps to &quot;.-&quot;, &quot;b&quot; maps to &quot;-...&quot;, &quot;c&quot; maps to &quot;-.-.&quot;, and so on. For convenience, the full table for the 26 letters of the English alphabet is given below: 1[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;] Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, “cab” can be written as “-.-.-….-“, (which is the concatenation “-.-.” + “-…” + “.-“). We’ll call such a concatenation, the transformation of a word. Return the number of different transformations among all words we have. Example12345678910Input: words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]Output: 2Explanation: The transformation of each word is:&quot;gin&quot; -&gt; &quot;--...-.&quot;&quot;zen&quot; -&gt; &quot;--...-.&quot;&quot;gig&quot; -&gt; &quot;--...--.&quot;&quot;msg&quot; -&gt; &quot;--...--.&quot;There are 2 different transformations, &quot;--...-.&quot; and &quot;--...--.&quot;. Note The length of words will be at most 100. Each words[i] will have length in range [1, 12]. words[i] will only consist of lowercase letters. Solution1234567891011121314151617class Solution &#123;public: int uniqueMorseRepresentations(vector&lt;string&gt;&amp; words) &#123; vector&lt;string&gt; letters=&#123;".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."&#125;; set&lt;string&gt; res; for(string word:words) &#123; string code; for(auto w:word) &#123; code+=letters[w-'a']; &#125; res.insert(code); &#125; return res.size(); &#125;&#125;; Hints 利用Set的特性：元素无重复，直接返回set的size()就可以得到the number of different transformations among all words 根据ASCⅡ码的特点，words中的word包含的每个字母可以直接替换为Morse Code，再将字符串连接起来就可以得到每个word对应的Morse Code]]></content>
      <categories>
        <category>LeetCode</category>
        <category>String</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
        <tag>Morse-Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」191. Number of 1 Bits]]></title>
    <url>%2Fposts%2F188551222.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 191. Number of 1 BitsDescription Write a function that takes an unsigned integer and returns the number of 1 bits it has (also known as the Hamming weight). For example, the 32-bit integer 11 has binary representation 00000000000000000000000000001011, so the function should return 3. Solutions Hamming Weight 123456789101112class Solution &#123;public: int hammingWeight(uint32_t n) &#123; int c=0; while(n) &#123; c++; n&amp;=n-1; //逐次获取最低非0 bit位 &#125; return c; &#125;&#125;; Bit Mask 1234567891011121314class Solution(object): def hammingWeight(self, n): """ :type n: int :rtype: int """ res=0 mask=1 for i in range(32): if n&amp;mask: # &amp;：按位与 res+=1 mask=mask&lt;&lt;1 # n=n&gt;&gt;1 #n移位或者mask移位 return res]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Bit Manipulation</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Hamming-Distance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Note]]></title>
    <url>%2Fposts%2F2993135007.html</url>
    <content type="text"><![CDATA[Hexo NoteAuthor: JosephLau 小技巧Hexo博客实现页内跳转 如何在Hexo中写MarkDown文档，不使用绝对地址进行跳转到本博客中另外一个页面 传送门在此，代码如下： 12# 出现了莫名的BUG&#123;% post_link Settings-of-iTerm2-on-Mac 详细设置请看这篇文章 %&#125; 上面的方法失效了，本博客目前使用的是permalink链接到唯一的文章，改了文章名也没有关系 具体设置方法请看这里 Next 主题中渲染 LaTeX数学公式原因Hexo 默认使用 hexo-renderer-marked 引擎渲染网页，该引擎会把一些特殊的 markdown 符号转换为相应的 html 标签，比如在 markdown 语法中，下划线_代表斜体，会被渲染引擎处理为&lt;em&gt;标签。 因为类 Latex 格式书写的数学公式下划线_表示下标，有特殊的含义，如果被强制转换为&lt;em&gt;标签，那么 MathJax 引擎在渲染数学公式的时候就会出错。 类似的语义冲突的符号还包括*, {, }, \\等。 解决方法更换 Hexo 的 markdown 渲染引擎，hexo-renderer-kramed 引擎是在默认的渲染引擎 hexo-renderer-marked 的基础上修改了一些 bug ，两者比较接近，也比较轻量级。 12$ npm uninstall hexo-renderer-marked --save$ npm install hexo-renderer-kramed --save 执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。然后，跟换引擎后行间公式可以正确渲染了，但是这样还没有完全解决问题，行内公式的渲染还是有问题，因为 hexo-renderer-kramed 引擎也有语义冲突的问题。接下来到博客根目录下，找到node_modules\kramed\lib\rules\inline.js，把第11行的 escape 变量的值做相应的修改： 12//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,escape: /^\\([`*\[\]()#$+\-.!_&gt;])/, 这一步是在原基础上取消了对\,{,}的转义(escape)。同时把第20行的em变量也要做相应的修改。 12//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, 重新启动hexo（先clean再generate）,问题完美解决。哦，如果不幸还没解决的话，看看是不是还需要在使用的主题中配置mathjax开关。 在 Next 主题中开启 MathJax 开关如何使用了主题了，别忘了在主题（Theme）中开启 MathJax 开关，下面以 next 主题为例，介绍下如何打开 MathJax 开关。 进入到主题目录，找到 _config.yml 配置问题，把 math 默认的 false 修改为true 12345678910111213math: # enable: false enable: true # Default(true) will load mathjax/katex script on demand # That is it only render those page who has `mathjax: true` in Front Matter. # If you set it to false, it will load mathjax/katex srcipt EVERY PAGE. per_page: true engine: mathjax #engine: katex # hexo-rendering-pandoc (or hexo-renderer-kramed) needed to full MathJax support. mathjax: # Use 2.7.1 as default, jsdelivr as default CDN, works everywhere even in China cdn: //cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML 还需要在post的Front-matter里打开mathjax开关 1234567891011121314---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;updated: &#123;&#123; date &#125;&#125;copyright: truecomments: truemathjax: falsetags: - categories: - Uncategoriedimage: sticky: --- 需要渲染LaTeX公式的再选择开启。 Markdown写作注意事项 引用 1234&lt;blockquote&gt;引用内容&lt;/blockquote&gt;/* 如果上下间距很小，可以像下面这样写 */&lt;p&gt;&lt;blockquote&gt;引用内容&lt;/blockquote&gt;&lt;/p&gt; 居中和右对齐 12345/* 居中 */&lt;center&gt;内容&lt;/center&gt;/* 右对齐 */&lt;p style="text-align:right"&gt;内容&lt;/p&gt; 字体大小和颜色 12&lt;font color="#xxxxxx" size="number"&gt;内容&lt;/font&gt;/* 详细请查看 http://www.w3school.com.cn/tags/tag_font.asp */ Todo list 1234&lt;ul&gt;&lt;li&gt;&lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成&lt;/li&gt;&lt;li&gt;&lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成&lt;/li&gt;&lt;/ul&gt; 主题自带样式 note 标签在主题配置文件_config.yml里有一个关于这个的配置，但官方文档没有提供 HTML 的使用方式，个人认为这种方式更简单，也不会产生一些奇怪的显示 bugs…… default 1&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;default&lt;/p&gt;&lt;/div&gt; primary 1&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;primary&lt;/p&gt;&lt;/div&gt; success 1&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;success&lt;/p&gt;&lt;/div&gt; info 1&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;info&lt;/p&gt;&lt;/div&gt; warning 1&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;warning&lt;/p&gt;&lt;/div&gt; danger note danger, note danger, note dangernote danger, note danger, note dangernote danger, note danger, note danger 1234567&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt;// 或者这样&#123;% note danger %&#125;note danger, note danger, note dangernote danger, note danger, note dangernote danger, note danger, note danger&#123;% endnote %&#125; danger no-icon 1&lt;div class=&quot;note danger no-icon&quot;&gt;&lt;p&gt;danger no-icon&lt;/p&gt;&lt;/div&gt; 首先可以在主题配置文件中需要配置下，贴上我的： 123456789文件位置：~/blog/themes/next/_config.yml# Note tag (bs-callout).note: # 风格 style: flat # 要不要图标 icons: true # 圆角矩形 border_radius: 3 light_bg_offset: 里面的三种风格长啥样？开启图标长啥样？可以查看这个页面，更多的介绍也在这个页面。 主题自带样式 label 标签首先可以在主题配置文件中有配置，需要配置下，贴上我的： 12文件位置：~/blog/themes/next/_config.yml# Label tag.label: true 然后效果如下（@ 前面的是label的名字，后面的是要显示的文字）： default 1&#123;% label default@default %&#125; primary 1&#123;% label primary@primary %&#125; success 1&#123;% label success@success %&#125; info 1&#123;% label info@info %&#125; warning 1&#123;% label warning@warning %&#125; danger 1&#123;% label danger@danger %&#125; 目前博主发现个 bug，如果把它加在一段文字的段首，则会有点问题，见issue 。 BUGs Hexo解析问题 例如：文章中代码块外出现}}时，Hexo 解析就会出现问题 解决办法： One 123&#123;% raw %&#125; 含有双大括号的内容&#123;% endraw %&#125; The Other 避免这种问题]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」461. Hamming Distance]]></title>
    <url>%2Fposts%2F1065998898.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 461. Hamming DistanceDescription The Hamming distance between two integers is the number of positions at which the corresponding bits are different.Given two integers x and y, calculate the Hamming distance. Example12345678910Input: x = 1, y = 4Output: 2Explanation:1 (0 0 0 1)4 (0 1 0 0) ↑ ↑The above arrows point to positions where the corresponding bits are different. Note 0 ≤ x , y &lt; 2^31 Solution12345678910111213class Solution &#123;public: int hammingDistance(int x, int y) &#123; int dist=0; int tmp=x^y; while(tmp) &#123; dist++; tmp&amp;=tmp-1; &#125; return dist; &#125;&#125;; Hints 汉明距离是使用在数据传输差错控制编码里面的，汉明距离是一个概念，它表示两个（相同长度）字对应位不同的数量，我们以d（x,y）表示两个字x,y之间的汉明距离。对两个字符串进行异或运算，并统计结果为1的个数，那么这个数就是汉明距离。 1利用按位异或运算符^将不同bit位置为1，再逐次消除最低位非0 bit位得到Hamming Distance.]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Bit Manipulation</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Hamming-Distance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」654. Maximum Binary Tree]]></title>
    <url>%2Fposts%2F2948637492.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 654. Maximum Binary TreeDescription Given an integer array with no duplicates. A maximum tree building on this array is defined as follow: The root is the maximum number in the array. The left subtree is the maximum tree constructed from left part subarray divided by the maximum number. The right subtree is the maximum tree constructed from right part subarray divided by the maximum number. Construct the maximum tree by the given array and output the root node of this tree. Example12345678910Input: [3,2,1,6,0,5]Output: return the tree root node representing the following tree: 6 / \ 3 5 \ / 2 0 \ 1 Note The size of the given array will be in the range [1,1000]. SolutionsC++ from Discuss : C++ O(N) solution123456789101112131415161718192021222324252627282930/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* constructMaximumBinaryTree(vector&lt;int&gt;&amp; nums) &#123; vector&lt;TreeNode*&gt; mbt; //堆栈存储数组 for(int i=0;i&lt;nums.size();i++) //从左到右扫描数组 &#123; TreeNode* cur=new TreeNode(nums[i]); //当前数初始化树节点 while(!mbt.empty()&amp;&amp;mbt.back()-&gt;val&lt;nums[i]) &#123; /*当堆栈不空且新数比堆栈中最后的数字小时， 当前节点作为父节点，先前的作为左子树 */ cur-&gt;left=mbt.back(); mbt.pop_back(); &#125; if(!mbt.empty()) //正常情况新节点直接作为右子树 mbt.back()-&gt;right=cur; mbt.push_back(cur); &#125; return mbt.front(); //返回头节点 &#125;&#125;; Hints 从左向右直接扫描数组 遇到比上一节点的val值小的直接作为右子树的头节点 所以比较适合使用堆栈来存储数组 当遇到比堆栈back()大的，作为其父节点 过几天再重新写试试看能不能写出来 就这样 Python 递归123456789101112class Solution: def constructMaximumBinaryTree(self, nums): """ :type nums: List[int] :rtype: TreeNode """ if nums: pos=nums.index(max(nums)) root=TreeNode(nums[pos]) root.left=self.constructMaximumBinaryTree(nums[:pos]) root.right=self.constructMaximumBinaryTree(nums[pos+1:]) return root Hints 先找到最大的数赋值给root节点 接着递归将左边数组返回左子树的头节点 相同地对右子树进行操作]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Tree</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Blog with Hexo]]></title>
    <url>%2Fposts%2F3307335557.html</url>
    <content type="text"><![CDATA[Hexo建站备忘录使用Hexo与Github Pages服务一同搭建个人博客 添加功能 添加permanant link 添加置顶 在node_modules/hexo-generate-index-pin-top/lib/generate.js中替换top为sticky： 12345678910111213141516171819202122232425262728'use strict';var pagination = require('hexo-pagination');module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.sticky &amp;&amp; b.sticky) &#123; // 两篇文章sticky都有定义 if(a.sticky == b.sticky) return b.date - a.date; // 若sticky值一样则按照文章日期降序排 else return b.sticky - a.sticky; // 否则按照sticky值降序排 &#125; else if(a.sticky &amp;&amp; !b.sticky) &#123; // 以下是只有一篇文章sticky有定义，那么将有sticky的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.sticky &amp;&amp; b.sticky) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;; 字数统计 …… 安装依赖就可以完成（不敢保证） 123456789101112131415161718192021222324252627&#123; "name": "hexo-site", "version": "0.0.0", "private": true, "hexo": &#123; "version": "3.8.0" &#125;, "dependencies": &#123; "hexo": "^3.8.0", "hexo-abbrlink": "^2.0.5", "hexo-deployer-git": "^0.3.1", "hexo-generator-archive": "^0.1.4", "hexo-generator-category": "^0.1.3", "hexo-generator-feed": "^1.2.2", "hexo-generator-index-pin-top": "^0.2.2", "hexo-generator-search": "^2.2.5", "hexo-generator-searchdb": "^1.0.8", "hexo-generator-tag": "^0.2.0", "hexo-renderer-ejs": "^0.3.0", "hexo-renderer-kramed": "^0.1.4", "hexo-renderer-stylus": "^0.3.1", "hexo-server": "^0.2.0", "hexo-symbols-count-time": "^0.4.4", "hexo-wordcount": "^3.0.2", "tree": "^0.1.3" &#125;&#125; 配置Hexo环境搭建要使用Hexo， 需要系统支持Node.js以及Git，根据不同系统进行安装。 Node.js Git Hexo安装Hexo123456$ npm install hexo-cli -g # 安装hexo$ hexo init blog$ cd blog$ sudo npm install # 安装依赖组件$ hexo g # hexo generate$ hexo s # hexo server 本地查看 其他命令 12$ hexo new post "post-name" # 默认为post$ hexo new page "page-name" # 新建页面 简写 1234$ hexo g == hexo generate$ hexo s == hexo server$ hexo n == hexo new$ hexo d == hexo deploy 本地环境查看 1$ hexo -v 我的本地环境 1234567891011121314151617hexo: 3.6.0hexo-cli: 1.1.0os: Windows_NT 10.0.16299 win32 x64http_parser: 2.7.0node: 9.8.0v8: 6.2.414.46-node.21uv: 1.19.2zlib: 1.2.11ares: 1.13.0modules: 59nghttp2: 1.29.0napi: 2openssl: 1.0.2nicu: 60.2unicode: 10.0cldr: 32.0.1tz: 2017c Hexo 主题 安装主题 123$ hexo clean$ git clone https://github.com/theme-next/hexo-theme-next.git themes/next# 这种方案下，会出现仓库上传到Git后，本文件夹会变成@，不会显示具体内容的情况 更新主题 12$ cd themes/next$ git pull 启用主题 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next Github PagesGitHub Pages 主要用于管理自己的网站，不过，由于空间免费稳定，比较适合用来做搭建一个个人博客。 创建自己的Github账号 创建repository创建一个公共仓库用来存放网站静态内容，不过仓库名字必须是username/username.github.io，这是Github特殊的命名约定，你可以通过 https://username.github.io 来访问自己的博客。 使用Hexo deploy部署 部署到Github12345# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: git@github.com:username/username.github.io.git,master 注意空格 安装扩展 1$ npm install hexo-deployer-git --save 执行 1$ hexo d # hexo deploy Github Repository 1$ git clone https://github.com/username/username.github.io.git .deploy/username.github.io 将之前创建的空repo clone到本地，每次hexo d生成的public文件夹下内容复制到刚刚的文件夹下，再push到master brunch下，就可以更新github端的内容，为此我们创建一个sh脚本文件12345678910hexo cleanhexo generatecp -R public/* .deploy/JacksonLeoncd .deploy/JacksonLeongit fetch origingit add .DATE="$(echo $(date --rfc-2822))"git commit -m "Auto builder by JacksonLeon CI: $DATE"git merge origin/mastergit push origin master 每次添加完文章后直接运行脚本就可以了12$ cd */hexo/blog$ ./deploy.sh Coding pages由于国内访问Github速度比较慢，所以我们还可以使用 coding.net 的pages服务，大部分与Github pages设置相同，要注意的是，仓库名必须为用户名，不然会出现css解析错误以及404的现象。 改用Gitee，不过有个缺点，Gitee需要手动部署最新提交，自动部署属于VIP功能……还是以Github为主吧 _config.yml 1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: git@github.com:username/username.github.io.git,master coding: git@git.coding.net:username/username.git,master .deploy.sh 12345678910111213141516171819hexo cleanhexo generatecp -R public/* .deploy/JacksonLeoncd .deploy/JacksonLeongit fetch origingit add .DATE="$(echo $(date --rfc-2822))"git commit -m "Auto builder by JacksonLeon CI: $DATE"git merge origin/mastergit push origin mastercd ..cd ..cp -R public/* .deploy/JacksonLeon.github.iocd .deploy/JacksonLeon.github.iogit fetch origingit add .git commit -m "Auto builder by JacksonLeon CI: $DATE"git merge origin/mastergit push origin master 欢迎大家访问 Blog on Github Pages Blog on Coding Pages]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Leetcode」771. Jewels and Stones]]></title>
    <url>%2Fposts%2F4173599199.html</url>
    <content type="text"><![CDATA[LeetCode NoteSorted by Acceptance Author: JosephLau 771. Jewels and StonesDesciption You’re given strings J representing the types of stones that are jewels, and S representing the stones you have. Each character in S is a type of stone you have. You want to know how many of the stones you have are also jewels. The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so “a” is considered a different type of stone from “A”. Example Example 1 12Input: J = "aA", S = "aAAbbbb"Output: 3 Example 2 12Input: J = "z", S = "ZZ"Output: 0 Note S and J wil consist of letters and have length at most 500 The charactors in J are distinct Solutionsfirst try1234567891011121314int numJewelsInStones(string J, string S) &#123; int c=0; for(int i=0;i&lt;J.size();i++) &#123; for(int j=0;j&lt;S.size();j++) &#123; if(J[i]==S[j]) &#123; c++; &#125; &#125; &#125; return c; &#125; Solutions in Discuss123456int numJewelsInStones(string J, string S) &#123; int c=0; set&lt;char&gt; setj(J.begin(),J.end()); for(char s:S)if(setj.count(s))c++; return c; &#125; Java Solution 123456789class Solution &#123; public int numJewelsInStones(String J, String S) &#123; int c=0; for(int i=0;i&lt;S.length();i++) if(J.indexOf(S.charAt(i))&gt;-1) c++; return c; &#125;&#125;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Hash Table</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown 语法]]></title>
    <url>%2Fposts%2F4269544267.html</url>
    <content type="text"><![CDATA[NOTE: This is Simplelified Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to Markdown: Syntax. 声明： 这份文档派生(fork)于繁体中文版，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里查看它的源文件。「繁体中文版的原始文件可以查看这里 。」—By @riku / 本项目托管于 GitCafe 注： 本项目同时也托管于 Github 上，请通过 fork＋pull request 方式来帮忙改进本项目。 Markdown 语法说明 (简体中文版) 概述宗旨Markdown 的目标是实现「易读易写」。 可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。 总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像 强调 。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。 兼容 HTMLMarkdown 语法的目标是：成为一种适用于网络的_书写_语言。 Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想_不是_要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种_发布_的格式，Markdown 是一种_书写_的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。 要制约的只有一些 HTML 区块元素――比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;p&gt; 标签。 例子如下，在 Markdown 文件里加上一段 HTML 表格： 123456789这是一个普通段落。&lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。 请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。 HTML 的区段（行内）标签如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 &lt;a&gt; 或 &lt;img&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。 和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。 特殊字符自动转换在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &amp;lt; 和 &amp;amp;。 &amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到： 1http://images.google.com/images?num=30&amp;q=larry+bird 你必须要把网址转换写为： 1http://images.google.com/images?num=30&amp;amp;q=larry+bird 才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。 Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;amp;。 所以你如果要在文档中插入一个版权符号 ©，你可以这样写： 1&amp;copy; Markdown 会保留它不动。而若你写： 1AT&amp;T Markdown 就会将它转为： 1AT&amp;amp;T 类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写： 14 &lt; 5 Markdown 将会把它转换为： 14 &amp;lt; 5 不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都_一定_会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。） 区块元素段落和换行一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。 「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 &lt;br /&gt; 标签。 如果你_确实_想要依赖 Markdown 来插入 &lt;br /&gt; 标签的话，在插入处先按入两个以上的空格然后回车。 的确，需要多费点事（多加空格）来产生 &lt;br /&gt; ，但是简单地「每个换行都转换为 &lt;br /&gt;」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。 标题Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： 12345This is an H1=============This is an H2------------- 任何数量的 = 和 - 都可以有效果。 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： 12345# 这是 H1## 这是 H2###### 这是 H6 你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）： 12345# 这是 H1 ### 这是 H2 ##### 这是 H3 ###### 区块引用 BlockquotesMarkdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ： 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ： 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： 12345&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 12345678&gt; ## 这是一个标题。&gt; &gt; 1\. 这是第一行列表项。&gt; 2\. 这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择_增加引用阶层_。 列表Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记： 123* Red* Green* Blue 等同于： 123+ Red+ Green+ Blue 也等同于： 123- Red- Green- Blue 有序列表则使用数字接着一个英文句点： 1231\. Bird2\. McHale3\. Parish 很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为： 12345&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt; 如果你的列表标记写成： 1231\. Bird1\. McHale1\. Parish 或甚至是： 1233\. Bird1\. McHale8\. Parish 你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。 如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮，你可以把内容用固定的缩进整理好： 12345* Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.* Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 但是如果你懒，那也行： 12345* Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.* Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing. 如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 &lt;p&gt; 标签包起来，举例来说： 12* Bird* Magic 会被转换为： 1234&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt; 但是这个： 123* Bird* Magic 会被转换为： 1234&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt; 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符： 1234567891\. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.2\. Suspendisse id sem consectetuer libero luctus adipiscing. 如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许： 1234567* This is a list item with two paragraphs. This is the second paragraph in the list item. You&apos;reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.* Another item in the same list. 如果要在列表项目内放进引用，那 &gt; 就需要缩进： 1234* A list item with a blockquote: &gt; This is a blockquote &gt; inside a list item. 如果要放代码区块的话，该区块就需要缩进_两次_，也就是 8 个空格或是 2 个制表符： 123* 一列表项包含一个列表区块： &lt;代码写在这&gt; 当然，项目列表很可能会不小心产生，像是下面这样的写法： 11986\. What a great season. 换句话说，也就是在行首出现_数字-句点-空白_，要避免这样的状况，你可以在句点前面加上反斜杠。 11986\. What a great season. 代码区块和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 &lt;pre&gt; 和 &lt;code&gt; 标签来把代码区块包起来。 要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入： 123这是一个普通段落： 这是一个代码区块。 Markdown 会转换成： 1234&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt; 这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如： 12345Here is an example of AppleScript: tell application &quot;Foo&quot; beep end tell 会被转换为： 123456&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot; beepend tell&lt;/code&gt;&lt;/pre&gt; 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如： 123&lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation&lt;/div&gt; 会被转换为： 1234&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt; &amp;amp;copy; 2004 Foo Corporation&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt; 代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 123456789* * *********- - ---------------------------------------- 区段元素链接Markdown 支持两种形式的链接语法： _行内式_和_参考式_两种形式。 不管是哪一种，链接文字都是用 [方括号] 来标记。 要建立一个_行内式_的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如： 123This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute. 会产生： 12345&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt; 如果你是要链接到同样主机的资源，你可以使用相对路径： 1See my [About](/about/) page for details. _参考式_的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： 1This is [an example][id] reference-style link. 你也可以选择性地在两个方括号中间加上一个空格： 1This is [an example] [id] reference-style link. 接着，在文件的任意处，你可以把这个标记的链接内容定义出来： 1[id]: http://example.com/ &quot;Optional Title Here&quot; 链接内容定义的形式为： 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符 接着链接的网址 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着 下面这三种链接的定义都是相同： 123[foo]: http://example.com/ &quot;Optional Title Here&quot;[foo]: http://example.com/ &apos;Optional Title Here&apos;[foo]: http://example.com/ (Optional Title Here) 请注意： 有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。 链接网址也可以用方括号包起来： 1[id]: &lt;http://example.com/&gt; &quot;Optional Title Here&quot; 你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看： 12[id]: http://example.com/longish/path/to/resource/here &quot;Optional Title Here&quot; 网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。 链接辨别标签可以有字母、数字、空白和标点符号，但是并_不_区分大小写，因此下面两个链接是一样的： 12[link text][a][link text][A] _隐式链接标记_功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成： 1[Google][] 然后定义链接内容： 1[Google]: http://google.com/ 由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词： 1Visit [Daring Fireball][] for more information. 然后接着定义链接： 1[Daring Fireball]: http://daringfireball.net/ 链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。 下面是一个参考式链接的范例： 123456I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot; 如果改成用链接名称的方式写： 123456I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][]. [google]: http://google.com/ &quot;Google&quot; [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [msn]: http://search.msn.com/ &quot;MSN Search&quot; 上面两种写法都会产生下面的 HTML。 1234&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt; 下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用： 123I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;). 参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。 使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。 强调Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em&gt; 标签包围，用两个 * 或 _ 包起来的话，则会被转成 &lt;strong&gt;，例如： 1234567*single asterisks*_single underscores_**double asterisks**__double underscores__ 会转成： 1234567&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt; 你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。 强调也可以直接插在文字中间： 1un*frigging*believable 但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线： 1\*this text is surrounded by literal asterisks\* 代码如果要标记一小段行内代码，你可以用反引号把它包起来（12 Use the printf() function. 12会产生： Use the printf() function. 12如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： There is a literal backtick (`) here. 12这段语法会产生： There is a literal backtick (`) here. 12代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号： A single backtick in a code span: ` A backtick-delimited string in a code span: `foo` 12会产生： A single backtick in a code span: ` A backtick-delimited string in a code span: `foo` 12在代码区段内，`&amp;` 和方括号**都**会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段： Please don’t use any &lt;blink&gt; tags. 12转为： Please don't use any &lt;blink&gt; tags. 12你也可以这样写： &amp;#8212; is the decimal-encoded equivalent of &amp;mdash;. 12以产生： &amp;#8212; is the decimal-encoded equivalent of &amp;mdash;. 12345678### 图片很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： _行内式_和_参考式_。行内式的图片语法看起来像是： 12345678详细叙述如下：* 一个惊叹号 `!`* 接着一个方括号，里面放上图片的替代文字* 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 &apos;title&apos; 文字。参考式的图片语法则长得像这样： 12「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： 12345678910到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `&lt;img&gt;` 标签。* * *## 其它### 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： http://example.com/12Markdown 会转为： http://example.com/12邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如： &#x61;&#x64;&#x64;&#x72;&#101;&#115;&#115;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#111;&#x6d;12Markdown 会转成： &#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;12345678在浏览器里面，这段字串（其实是 `&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;`）会变成一个可以点击的「address@example.com」链接。（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）### 反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `&lt;em&gt;` 标签），你可以在星号的前面加上反斜杠： *literal asterisks*12Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \ 反斜线` 反引号 星号_ 底线{} 花括号[] 方括号() 括弧井字号 加号 减号. 英文句点! 惊叹号``` 感谢感谢 leafy7382 协助翻译，hlb、Randylien 帮忙润稿，ethantw 的汉字标准格式・CSS Reset， WM 回报文字错误。 感谢 fenprace，addv。]]></content>
      <tags>
        <tag>Reproduce</tag>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim Note]]></title>
    <url>%2Fposts%2F3542455720.html</url>
    <content type="text"><![CDATA[Vim NoteAuthor: JosephLau Description 此文用来记录平时使用Vim遇到的问题与心得. 本文长期更新. Vim使用技巧批量删除内容 全部删除 123## 进入文章末尾G ##注意大写:1,:d ## 删除全部内容 删除部分内容 123## 定位到要删除的文档末尾200G:9,:d ##删除9-200之间的内容 复制粘贴1234# 复制当前行yy# 在当前行粘贴p 查找替换在normal模式下按下/即可进入查找模式，输入要查找的字符串并按下回车。 Vim会跳转到第一个匹配。按下n查找下一个，按下N查找上一个。 Vim查找支持正则表达式，例如/vim$匹配行尾的&quot;vim&quot;。 需要查找特殊字符需要转义，例如/vim\$匹配&quot;vim$&quot;。 注意查找回车应当用\n，而替换为回车应当用\r（相当于&lt;CR&gt;）。 查找当前单词在normal模式下按下*即可查找光标所在单词（word）， 要求每次出现的前后为空白字符或标点符号。例如当前为foo， 可以匹配foo bar中的foo，但不可匹配foobar中的foo。 这在查找函数名、变量名时非常有用。 按下g*即可查找光标所在单词的字符序列，每次出现前后字符无要求。 即foo bar和foobar中的foo均可被匹配到。 :s（substitute）命令用来查找和替换字符串。语法如下： 1:&#123;作用范围&#125;s/&#123;目标&#125;/&#123;替换&#125;/&#123;替换标志&#125; 例如:%s/foo/bar/g会在全局范围(%)查找foo并替换为bar，所有出现都会被替换（g）。 作用范围作用范围分为当前行、全文、选区等等。 当前行： 1:s/foo/bar/g 全文： 1:%s/foo/bar/g 选区，在Visual模式下选择区域后输入:，Vim即可自动补全为 :&#39;&lt;,&#39;&gt;。 1:&apos;&lt;,&apos;&gt;s/foo/bar/g 2-11行： 1:5,12s/foo/bar/g 当前行.与接下来两行+2： 1:.,+2s/foo/bar/g 替换标志上文中命令结尾的g即是替换标志之一，表示全局global替换（即替换目标的所有出现）。 还有很多其他有用的替换标志： 空替换标志表示只替换从光标位置开始，目标的第一次出现： 1:%s/foo/bar i表示大小写不敏感查找，I表示大小写敏感： 123:%s/foo/bar/i# 等效于模式中的\c（不敏感）或\C（敏感）:%s/foo\c/bar c表示需要确认，例如全局查找&quot;foo&quot;替换为&quot;bar&quot;并且需要确认： 1:%s/foo/bar/gc 回车后Vim会将光标移动到每一次&quot;foo&quot;出现的位置，并提示 1replace with bar (y/n/a/q/l/^E/^Y)? 按下y表示替换，n表示不替换，a表示替换所有，q表示退出查找模式， l表示替换当前位置并退出。^E与^Y是光标移动快捷键，参考： Vim中如何快速进行光标移动。 高亮设置高亮颜色设置如果你像我一样觉得高亮的颜色不太舒服，可以在 ~/.vimrc 中进行设置： 123highlight Search ctermbg=yellow ctermfg=black highlight IncSearch ctermbg=black ctermfg=yellow highlight MatchParen cterm=underline ctermbg=NONE ctermfg=NONE 上述配置指定 Search 结果的前景色（foreground）为黑色，背景色（background）为灰色； 渐进搜索的前景色为黑色，背景色为黄色；光标处的字符加下划线。 更多的CTERM颜色可以查阅：http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim 禁用/启用高亮有木有觉得每次查找替换后 Vim 仍然高亮着搜索结果？ 可以手动让它停止高亮，在normal模式下输入： 123:nohighlight# 等效于:nohl 其实上述命令禁用了所有高亮，只禁用搜索高亮的命令是:set nohlsearch。 下次搜索时需要:set hlsearch再次启动搜索高亮。 延时禁用怎么能够让Vim查找/替换后一段时间自动取消高亮，发生查找时自动开启呢？ 12345678&quot; 当光标一段时间保持不动了，就禁用高亮autocmd cursorhold * set nohlsearch&quot; 当输入查找命令时，再启用高亮noremap n :set hlsearch&lt;cr&gt;nnoremap N :set hlsearch&lt;cr&gt;Nnoremap / :set hlsearch&lt;cr&gt;/noremap ? :set hlsearch&lt;cr&gt;?noremap * *:set hlsearch&lt;cr&gt; 将上述配置粘贴到~/.vimrc，重新打开vim即可生效。 一键禁用如果延时禁用搜索高亮仍然不够舒服，可以设置快捷键来一键禁用/开启搜索高亮： 12345678910noremap n :set hlsearch&lt;cr&gt;nnoremap N :set hlsearch&lt;cr&gt;Nnoremap / :set hlsearch&lt;cr&gt;/noremap ? :set hlsearch&lt;cr&gt;?noremap * *:set hlsearch&lt;cr&gt;nnoremap &lt;c-h&gt; :call DisableHighlight()&lt;cr&gt;function! DisableHighlight() set nohlsearchendfunc 希望关闭高亮时只需要按下 Ctrl+H，当发生下次搜索时又会自动启用。 大小写大小写敏感查找在查找模式中加入\c表示大小写不敏感查找，\C表示大小写敏感查找。例如： 1/foo\c 将会查找所有的&quot;foo&quot;,&quot;FOO&quot;,&quot;Foo&quot;等字符串。 大小写敏感配置Vim 默认采用大小写敏感的查找，为了方便我们常常将其配置为大小写不敏感： 1234&quot; 设置默认进行大小写不敏感查找set ignorecase&quot; 如果有一个大写字母，则切换到大小写敏感查找set smartcase 将上述设置粘贴到你的~/.vimrc，重新打开Vim即可生效。]]></content>
      <categories>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git note]]></title>
    <url>%2Fposts%2F3890174064.html</url>
    <content type="text"><![CDATA[Git NoteAuthor: JosephLau Description 此文用来记录平时使用Git遇到的问题与心得. 本文长期更新. 遇到的报错与解决办法 File Mode 12345# 遇到的问题[root@me file]# git diff .gitignorediff --git a/.gitignore b/.gitignoreold mode 100644new mode 100755 解决办法: filemode的变化，文件chmod后其文件某些位是改变了的，如果严格的比较原文件和chmod后的文件，两者是有区别的，但是源代码通常只关心文本内容，因此chmod产生的变化应该忽略，所以设置一下： git config --add core.filemode false 在.gitignore文件中添加忽略规则无效 项目开始的时候 没有将一些无关文件配置进 .gitignore里面。导致文件已经进行跟踪了，但是目前想把这些文件add 到 .gitignore文件中，但是发现没有效果。 修改文件之后，git 依然检测到了，文件改动。 解决办法: 12345# 原来git有一条规则，“如果一个文件一开始没有添加到.gitignore里面，中途添加进去。git将不会忽略这个文件。”在这种情况下，必须使用git rm --cached &lt; file name &gt;# git rm --cached -r &lt; file name &gt; 强制删除# 这个命令 来 移除对这个文件的跟踪，然后将 这个不想被跟踪的文件 添加到 .gitignore文件里面 就可以了。# 做完这些工作之后 你还必须 再 commit 一次，这次commit之后 ，文件就可以被忽略了。 fatal: refusing to merge unrelated histories 123# 在使用Git创建项目的时候，在两个分支合并的时候，出现了下面的这个错误。git merge origin/masterfatal: refusing to merge unrelated histories 解决办法: 在你操作命令后面加 --allow-unrelated-histories 例如 git merge master --allow-unrelated-histories commit之后想撤销 commit之后想要撤销commit某个文件 解决办法: 12345678910# 查看commit日志git log# reset commit# 想要撤销的commit的前一次commit idgit reset --soft [commit id]# 取消暂存git reset HEAD README.md# 重新commitgit add .git commit -m "message" To prevent you from losing history, non-fast-forward updates were rejected 123456To git ! [rejected] master -&gt; master (non-fast-forward)error: failed to push some refs to &apos;git&apos;To prevent you from losing history, non-fast-forward updates were rejectedMerge the remote changes before pushing again. See the &apos;Note aboutfast-forwards&apos; section of &apos;git push --help&apos; for details. 出现原因在于：git仓库中已经有一部分代码，所以它不允许你直接把你的代码覆盖上去。于是你有2个选择方式： 强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容 git push -f 先把git的东西fetch到你本地然后merge后再push git pull 拉取远程强制覆盖本地 1234# 获取remote最新代码git fetch --all# 覆盖本地git reset --hard origin master push失败 push时提示 12$ git push github deployerror: src refspec deploy does not match any. 我的情况是当前仓库没有分支，需要创建分支 git checkout -b deploy 或者 git push github HEAD:deploy 生成密钥 123ssh-keygen -t rsa -C "your email address"# Windows存储在/c/user/username/.ssh中# Mac存储在~/.ssh中 Git常用命令123456789101112131415161718git add .git add [filename]# 提交暂存区到仓库区git commit -m [message]# 提交暂存区的指定文件到仓库区git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区git commit -a# 提交时显示所有diff信息git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化git commit --amend [file1] [file2] ...# 暂时将未提交的变化移除，稍后再移入git stashgit stash pop Git Workspace1234Workspace：工作区Index/Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库 Git Push 免密码登陆123##设置git config --global##credential.helper设置为storegit config --global credential.helper store 查看设置是否完成12345##查看git config设置内容git config --listuser.name=your-usernameuser.email=example@example.comcredential.helper=store Git Push 操作12345git fetch origingit add .git commit -m "message"git merge origin/mastergit push origin master 新建Repo123456# 在当前目录新建一个Git代码库git init# 新建一个目录，将其初始化为Git代码库git init[project-name]# 下载一个项目和它的整个代码历史git clone [url] Git配置1234567# 显示当前的Git配置git config--list# 编辑Git配置文件git config -e[--global]# 设置提交代码时的用户信息git config[--global] user.name "[name]"git config[--global] user.email "[email address]" 增加删除文件123456789101112131415# 添加指定文件到暂存区git add [file1][file2] ...# 添加指定目录到暂存区，包括子目录git add [dir]# 添加当前目录的所有文件到暂存区git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交git add -p# 删除工作区文件，并且将这次删除放入暂存区git rm [file1][file2] ...# 停止追踪指定文件，但该文件会保留在工作区git rm --cached[file]# 改名文件，并且将这个改名放入暂存区git mv[file-original] [file-renamed] 代码提交12345678910111213# 提交暂存区到仓库区git commit -m[message]# 提交暂存区的指定文件到仓库区git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区git commit -a# 提交时显示所有diff信息git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化git commit--amend [file1] [file2] ... 分支操作1234567891011121314151617181920212223242526272829# 列出所有本地分支git branch# 列出所有远程分支git branch -r# 列出所有本地分支和远程分支git branch -a# 新建一个分支，但依然停留在当前分支git branch[branch-name]# 新建一个分支，并切换到该分支git checkout -b[branch]# 新建一个分支，指向指定commitgit branch[branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系git branch--track [branch] [remote-branch]# 切换到指定分支，并更新工作区git checkout[branch-name]# 切换到上一个分支git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间git branch--set-upstream [branch] [remote-branch]# 合并指定分支到当前分支git merge[branch]# 选择一个commit，合并进当前分支git cherry-pick[commit]# 删除分支git branch -d[branch-name]# 删除远程分支git push origin--delete [branch-name]git branch -dr[remote/branch] 标签操作123456789101112131415161718# 列出所有taggit tag# 新建一个tag在当前commitgit tag [tag]# 新建一个tag在指定commitgit tag [tag][commit]# 删除本地taggit tag -d[tag]# 删除远程taggit push origin:refs/tags/[tagName]# 查看tag信息git show [tag]# 提交指定taggit push[remote] [tag]# 提交所有taggit push[remote] --tags# 新建一个分支，指向某个taggit checkout -b[branch] [tag] 查看信息1234567891011121314151617181920212223242526272829303132333435363738394041# 显示有变更的文件git status# 显示当前分支的版本历史git log# 显示commit历史，以及每次commit发生变更的文件git log --stat# 搜索提交历史，根据关键词git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行git log [tag]HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件git log [tag]HEAD --grep feature# 显示某个文件的版本历史，包括文件改名git log --follow [file]git whatchanged [file]# 显示指定文件相关的每一次diffgit log -p[file]# 显示过去5次提交git log -5--pretty --oneline# 显示所有提交过的用户，按提交次数排序git shortlog -sn# 显示指定文件是什么人在什么时间修改过git blame [file]# 显示暂存区和工作区的差异git diff# 显示暂存区和上一个commit的差异git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异git diff HEAD# 显示两次提交之间的差异git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码git diff --shortstat "@&#123;0 day ago&#125;"# 显示某次提交的元数据和内容变化git show [commit]# 显示某次提交发生变化的文件git show --name-only [commit]# 显示某次提交时，某个文件的内容git show [commit]:[filename]# 显示当前分支的最近几次提交git reflog 远程同步12345678910111213141516# 下载远程仓库的所有变动git fetch[remote]# 显示所有远程仓库git remote -v# 显示某个远程仓库的信息git remote show[remote]# 增加一个新的远程仓库，并命名git remote add[shortname] [url]# 取回远程仓库的变化，并与本地分支合并git pull[remote] [branch]# 上传本地指定分支到远程仓库git push[remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突git push[remote] --force# 推送所有分支到远程仓库git push[remote] --all 撤销操作12345678910111213141516171819# 恢复暂存区的指定文件到工作区git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区git checkout [commit] [file]# 恢复暂存区的所有文件到工作区git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变git reset [file]# 重置暂存区与工作区，与上一次commit保持一致git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变git reset[commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset--hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变git reset--keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支git revert [commit]]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F1243066710.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
